{"version":3,"file":"static/chunks/6597.b000145257d3768f.js","mappings":"oiBAIO,IAAMA,EAAkCC,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,IAa9CC,EAAAA,CAAmCA,CACnCC,EAAAA,CAAqBA,EACvB,yKCAK,IAAMC,EAAkB,OAAC,aAACC,CAAW,OAAEC,CAAK,CAAEC,aAAW,MAAEC,CAAI,CAAEC,SAAO,CAAQ,GAC/EC,EAAOC,CAAAA,EAAAA,EAAAA,EAAAA,CAAaA,CAACJ,GACrB,CAACK,EAAiBC,EAAmB,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAA4B,MAC5E,CAACC,EAAeC,EAAiB,CAAGF,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAAkB,MAE9DG,EACJ,WAACC,QAAAA,CAAMC,cAAaC,CAAAA,EAAAA,EAAAA,CAAAA,CAAMA,CAAC,wBACxBf,EAAYgB,GAAG,CAAC,CAACC,EAASC,SAMDD,EALxB,MACE,WAACE,KAAAA,CAAeL,cAAaC,CAAAA,EAAAA,EAAAA,CAAAA,CAAMA,CAACE,EAAQG,MAAM,EAAI,cACpD,UAACC,KAAAA,CAAGC,MAAO,CAACC,cAAe,QAAQ,WACjC,UAACC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,WAAY,SAAUC,IAAK,CAAC,WACtC,UAACC,EAAAA,CAAiBA,CAAAA,CAChBC,aAAcZ,OAAAA,EAAAA,EAAQb,OAAAA,EAARa,EAAmBb,EACjC0B,QADcb,YACOf,EACrBD,MAAO,CAAC,CAACI,GAAQJ,EACjB8B,QAAQ,IACRC,KAAK,cAIX,UAACX,KAAAA,CAAGC,MAAO,CAACW,MAAO,OAAQV,cAAe,SAAUW,UAAW,QAAQ,WACrE,UAACC,EAAAA,CACClB,QAASA,EACTmB,QAAS,KACP5B,EAAmBS,GACnBN,EAAiB,SACnB,QAlBGO,EAuBb,GACCX,GACC,UAAC8B,EAAAA,CAAeA,CAAAA,CACdC,OAA0B,WAAlB5B,EACR6B,QAAS,IAAM5B,EAAiB,MAChCR,KAAMA,GAAQ,KACdqC,cAAejC,EAAgBiC,aAAa,CAC5CC,KAAMlC,EAAgBkC,IAAI,CAC1BxC,MAAOA,EACPG,QAASA,EACTa,QAASV,EACTL,YAAaA,OAKrB,MACE,UAACwC,MAAAA,UACC,WAACC,EAAAA,CAAKA,CAAAA,CAACrB,MAAO,CAACsB,YAAa,aAAqC,OAAxBC,EAAAA,EAAqB,IAAMC,YAAa,OAAO,YACtF,UAACC,QAAAA,UACC,WAAC5B,KAAAA,WACC,UAAC6B,KAAAA,UAAG,WACJ,UAACA,KAAAA,CAAG1B,MAAO,CAACW,MAAO,MAAM,WAAG,iBAG/BrB,MAIT,EAAE,SAEOuB,EAAc,CAAsE,KAAtE,SAAClB,CAAO,SAAEmB,CAAO,CAAqD,CAAtE,EACrB,MACE,UAACa,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,8BAA8BC,UAAU,sBACvD,UAACC,EAAAA,EAAMA,CAAAA,CACLC,KAAM,UAACC,EAAAA,EAAIA,CAAAA,CAACC,KAAK,gBACjBnB,QAASA,EACTtB,cAAaC,CAAAA,EAAAA,EAAAA,CAAAA,CAAMA,CAAC,WAAgC,OAArBE,EAAQG,MAAM,EAAI,QAIzD,gxCCtCAoC,EAAAA,EAAKA,CAACC,QAAQ,CAACC,EAAAA,EAAUA,EAMzB,eAAKC,CAAAA,2DAAAA,GAAAA,GAAAA,CAAAA,GAML,IAAMC,EAAqB,CACzB,IAAyB,CACvBC,CADqB,CACrBA,GAAqBA,CAACC,OAAO,CAC7BD,EAAAA,GAAqBA,CAACE,OAAO,CAC7BF,EAAAA,GAAqBA,CAACG,OAAO,CAC7BH,EAAAA,GAAqBA,CAACI,OAAO,CAC9B,CACD,OAA4B,CAACJ,CAAH,CAAGA,GAAqBA,CAACE,OAAO,CAAC,CAC3D,QAA6B,CAACF,CAAH,CAAGA,GAAqBA,CAACC,OAAO,CAAC,EAGjDI,EAAa,QAuDVC,EAyHAC,KAhLW,MACzBb,CAAI,aACJrD,CAAW,MACXmE,CAAI,CACJC,gBAAc,cACdC,CAAY,mBACZC,CAAiB,CAQlB,GACO,CAACC,EAAYC,EAAc,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAsBA,CAAoB,CAC5EC,SAAU,SACVC,SAAU,CAACC,MAAM,MAAuB,CAC1C,GAEM,CAACC,EAAoBC,EAAsB,CAAGvE,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAA6B,MACnF,CAAC2D,EAAiBa,EAAmB,CAAGxE,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAA6B,MAE7EyE,EAAsB,CAAC,GAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAqBA,CAACjF,EAAY,MAAEqD,CAAI,EAClE6B,EAAWC,EAAAA,OAAa,CAC5B,IAAMzB,CAAkB,CAACa,EAAW,EAAIb,EAAkB,GAAuB,CACjF,CAACa,EAAW,EAGR,OAJsD,MAIrDN,CAAW,CAAEmB,iBAAe,CAAC,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAuBA,CAG5D,CACAC,oBAAqB,QAIZC,EAHP,GAAgD,oBAAoB,CAAhEA,EAAKC,uBAAuB,CAACC,UAAU,CAG3C,cAAOF,EAAAA,EAAKC,uBAAuB,CAACE,KAAK,CAACC,GAAY,EAA/CJ,KAAAA,EAA+C,EAAIK,EAAE,CAArDL,CAETM,eAAgB,GACd,GAAyD,oBAAoB,CAAhEN,EAAKC,uBAAuB,CAACC,UAAU,CAG7CF,EAAKC,uBAAuB,CAACE,KAAK,CAFhC,EAAE,CAIbI,UAAW,qBACTd,WACAE,CACF,EACAa,MAAOC,EACPC,SArEc,CAqEJN,CACZ,GAEAO,CAAAA,EAAAA,EAAAA,EAAAA,CAAyBA,CAACjC,EAAakC,EAAAA,EAAeA,EAEtD,IAAMC,QAAQnC,GAAAA,OAAAA,EAAAA,EAAasB,IAAAA,EAAbtB,IAAAA,CAAAA,EAAAA,EAAmBuB,GAAnBvB,oBAA0C,CAClDyB,EAAQP,EAAAA,OAAa,CACzB,IAAOiB,OAAAA,EAAAA,KAAAA,EAAAA,EAAOX,OAAPW,GAAiB,IAAK,mBAAqBA,EAAMV,KAAK,CAAG,EAAE,CAClE,CAACU,EAAM,EAGTjB,EAAAA,SAAe,CAAC,KACd,GAAIC,EAAgBiB,aAAa,EAAE,GAC7BX,GAASA,EAAMY,MAAM,CAAE,KACXZ,EACFA,EADZ,IAAMa,EAAAA,OAAQb,EAAAA,CAAK,CAACA,EAAMY,MAAM,CAAG,EAAE,EAAvBZ,KAAAA,EAAAA,EAAyBc,GAAzBd,MAAkC,CAC1Ce,EAAAA,OAAMf,EAAAA,CAAK,CAAC,IAANA,KAAAA,EAAAA,EAAUgB,GAAVhB,SAAsB,CAC9Ba,GAASE,KAAK,KAChBpC,GAAAA,EAAe,CAACkC,EAAOE,GAAI,EAE/B,YAFIpC,GAIJA,OAAesC,EAEnB,EAAG,CAACvB,EAAgBiB,QAFhBhC,KAE6B,CAAEqB,EAAOrB,EAAa,EAEvDc,EAAAA,SAAe,CAAC,KACVC,EAAgBiB,aAAa,EAAE,KACjC/B,GAAAA,EAAoBsC,MAAMC,IAAI,CAAC3B,UAE/BZ,GAAAA,CAFAA,MAEoBqC,EAExB,EAAG,CAACvB,EAAgBiB,aAFhB/B,CAE+BA,EAAmBY,EAAS,EAE/DC,EAAAA,SAAe,CAAC,MACVC,EAAgBiB,aAAa,EAAKX,EAAD,MAAa,EAAKzB,EAAD,OAAoB,EAAE,EAC1D6C,KAAK,EAIzB,EAAG,CAACpB,EAAOzB,EAAY8C,OAAO,CAAE3B,EAAgBiB,aAAa,CAAC,EAE9D,GAAM,CAACd,MAAI,CAAC,CAAGtB,EAEf,GAAI,CAACsB,EACH,IADS,EAEP,UAACjE,EAAAA,CAAGA,CAAAA,CAAC0F,QAAS,CAACC,SAAU,EAAE,WACzB,UAACC,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,WAKvB,GAAgD,eAAe,CAA3D5B,EAAKC,uBAAuB,CAACC,UAAU,CACzC,MAAO,UAAC2B,EAAAA,EAAeA,CAAAA,CAACC,MAAO9B,EAAKC,uBAAuB,GAG7D,GAAID,iCAA6E,GAAxEC,uBAAuB,CAACC,UAAU,CACzC,MACE,UAACnE,EAAAA,CAAGA,CAAAA,CAAC0F,QAAS,CAACC,SAAU,EAAE,EAAG1F,KAAM,CAAC+F,eAAgB,QAAQ,WAC3D,UAACC,EAAAA,CAAaA,CAAAA,CAACpE,KAAK,aAAaqE,MAAM,0BAK7C,GAAM,CAACC,iBAAe,CAAC,CAAGlC,EAAKC,uBAAuB,QAEjDE,EAAMY,MAAM,EAAI/B,OAAsC,CAAtCA,EAKnB,iCACE,UAACjD,EAAAA,CAAGA,CAAAA,CAAC0F,QAAS,CAACC,SAAU,GAAIS,WAAY,EAAE,WACzC,WAACpG,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,MAAOL,eAAgB,gBAAiB9F,WAAY,QAAQ,YAChF2C,EACD,UAAC7C,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,MAAOlG,IAAK,EAAE,WACnC,UAACmG,EAAAA,CAAahD,OAAQL,EAAYsD,SAAUrD,WAIjDkB,EAAMY,MAAM,CACX,WAACwB,EAAAA,WACC,UAACjF,QAAAA,UACC,WAAC5B,KAAAA,WACC,UAAC6B,KAAAA,CAAG1B,MAAO,CAACW,MAAO,GAAG,WAAG,cACzB,UAACe,KAAAA,CAAG1B,MAAO,CAACW,MAAO,EAAE,WAAG,WACxB,UAACe,KAAAA,CAAG1B,MAAO,CAACW,MAAO,EAAE,WAAG,aACvB0F,IAAoBM,EAAAA,GAAeA,CAACC,MAAM,CACzC,UAAClF,KAAAA,CAAG1B,MAAO,CAACW,MAAO,GAAG,WAAG,WACvB,KACJ,UAACe,KAAAA,CAAG1B,MAAO,CAACW,MAAO,GAAG,WAAG,WACzB,UAACe,KAAAA,CAAG1B,MAAO,CAACW,MAAO,EAAE,WAAG,cAG5B,UAACpB,QAAAA,UACE+E,EAAM5E,GAAG,CAAC,CAACmH,EAAMjH,IAChB,UAACkH,EAAAA,CAECD,KAAMA,EACN7D,eAAgBA,EAChBY,oBAAqBA,EACrBhE,MAAOA,EACPmH,cAAerD,EACfsD,WAAYrD,GANPkD,EAAKrC,EAAE,QAYpB,UAACtE,EAAAA,CAAGA,CAAAA,CAAC0F,QAAS,CAACC,SAAU,EAAE,EAAG1F,KAAM,CAAC+F,eAAgB,QAAQ,WAC3D,UAACC,EAAAA,CAAaA,CAAAA,CAACpE,KAAK,aAAaqE,MAAM,0BAG1C9B,EAAMY,MAAM,CAAG,EACd,UAAC9D,MAAAA,CAAIpB,MAAO,CAACiH,UAAW,MAAM,WAC5B,UAACC,EAAAA,EAAqBA,CAAAA,CAAE,GAAGlD,CAAe,KAE1C,KACJ,UAACmD,EAAAA,CAAiBA,CAAAA,CAChBnG,OAAQ,CAAC,CAACyC,EACV2D,MAAM,OAAE3D,EAAAA,KAAAA,EAAAA,EAAoB2D,MAAM,CAClCpE,aADQS,EACQT,EAChBY,oBAAqBA,EACrB3C,QAAS,IAAMyC,EAAsB,QAEvC,UAAC2D,EAAAA,CAAaA,CAAAA,CACZrG,OAAQ,CAAC,CAAC8B,EACVsE,OAAQtE,OAAAA,QAAAA,EAAAA,KAAAA,EAAAA,EAAiBsE,MAAAA,EAAjBtE,EAA2B,KACnCsC,EADQtC,GAAAA,IACC,OAAEA,EAAAA,KAAAA,EAAAA,EAAiBsC,SAAS,CACrCxB,OADWd,aACUc,EACrB3C,QAAS,IAAM0C,EAAmB,WA/D/B,IAmEX,EAEM6C,EAAe,OAAC,CACpBhD,QAAM,UACNiD,CAAQ,CAIT,GACOa,EAAQ,CACZ,CAACC,GAAG,OAAyBC,MAAO,WAAW,EAC/C,CAACD,GAAG,WAA6BC,MAAO,WAAW,EACnD,CAACD,GAAG,UAA4BC,MAAO,QAAQ,EAChD,CACKC,EAAaH,EAAMI,IAAI,CAAC,OAAC,KAACH,CAAG,CAAC,UAAKA,IAAQ/D,IACjD,MACE,UAACmE,EAAAA,CAAMA,CAAAA,CACLC,aAAc,CAACC,SAAU,cAAc,EACvCC,YAAY,EACZL,WAAYA,EACZH,MAAOA,EACPS,aAAc,CAACC,EAAMC,IAEjB,UAACC,EAAAA,EAAQA,CAAAA,CACPC,OAAQF,EAAMG,SAAS,CAACD,MAAM,CAC9BrH,QAASmH,EAAMI,WAAW,CAE1BC,KAAMN,EAAKR,KAAK,CAChBxH,MAAO,CAACW,MAAO,OAAO,GAFjBqH,EAAKT,GAAG,EAMnBgB,iBAAkB,OAAC,CAACC,YAAU,eAAEC,CAAa,CAAC,GACtCC,EAAgBD,EAAc/I,GAAG,CAAC8I,GAAYG,MAAM,CAACC,SAC3D,MAAO,UAACC,EAAAA,EAAIA,CAAAA,UAAEH,GAChB,EACAI,aAAc,GAAUrC,EAASuB,EAAKT,GAAG,WAEzC,UAACzF,EAAAA,EAAMA,CAAAA,CACLiH,UAAW,UAAC/G,EAAAA,EAAIA,CAAAA,CAACC,KAAK,oBACtBjC,MAAO,CAACgJ,SAAU,QAASC,QAAS,OAAQ/C,eAAgB,eAAe,iBAE1EuB,EAAAA,KAAAA,EAAAA,EAAYD,KAAK,IAI1B,EAEa0B,CANJzB,CAM0B,OAAC,MAClCxF,CAAI,CACJrD,aAAW,gBACXoE,CAAc,mBACdmG,CAAiB,iBACjBC,CAAe,gBACfC,CAAc,UACdvF,CAAQ,CAST,GACO,CAACwF,EAAgBC,EAAkB,CAAGlG,CAAAA,EAAAA,EAAAA,CAAAA,CAAsBA,CAAqB,CACrFmG,OAASpC,GAAY,SAACA,EAAM,EAC5BqC,OAAQ,GAA8B,UAArB,OAAOC,EAAGtC,MAAM,CAAgBsC,EAAGtC,MAAM,MAAG7B,CAC/D,GAEM,CAACoE,EAAeC,EAAa,CAAG7F,EAAAA,QAAc,EAAU,GAExDH,EAAsB,CAAC,GAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAqBA,CAACjF,EAAY,MAAEqD,CAAI,EAClEY,EAAcgH,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAA8CjF,EAAoB,CAC5FF,UAAW,qBACTd,kBACAwF,iBACAC,EACAvF,WACAgG,MAAOV,OAAkB7D,EAAY,EACvC,EACAwE,6BAA6B,CAC/B,GAEAjF,CAAAA,EAAAA,EAAAA,EAAAA,CAAyBA,CACvBjC,EACA,IACA,CAAE8G,IAAkBP,GAAmBC,CAAAA,CAAc,EAEvD,GAAM,MAAClF,CAAI,OAAE8B,CAAK,CAAC,CAAGpD,EAEtB,GAAI,CAACsB,GAAQ8B,EACX,KADkB,CAEhB,iCACE,UAAC/F,EAAAA,CAAGA,CAAAA,CAAC0F,QAAS,CAACoE,IAAK,GAAI1D,WAAY,EAAE,EAAG2D,OAAO,kBAC9C,UAACC,EAAAA,EAAUA,CAAAA,UAAC,mBAEd,UAAChK,EAAAA,CAAGA,CAAAA,CAAC0F,QAAS,CAACC,SAAU,EAAE,WACzB,UAACC,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,iBAMzB,GAAgD,eAAe,CAA3D5B,EAAKC,uBAAuB,CAACC,UAAU,CACzC,MAAO,UAAC2B,EAAAA,EAAeA,CAAAA,CAACC,MAAO9B,EAAKC,uBAAuB,GAE7D,GAAID,iCAA6E,GAAxEC,uBAAuB,CAACC,UAAU,CACzC,OAAO,KAKT,GAAM,OAACC,EAAQ,EAAE,CAAC,CAAGH,EAAKC,uBAAuB,CAE3C+F,EAAc,IAClBZ,EAAkB1C,EAAOA,EAAKO,MAAM,MAAG7B,EACzC,EAcA,MACE,iCACE,UAAC4B,EAAAA,CAAiBA,CAAAA,CAChBnG,OAAQ,CAAC,CAACsI,EACVlC,OAAQkC,EACRtG,eAAgBA,EAChBY,oBAAqBA,EACrB3C,QAAS,IAAMkJ,OAAY5E,KAE7B,UAACrF,EAAAA,CAAGA,CAAAA,CAAC0F,QAAS,CAACC,SAAU,GAAIS,WAAY,EAAE,WACzC,UAAC4D,EAAAA,EAAUA,CAAAA,UAAC,mBAEd,UAAChK,EAAAA,CAAGA,CAAAA,CAAC+J,OAAO,eACV,UAACG,EAAAA,CAAgBA,CAAAA,CACf9F,MAAOA,EACPtB,eAAgBA,EAChBqH,YA5BY,CA4BCC,GA3Bf,GACFV,GADS,UAGP/C,EAAAA,KAAAA,EAAAA,EAAM0D,MAAM,EAAE,EACZpB,GACFA,EAAkBtC,EAAK0D,MAAM,EAE/BX,GAAa,CAHU,EAK3B,EAmBQY,aAAcL,EACdM,WACErB,GAAmBC,EAAiB,CAACA,EAAgBD,EAAgB,MAAG7D,QAMpF,EAAE,SAEOuB,EAAQ,CAahB,KAbgB,MACfD,CAAI,gBACJ7D,CAAc,OACdpD,CAAK,eACLmH,CAAa,YACbC,CAAU,CAQX,CAbgB,EAcT,CAAC0D,EAAiBC,EAAkB,CAAG5G,EAAAA,OAAa,CAAC,KACzD,IAAM6G,EAAW/D,EAAKgE,+BAA+B,CASrD,MAAO,CAROC,CAAAA,EAAAA,EAAAA,EAAAA,CAA6BA,CACzCF,EACAG,EAAAA,GAA4BA,CAACC,cAAc,EAE7BF,CAAAA,EAAAA,EAAAA,EAAAA,CAA6BA,CAC3CF,EACAG,EAAAA,GAA4BA,CAACE,iBAAiB,EAEzB,EACtB,OAACpE,EAAAA,KAAAA,EAAAA,EAAMgE,MAANhE,yBAAqC,CAAC,EAEpCqE,EAAiBC,CAAAA,EAAAA,EAAAA,EAAAA,CAAkBA,CAACtE,EAAMjH,GAEhD,MACE,WAACC,KAAAA,WACC,UAACE,KAAAA,UACC,UAACqL,EAAAA,CAAgBA,CAAAA,CACfhG,UAAWyB,EAAKzB,SAAS,CACzBiG,WAAY,CAACC,cAAc,EAAOC,aAAa,CAAI,MAGvD,UAACxL,KAAAA,UACC,UAACyL,EAAAA,CAAaA,CAAAA,CACZ3E,KAAMA,EACN7D,eAAgBA,EAChBkI,eAAgBA,MAGpB,UAACnL,KAAAA,UACEmL,EACC,KAEA,UAACO,EAAAA,CAAWA,CAAAA,CACVC,UAAW7E,EAAKzB,SAAS,CACzBuG,QAAS9E,EAAKvB,YAAY,EAAIsG,KAAKC,GAAG,GAAK,QAIhDhF,EAAKR,eAAe,GAAKM,EAAAA,GAAeA,CAACC,MAAM,CAC9C,UAAC7G,KAAAA,UACE8G,EAAKiF,MAAM,CACV,WAAC5L,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,MAAOnG,WAAY,SAAUC,IAAK,CAAC,YACxD,UAACe,MAAAA,CACCpB,MAAO,CACL+L,WAAYC,EAAAA,CAAUA,CAACC,SAAS,CAChCC,SAAU,OACVC,SAAU,QACVC,SAAU,QACZ,WAEA,UAACC,EAAAA,CAAcA,CAAAA,CAAC/D,KAAMgE,CAAAA,EAAAA,EAAAA,EAAAA,CAAoBA,CAACzF,EAAKiF,MAAM,GAAK,OAE7D,UAACS,EAAAA,CAAcA,CAAAA,CAACC,MAAO3F,EAAKiF,MAAM,EAAI,QAGxC,+BAAE,QAGJ,KACJ,UAAC/L,KAAAA,UACC,WAACG,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,SAAUlG,IAAK,CAAC,YACpC2C,WACC,WAAC9C,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,WAAY,SAAUC,IAAK,CAAC,YACtC,UAACoM,EAAAA,CAAUA,CAAAA,CAAC3L,QAAS,IAAMiG,EAAcF,YACf,IAAvBA,EAAK0D,MAAM,CAACrF,MAAM,CACf,kBACA,GAAsB,OAAnB2B,EAAK0D,MAAM,CAACrF,MAAM,CAAC,qBAEN,IAArB2B,EAAK6F,IAAI,CAACxH,MAAM,CACb2B,EAAK6F,IAAI,CAAChN,GAAG,CAAC,GACZ,UAACqE,EAAAA,QAAc,WACb,UAAC4I,EAAAA,EAAaA,CAAAA,CAACC,IAAKA,KADDA,EAAIpI,EAAE,GAI7B,QAGN,UAACtE,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,WAAY,SAAUC,IAAK,CAAC,WACtC,UAACoM,EAAAA,CAAUA,CAAAA,CAAC3L,QAAS,IAAMiG,EAAcF,YACM,IAA5CA,EAAKgG,kCAAkC,CACpC,8BACA,GAA2C,OAAxChG,EAAKgG,kCAAkC,CAAC,mCAIpDnC,GAAmBC,EAClB,WAACmC,EAAAA,EAAOA,CAAAA,WAAC,IAENpC,EACC,WAACqC,OAAAA,WACErC,EAAgB,aAAWsC,CAAAA,EAAAA,EAAAA,CAAAA,CAAQA,CAACtC,EAAiB,GAAI,KAAK,WAC9DC,EAAoB,IAAM,MAE3B,KACHA,EACC,WAACoC,OAAAA,WACEpC,EAAkB,aAAWqC,CAAAA,EAAAA,EAAAA,CAAAA,CAAQA,CAACrC,EAAmB,GAAI,KAAK,eAEnE,KAAK,OAGT,UAGR,UAAC5K,KAAAA,UACC,UAAC+B,EAAAA,EAAMA,CAAAA,CAAChB,QAAS,IAAMkG,EAAWH,YAAO,kBAIjD,CAEA,IAAMjC,EAAqBtG,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,IA8B1B2O,EAAAA,EAAmBA,CACnBzO,EAAAA,CAAqBA,CACrB0O,EAAAA,EAAiBA,CACjBC,EAAAA,EAAqBA,EAGnBzG,EAAe0G,CAAAA,EAAAA,EAAAA,EAAAA,CAAMA,CAAC/L,EAAAA,CAAKA,EAAAA,UAAAA,CAAAA,wICpjB1B,SAAS8J,EACdtE,CAAoE,CACpEjH,CAAa,EAEb,MACE,CAACiH,EAAKvB,YAAY,EAGjB,EAFD,GAEC,GAAgBuB,EAAKrD,MAAM,GAAKjB,EAAAA,GAAqBA,CAACG,OAAO,EAC3C,IAAjBmE,EAAKzB,SAAS,CAAUwG,KAAKC,GAAG,GAhBnB,EAgBwBwB,GAhBnB,CAgBmBA,CAAS,CAI7C,EApBsB,KAAK,EAoBlBvC,EACdF,CAA0E,CAC1E0C,CAAkC,EAElC,OAAO1C,EAAS2C,MAAM,CAAC,CAACC,EAAK7N,KAC3B,GAAIA,EAAQ2N,IAAI,GAAKA,EAAM,CAZ+F,IAa1G3N,EAAd,OAAO6N,GAAO7N,CAAAA,EAAAA,IAAAA,GAAAA,EAAQ8N,aAAAA,EAAR9N,KAAAA,EAAAA,EAAuBuF,GAAvBvF,GAAuBuF,IAAU,CACjD,CACA,OAAOsI,CACT,EAAG,EACL,sLCPO,IAAMhC,EAAgB,OAAC,MAC5B3E,CAAI,gBACJ7D,CAAc,gBACdkI,CAAc,CAC0B,GAClC,CAACwC,EAAYC,EAAc,CAAGxO,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GACvCyO,EAAMC,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KAClB,IAAMC,EAAmC,qBAAnB9K,EAAwC,kBAAoB,MAClF,OAAQ6D,EAAKrD,MAAM,EACjB,KAAKjB,EAAAA,GAAqBA,CAACG,OAAO,CAChC,MACE,UAACqL,EAAAA,CAAGA,CAAAA,CAACC,OAAO,UAAUjM,KAAMmJ,OAAiB3F,EAAY,mBACtD2F,EAAiB,cAAgB,cAGxC,MAAK3I,EAAAA,GAAqBA,CAACI,OAAO,CAChC,IAAMiL,EACJ,UAACK,EAAAA,CAAOA,CAAAA,CACNC,UAAW3M,EAAAA,EAAwB,GACnCiG,MACExE,uBACI,+BACA,qBAIV,GAAI,YAAa6D,GAAQA,EAAKsH,OAAO,CAACjJ,MAAM,CAAE,CAC5C,IAAMkJ,EAAU,GAAuB,OAApBvH,EAAKsH,OAAO,CAACjJ,MAAM,CAAC,uFACvC,MACE,UAACvD,EAAAA,CAAOA,CAAAA,CAACkG,SAAS,QAAQjG,QAASwM,WAChCR,GAGP,CACA,GAAI,eAAgB/G,GAAQA,EAAKwH,UAAU,CACzC,CAD2C,KAEzC,UAAC1M,EAAAA,CAAOA,CAAAA,CAACkG,SAAS,QAAQjG,QAASiF,EAAKwH,UAAU,CAAEC,cAAc,eAC/DV,IAIP,OAAOA,CACT,MAAKrL,EAAAA,GAAqBA,CAACE,OAAO,CAChC,MACE,WAACvC,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,MAAOnG,WAAY,SAAUC,IAAK,CAAC,YACxD,UAAC0N,EAAAA,CAAGA,CAAAA,CAACC,OAAO,kBAAS,YACpBnH,EAAKZ,KAAK,CACT,UAACwG,EAAAA,CAAUA,CAAAA,CACT3L,QAAS,KACP6M,GAAc,EAChB,WACD,SAGC,OAGV,MAAKpL,EAAAA,GAAqBA,CAACC,OAAO,CAChC,IAAM+L,EACe,qBAAnBvL,EACI6D,EAAKgG,kCAAkC,CACvChG,EAAK0D,MAAM,CAACrF,MAAM,CAClBsJ,EACJ,WAACT,EAAAA,CAAGA,CAAAA,CAACC,OAAO,oBACTO,EAAM,IAAET,EACRd,CAAAA,EAAAA,EAAAA,CAAAA,CAAQA,CAACuB,EAAO,GAAI,KAAK,gBAG9B,GAAI,YAAa1H,GAAQA,EAAKsH,OAAO,CAACjJ,MAAM,CAAG2B,EAAK0D,MAAM,CAACrF,MAAM,CAAE,CACjE,IAAMkJ,EAAU,GACdvH,MAAAA,CADiBA,EAAKsH,OAAO,CAACjJ,MAAM,CAAC,yBAEtC,OADC2B,EAAKsH,OAAO,CAACjJ,MAAM,CAAG2B,EAAK0D,MAAM,CAACrF,MAAM,CACzC,qEACD,MACE,UAACvD,EAAAA,CAAOA,CAAAA,CAACkG,SAAS,QAAQjG,QAASwM,WAChCI,GAGP,CACA,OAAOA,CACX,CACF,EAAG,CAACtD,EAAgBrE,EAAM7D,EAAe,EAEzC,MACE,iCACG4K,EACA/G,EAAKZ,KAAK,CACT,WAACwI,EAAAA,EAAMA,CAAAA,CAACzN,OAAQ0M,EAAYtH,MAAM,QAAQpG,MAAO,CAACW,MAAO,MAAM,YAC7D,UAAC+N,EAAAA,EAAUA,CAAAA,UACT,UAAC1I,EAAAA,EAAeA,CAAAA,CAACC,MAAOY,EAAKZ,KAAK,KAEpC,UAAC0I,EAAAA,EAAYA,CAAAA,CAACC,SAAS,aACrB,UAAC9M,EAAAA,EAAMA,CAAAA,CACLkM,OAAO,UACPlN,QAAS,KACP6M,GAAc,EAChB,WACD,eAKH,OAGV,EAAE,0tBCtIK,IAAMpP,EAAsCD,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,IAmClDE,EAAAA,CAAqBA,EACvB,+EC/BF,IAAMqQ,EAAuB,wFAGvBC,EAAkB,OAAC,KAACvH,CAAG,OAAEiF,CAAK,CAA+B,SAAM,KAACjF,QAAKiF,CAAK,GAGvEuC,EAAiC,CAC5CC,EACAC,EACAnQ,SAQAkQ,EAAAA,EANA,GAAI,CAACA,EACH,MAAO,EAAE,CAGX,IAAME,EAAyC,EAAE,CA8BjD,CAlC0B,YAM1BF,GAAAA,MAAAA,GAAAA,EAAqBG,gBAAAA,EAArBH,CAAAA,OAAAA,EAAAA,EAAuCtQ,WAAAA,GAAvCsQ,EAAoDI,OAAO,CAAC,CAA5DJ,OAcerP,EAbb,IAAM0P,EAAoBC,CAAAA,EAAAA,EAAAA,CAAAA,CAAwBA,CAAC3P,EAAQuB,aAAa,EAExE,GAAI,CACFqO,EAAAA,EAAU,CAACF,EACb,CAAE,KAAM,CACNG,CAAAA,EAAAA,EAAAA,EAAAA,CAAeA,CAAC,CAACpJ,MAAO,eAAgB9G,KAAMuP,CAAmB,GACjE,MACF,CACA,GAAM,wBAACY,CAAsB,gBAAEC,CAAc,CAAC,CAAGT,EAE3CU,EAAmC,CACvCC,cAAeP,EACfQ,SAAU,CACR/Q,QAASa,OAAAA,EAAAA,EAAQb,OAAAA,EAARa,EAAmBb,UAAnBa,eACT8P,iBACAC,EACAI,eAAgB,EAAE,CAClBC,oBAAqB,EAAE,CACvBC,oBAAgBzK,CAClB,EACA1G,KAAM,UACNoR,kBAAmB,CACjB9O,KAAM,IAAIxB,EAAQwB,IAAI,CAACzB,GAAG,CAACoP,GAC7B,CACF,EACAI,EAAoBgB,IAAI,CAACP,EAC3B,GACOT,CACT,EAAE,EAG8C,CAC9CiB,EACAC,EACAtR,SAQAqR,EAAAA,EANA,GAAI,CAACA,EACH,MAAO,EAAE,CAGX,IAAMjB,EAAyC,EAAE,CA8BjD,GAlC4B,IAM5BiB,SAAAA,OAAAA,EAAAA,EAAuBhB,cAAvBgB,EAAuBhB,GAAvBgB,OAAAA,EAAAA,EAAyCzR,WAAAA,GAAzCyR,EAAsDf,OAAO,CAAC,CAA9De,OAcexQ,EAbb,IAAM0P,EAAoBC,CAAAA,EAAAA,EAAAA,CAAAA,CAAwBA,CAAC3P,EAAQuB,aAAa,EAExE,GAAI,CACFqO,EAAAA,EAAU,CAACF,EACb,CAAE,KAAM,CACNG,CAAAA,EAAAA,EAAAA,EAAAA,CAAeA,CAAC,CAACpJ,MAAO,eAAgB9G,KAAMuP,CAAmB,GACjE,MACF,CACA,GAAM,wBAACY,CAAsB,gBAAEC,CAAc,CAAC,CAAGU,EAE3CT,EAAmC,CACvCC,cAAeP,EACfQ,SAAU,CACR/Q,QAASa,OAAAA,EAAAA,EAAQb,OAAAA,EAARa,EAAmBb,UAAnBa,eACT8P,iBACAC,EACAI,eAAgB,EAAE,CAClBC,oBAAqB,EAAE,CACvBC,oBAAgBzK,CAClB,EACA1G,KAAM,UACNoR,kBAAmB,CACjB9O,KAAM,IAAIxB,EAAQwB,IAAI,CAACzB,GAAG,CAACoP,GAAiB,CAEhD,EACAI,EAAoBgB,IAAI,CAACP,EAC3B,GACOT,CACT,EAAE,0pBC9FK,IAAMmB,EAAkB/R,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,IA4B9BgS,EAAAA,EAA0BA,EAC5B,eCnBK,IAAMC,EAAa,OAAC,oBAACC,CAAkB,mBAAEC,CAAiB,CAAE,GAAGC,EAAgB,GAC9EC,EACJH,GAAsBA,CAA+B,MAAZI,OAAO,EAAcJ,EAAmBK,QAAQ,CACrFC,EACJL,IAAoD,GAA/B,CAACA,EAAkBG,OAAO,EAAcH,EAAkBI,QAAQ,QAEzF,GAAuBF,EAerB,UAACzQ,EAfmB,CAAgB,CAehCA,CAAE,GAAGwQ,CAAQ,UACf,UAACK,EAAAA,CAAKA,CAAAA,CACJ/C,OAAO,UACP5H,MAbAuK,CAaOvK,CAZL0K,EACK,WAFQ,EACE,kCAGZ,mCAEF,kCAQHE,YACE,WAAC5P,MAAAA,WAAI,UACK,IACR,UAAC6P,IAAAA,CACCC,KAAK,oDACLC,OAAO,SACPC,IAAI,sBACL,iCAEI,IAAI,2EA3BV,IAkCX,EAAE,qCC9CK,IAAMC,EAAqB,OAAC,QACjCC,CAAM,aACN1S,CAAW,CACXmE,MAAI,CAKL,GACO4F,EAAS5E,EAAAA,OAAa,CAC1B,IAAO,EACL5C,KAAM,CACJ,CAACoG,IAAKgK,EAAAA,CAAUA,CAACC,UAAU,CAAEhF,MAAO8E,EAAOrP,IAAI,EAC/C,CAACsF,IAAKgK,EAAAA,CAAUA,CAACE,kBAAkB,CAAEjF,MAAOkF,CAAAA,EAAAA,EAAAA,EAAAA,CAAgBA,CAAC9S,EAAY,EAC1E,CACH,EACA,CAACA,EAAa0S,EAAOrP,IAAI,CAAC,EAE5B,MACE,UAAC0P,EAAAA,CAAwBA,CAAAA,CAAChJ,OAAQA,EAAQiJ,wBAAwB,IAACC,oBAAqB9O,GAE5F,EAAE,kqCCAK,IAAM+O,EAAa,QAuGtBC,KAvGuB,aAACnT,CAAW,CAA6B,GAClEoT,CAAAA,EAAAA,EAAAA,EAAAA,CAAgBA,GAEhB,GAAM,CAACC,YAAU,CAAC,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAASA,GAC9BC,CAAAA,EAAAA,EAAAA,CAAAA,CAAgBA,CAAC,WAAsB,OAAXF,IAE5B,IAAMhD,EAAiB,CACrB,GAAGpL,CAAAA,EAAAA,EAAAA,CAAAA,CAAqBA,CAACjF,EAAY,YACrCqT,CACF,EAEM,CAACnO,EAAUsO,EAAY,CAAGjT,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,MAAsCoG,GACxE,CAAC8M,EAAWpP,EAAa,CAAG9D,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,MAA+BoG,GACnEb,EAAYmJ,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IACxB,GAAiB/J,EACR,CACLuF,OAFuB,OAET,OAAEgJ,EAAAA,KAAAA,EAAAA,CAAW,CAAC,EAAE,CAC9BjJ,QADgBiJ,OACD,CAAEA,QAAAA,KAAAA,EAAAA,CAAW,CAAC,EAAE,GAAdA,OACjBvO,CACF,EAEK,CAAC,EACP,CAACA,EAAUuO,EAAU,EAElB,CAACC,EAAaC,EAAe,CAAGlP,CAAAA,EAAAA,EAAAA,CAAAA,CAAsBA,CAC1DwK,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CACL,IAAO,EACLvK,SAAU,OACVmG,OAAQ,OAAC,MAAC+I,CAAI,CAAC,SAAe,SAATA,EAAkB,OAAS,eAChDhJ,OAASiJ,GACA,EAACD,KAAMC,EAAK3G,YAAQvG,EAAWzB,cAAUyB,EAAS,EAE7D,EACA,EAAE,GAIA1C,EAAcgH,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAA4C6I,EAAmB,CACzFhO,UAAW,gBAACuK,CAAc,EAC1BlF,6BAA6B,CAC/B,GAEMgI,EAAuBlI,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAGnC8I,EAA+B,CAC/BjO,UAAW,gBAACuK,CAAc,EAC1BlF,6BAA6B,CAC/B,GAEM6I,EAAgB9N,CAAAA,EAAAA,EAAAA,EAAAA,CAAyBA,CAACjC,EAAakC,EAAAA,EAAeA,EACtE8N,EAAgB/N,CAAAA,EAAAA,EAAAA,EAAAA,CAAyBA,CAACiN,EAAsBhN,EAAAA,EAAeA,EAC/E+N,EAAeC,CAAAA,EAAAA,EAAAA,EAAAA,CAAgBA,CAACH,EAAeC,GAE/C,MAAC1O,CAAI,SAAEwB,CAAO,CAAC,CAAG9C,EAElBE,EACJ,UAACiQ,EAAAA,CAAWA,CAAAA,CACVC,YAAa,IAAIC,IAAI,CAACZ,EAAY,EAClCa,QAAS,CACP,CAAC3O,GAAI,cAAegD,MAAO,aAAa,EACxC,CAAChD,GAAI,OAAQgD,MAAO,MAAM,EAC3B,CACD1G,QAAS,IACPyR,EAAe/N,EACjB,IAIJ,GAAI,CAACL,GAAQwB,EACX,MACE,CAFkB,EAElB,QAACzF,EAAAA,CAAGA,CAAAA,CACFkT,OAAQ,CAACpJ,IAAK,EAAE,EAChB7J,KAAM,CAACoG,UAAW,MAAOnG,WAAY,SAAU8F,eAAgB,SAAU7F,IAAK,EAAE,YAEhF,UAACyF,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cACjB,UAAC3E,MAAAA,CAAIpB,MAAO,CAACqT,MAAO9R,EAAAA,EAAgB,EAAE,WAAG,uBAK/C,GAAI,CAAC4C,GAA0C,uBAAuB,CAAzDA,EAAKmP,aAAa,CAACjP,UAAU,CACxC,MACE,UAACnE,EAAAA,CAAGA,CAAAA,CAAC0F,QAAS,CAACC,SAAU,EAAE,WACzB,UAACM,EAAAA,CAAaA,CAAAA,CACZpE,KAAK,QACLqE,MAAO,0BAAgExH,MAAAA,CAArCqT,EAAW,0BAA2C,OAAjBrT,EAAYqD,IAAI,CAAC,SAMhG,GAAM,eAACqR,CAAa,CAAC,CAAGnP,EACxB,GAAiC,eAAe,CAA5CmP,EAAcjP,UAAU,CAC1B,MAAO,UAAC2B,EAAAA,EAAeA,CAAAA,CAACC,MAAOqN,IAGjC,GAAiC,qBAAqB,CAAlDA,EAAcjP,UAAU,CAC1B,MAAO,UAACkP,EAAAA,EAAQA,CAAAA,CAACC,GAAG,sBAGtB,GAAM,UAACC,CAAQ,CAAC,CAAGtP,EACb2L,EACJiC,CAAAA,OAAAA,EAAAA,EAAqB5N,IAAAA,EAArB4N,KAAAA,EAAAA,EAA2BuB,GAA3BvB,UAAwC,CAAC1N,UAAAA,IAAe,SACpD0N,EAAqB5N,IAAI,CAACmP,aAAa,CAACxD,cAAc,CACtD,KAEA4D,EACJJ,EAAcK,UAAU,GAAKC,EAAAA,GAAUA,CAACC,gBAAgB,EACxDP,EAAcK,UAAU,GAAKC,EAAAA,GAAUA,CAACE,UAAU,CAE9CtD,EAAqBiD,EAASM,YAAY,CAACvD,kBAAkB,CAE7DxN,EAAiC0Q,EAAqB,mBAAqB,OAEjF,MACE,WAACM,EAAAA,CAAIA,CAAAA,WACH,UAACC,EAAAA,EAAaA,CAAAA,CACZrV,YAAaA,EACb0S,OAAQgC,EACRS,aAAcvD,EAAmBI,OAAO,CACxCkC,aAAcA,EACdhD,eAAgBA,GAAkB,OAEpC,UAACS,EAAUA,CACTC,OADSD,YACWC,EACpB5K,QAAS,CAACC,SAAU,GAAIS,WAAY,EAAE,IAExC,UAAC4C,EAAAA,CAAmBA,CAAAA,CAClBlG,eAAgBA,EAChBpE,YAAaA,EACbqD,KAAMqR,EAAcrR,IAAI,CACvB,GAAGyC,CAAS,GAEf,UAACxE,EAAAA,CAAGA,CAAAA,CAACkT,OAAQ,CAACpJ,IAAK,EAAE,EAAGC,OAAO,eACZ,gBAAhBqI,EACC,UAAC1P,EAAAA,CAAUA,CAAAA,CACTG,KAAMA,EACNC,eAAgBA,EAChBpE,YAAaA,EACbqD,KAAMqR,EAAcrR,IAAI,CACxBiB,kBAAmBkP,EACnBnP,aAAcA,IAGhB,UAACoO,EAAkBA,CAACzS,YAAaA,EAAa0S,CAA3BD,MAAmCiC,EAAevQ,KAAMA,QAKrF,EAAE,EAEwBzE,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,IA4BzB+R,EACA7R,EAAAA,CAAqBA,CACrB0V,EAAAA,CAAwBA,EAGfvB,EAAgCrU,CAAAA,CAL1B+R,CAK0B/R,EAAAA,EAAAA,CAAGA,CAAAA,IAa5CC,EAAAA,CAAmCA,CACnCC,EAAAA,CAAqBA,EACvB,8rBCnNK,IAAM6I,EAAgB,OAAC,QAC5BD,CAAM,WACNhC,CAAS,qBACTxB,CAAmB,CACnB5C,QAAM,SACNC,CAAO,CAOR,GACC,MACE,WAACwN,EAAAA,EAAMA,CAAAA,CACLzN,OAAQA,EACRC,QAASA,EACTjB,MAAO,CAACW,MAAO,OAAQwL,SAAU,SAAUnD,SAAU,OAAO,EAC5D5C,MACE,UAAC2G,OAAAA,UACE3H,EACC,WAAC2H,OAAAA,WACC,WAACA,OAAAA,WAAK,YAAUnJ,EAAoB3B,IAAI,CAAC,QACzC,UAACmJ,EAAAA,CAAgBA,CAAAA,CAAChG,UAAWA,EAAWiG,WAAY,CAACE,aAAa,CAAI,OAGxE,WAACwB,OAAAA,WAAK,YAAUnJ,EAAoB3B,IAAI,gBAK7CmF,EACC,UAAC+M,EAAAA,CAAsBvQ,oBAAqBA,EAAqBwD,OAAQA,IACvE,KAEJ,UAAClH,EAAAA,CAAGA,CAAAA,CAACkU,WAAY7S,EAAAA,EAAwB,GAAIvB,MAAO,CAACqU,OAAQ,EAAGxM,SAAU,UAAU,WAClF,UAAC8G,EAAAA,EAAYA,CAAAA,CAACC,SAAS,aACrB,UAAC9M,EAAAA,EAAMA,CAAAA,CAAChB,QAASG,WAAS,eAKpC,EAAE,EAOmC,OAAC,qBAAC2C,CAAmB,QAAEwD,CAAM,CAAoB,GAC9E,CAACjD,MAAI,SAAEwB,CAAO,CAAC,CAAGkE,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAC9ByK,EACA,CACE5P,UAAW,qBAACd,SAAqBwD,CAAM,EACvC2C,6BAA6B,CAC/B,GAGIwK,EACJpQ,OAAAA,EAAAA,KAAAA,EAAAA,EAAMC,MAAND,iBAA6B,CAACE,UAAAA,IAAe,oBAC7CF,SAAAA,KAAAA,EAAAA,CAAAA,CAAMC,uBAAuB,CAACyC,IAAAA,QAC1B1C,EAAAA,KAAAA,EAAAA,EAAMC,MAAND,iBAA6B,CAAC0C,IAAI,CAAC2N,SAAS,CAACD,MAAM,CACnDhP,OAEN,GAAII,EACF,MACE,CAFS,EAET,OAACzF,EAAAA,CAAGA,CAAAA,CAACF,MAAO,CAACyU,OAAQ,GAAG,EAAGtU,KAAM,CAAC+F,eAAgB,SAAU9F,WAAY,QAAQ,WAC9E,UAACsU,EAAAA,CAAeA,CAAAA,CAAClN,MAAM,oBAK7B,GAAI+M,GAAUA,EAAOrP,MAAM,CACzB,CAD2B,KAEzB,UAAChF,EAAAA,CAAGA,CAAAA,CAACF,MAAO,CAACyU,OAAQ,GAAG,EAAGtU,KAAM,CAACoG,UAAW,QAAQ,WACnD,UAACoO,EAAAA,CAAwBA,CAAAA,CAACJ,OAAQA,MAKxC,IAAMpR,EACJgB,OAAAA,EAAAA,KAAAA,EAAAA,EAAMC,MAAND,iBAA6B,CAACE,UAAAA,IAAe,yBACzCF,EAAAA,KAAAA,EAAAA,EAAMC,MAAND,iBAA6B,CAAC0C,IAAI,CAACrD,MAAM,MACzC+B,EACAc,EACJlC,OAAAA,EAAAA,KAAAA,EAAAA,EAAMC,MAAND,iBAA6B,CAACE,UAAAA,IAAe,yBACzCF,EAAAA,KAAAA,EAAAA,EAAMC,MAAND,iBAA6B,CAACkC,eAAe,MAC7Cd,EACAqP,EACgB,WAApBvO,EACI,2FACoB,aAApBA,EACE,oGACAd,EAER,MACE,UAACrF,EAAAA,CAAGA,CAAAA,CACFF,MAAO,CAACyU,OAAQ,GAAG,EACnBtU,KAAM,CAAC+F,eAAgB,SAAU9F,WAAY,QAAQ,EACrDwF,QAAS,CAACC,SAAU,EAAE,WAEtB,UAACM,EAAAA,CAAaA,CAAAA,CACZpE,KAAK,aACLqE,MAAM,qBACN4K,YACE,WAAC9Q,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,SAAUlG,IAAK,EAAE,YACtC,UAACe,MAAAA,UAAI,uIAIW,YAAf+B,GACC,iCACE,UAAC/B,MAAAA,UAAI,2HAIL,UAACA,MAAAA,UAAI,6EAKbyT,OACED,GACE,UAACE,EAAAA,EAAoBA,CAAAA,CACnB5D,KAAM0D,EACN7L,UAAW,UAAC/G,EAAAA,EAAIA,CAAAA,CAACC,KAAK,yBACvB,0BAQb,EAAE,EAE4B3D,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,IAmB7ByW,EAAAA,CAA8BA,oCC3K3B,IAAMf,EAAO5G,SAAAA,EAAMA,CAAChM,GAAG,2GAK5B,gQCgCK,IAAM4T,EAAuB,OAAC,CACnClF,gBAAc,gBACdmF,CAAc,SACdC,CAAO,aACPtW,CAAW,CAMZ,GACOG,EAAOC,CAAAA,EAAAA,EAAAA,EAAAA,CAAaA,CAACJ,GAC3B,GAAI,CAACsW,GAAW,CAACpF,EACf,MAAO,QADwB,EACvB/C,OAAAA,CAAAA,GAGV,IAAMoI,QAAiBD,EAAAA,KAAAA,EAAAA,EAASvM,MAAM,CAAEwI,EAAjB+D,CAA4B,CAACE,CAAAA,EAAAA,EAAAA,EAAAA,CAAqBA,CAACjE,EAAO5Q,YAAY,UAE7F,EACS,UAAC8U,EAAAA,CAAkBvF,CADR,cACwBA,EAAgBmF,eAAgBA,WAGxEE,EAAAA,KAAAA,EAAAA,EAAgBjQ,MAAAA,EAAQ,CAExB,OAFAiQ,EAECjV,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,MAAOlG,IAAK,CAAC,WACjC8U,EAAezV,GAAG,CAAC,GAClByR,EAAO5Q,YAAY,CACjB,UAACwN,EAAAA,CAAGA,CAAAA,CAAChM,KAAK,MAAMuT,YAAanE,EAAO5Q,YAAY,UAC9C,UAACD,EAAAA,CAAiBA,CAAAA,CAEhBC,aAAc4Q,EAAO5Q,YAAY,CACjCC,oBAAqB5B,EACrBD,MAAO,CAAC,CAAEI,IAAQwW,CAAAA,EAAAA,EAAAA,EAAAA,CAAeA,CAACxW,EAAMoS,EAAO5Q,aAAY,GAHtD4Q,EAAO5Q,YAAY,GAF2B4Q,EAAO5Q,YAAY,EAQxE,QAOV,UAACwN,EAAAA,CAAGA,CAAAA,UACF,UAAC3M,MAAAA,CAAIpB,MAAO,CAACqT,MAAO9R,EAAAA,EAAgB,EAAE,WAAG,UAG/C,EAAE,EAIwB,OAAC,gBACzBuO,CAAc,gBACdmF,CAAc,CAIf,GACO,CAACO,EAAYC,EAAc,CAAGtW,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GAEvC8G,EACJ6J,kBAAe4F,aAAa,CAACrR,UAAU,CAAqByL,EAAe4F,aAAa,CAAG,KAEvF,QAACC,CAAM,QAAEC,CAAM,CAAEC,eAAa,kBAAEC,CAAgB,CAAC,CAAGjI,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KAChE,GAAgD,eAAe,CAA3DiC,EAAe4F,aAAa,CAACrR,UAAU,CACzC,MAAO,CAACsR,OAAQ,EAAE,CAAEC,OAAQ,EAAE,CAAEC,cAAe,EAAE,CAAEC,iBAAkB,EAAE,EAEzE,IAAMF,EAAS9F,EAAe4F,aAAa,CAACK,KAAK,CAEjD,MAAO,CACLJ,OAAQ7F,EAAekG,WAAW,CAACC,KAAK,GAAGC,IAAI,CAACC,EAAAA,EAAkBA,EAClEP,OAAQA,EAAOlW,GAAG,CAAEuR,GAAMA,EAAE1J,GAAG,EAAE2O,IAAI,CAACE,EAAAA,EAAgBA,EACtDP,cAAeD,EACZjN,MAAM,CAAC,QAAa0N,QAAF,CAAC,SAACA,EAAAA,EAAMC,UAAAA,EAAND,KAAAA,EAAAA,EAAkBE,GAAlBF,gBAAqC,IACzD3W,GAAG,CAAC,GAAOuR,EAAE1J,GAAG,EAChB2O,IAAI,CAACE,EAAAA,EAAgBA,EACxBN,iBAAkBF,EACfjN,MAAM,CAAC,QAAY0N,QAAD,SAACA,EAAAA,EAAMC,UAAAA,EAAND,KAAAA,EAAAA,EAAkBE,GAAlBF,gBAAkBE,IACrC7W,GAAG,CAAC,GAAOuR,EAAE1J,GAAG,EAChB2O,IAAI,CAACE,EAAAA,EAAgBA,CAC1B,CACF,EAAG,CAACtG,EAAe,EAEb,CAACwC,EAAaC,EAAe,CAAGpT,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAAC,QACzCqX,EAAab,EAAOzQ,MAAM,EAAI,CAAC0Q,EAAO1Q,MAAM,CAAG,SAAW,SAChEuR,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,IAAMlE,EAAeiE,GAAa,CAACA,EAAW,EAExD,IAAME,EAAuB5G,EAAe4G,oBAAoB,EAAI,GAC9DC,EAvCkB,8BAuCJD,EAEpB,GAAsB,IAAlBf,EAAOzQ,MAAM,EAA4B,IAAlB0Q,EAFkBgB,MAEL,EAAUhB,CAAM,CAAC,EAAE,CACzD,CAD2D,KAEzD,UAAC7H,EAAAA,CAAGA,CAAAA,CAAChM,KAAK,iBACR,UAAC8U,EAAAA,EAAIA,CAAAA,CAACrD,GAAIsD,CAAAA,EAAAA,EAAAA,CAAAA,CAAsBA,CAAClB,CAAM,CAAC,EAAE,WAAImB,CAAAA,EAAAA,EAAAA,EAAAA,CAAsBA,CAACnB,CAAM,CAAC,EAAE,MAKpF,GAAsB,IAAlBA,EAAO1Q,MAAM,EAA4B,IAAlByQ,EAAOzQ,MAAM,EAAUyQ,CAAM,CAAC,EAAE,CACzD,CAD2D,KAEzD,UAAC5H,EAAAA,CAAGA,CAAAA,CAAChM,KAAK,uBACR,UAAC8U,EAAAA,EAAIA,CAAAA,CAACrD,GAAIwD,CAAAA,EAAAA,EAAAA,CAAAA,CAA6BA,CAACrB,CAAM,CAAC,EAAE,WAAIsB,CAAAA,EAAAA,EAAAA,EAAAA,CAAkBA,CAACtB,CAAM,CAAC,EAAE,MAKvF,IAAMuB,EACJjC,IAAmBrB,EAAAA,GAAUA,CAACC,gBAAgB,EAAIoB,IAAmBrB,EAAAA,GAAUA,CAACE,UAAU,CAE5F,MACE,iCACE,WAACrF,EAAAA,EAAMA,CAAAA,CACLzN,OAAQwU,EACRpP,MAAM,kBACNnF,QAAS,IAAMwU,GAAc,GAC7BzV,MAAO,CAACW,MAAO,QAASwL,SAAU,OAAQnD,SAAU,OAAO,EAC3DmO,oBAAoB,IACpBC,iBAAiB,cAEjB,UAAClX,EAAAA,CAAGA,CAAAA,CACFC,KAAM,CAACoG,UAAW,SAAUlG,IAAK,EAAE,EACnCuF,QAAS,CAACU,WAAY,GAAIT,SAAU,EAAE,EACtCoE,OAAO,kBAEP,WAAC/J,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,SAAUlG,IAAK,CAAC,YACrC,UAACgX,EAAAA,EAASA,CAAAA,UAAC,oBACX,UAACC,EAAAA,EAAIA,CAAAA,UAAEZ,SAIX,UAACxW,EAAAA,CAAGA,CAAAA,CAAC0F,QAAS,CAACU,WAAY,GAAI0D,IAAK,CAAC,EAAGC,OAAO,kBAC7C,WAACsN,EAAAA,EAAIA,CAAAA,CAAC7W,KAAK,QAAQ8W,cAAelF,YAC/B4E,EACC,UAACO,EAAAA,EAAGA,CAAAA,CACFjT,GAAG,SACH4B,MAAO,sCAA2D,OAArByP,EAAc3Q,MAAM,CAAC,KAClEpE,QAAS,IAAMyR,EAAe,YAGhC,UAACkF,EAAAA,EAAGA,CAAAA,CACFjT,GAAG,SACH4B,MAAO,WAAyB,OAAdwP,EAAO1Q,MAAM,CAAC,KAChCpE,QAAS,IAAMyR,EAAe,YAGjC2E,GACC,UAACO,EAAAA,EAAGA,CAAAA,CACFjT,GAAG,4BACHkT,SAAsC,IAA5B5B,EAAiB5Q,MAAM,CACjCkB,MAAO,iBAAyC,OAAxB0P,EAAiB5Q,MAAM,CAAC,KAChDpE,QAAS,IAAMyR,EAAe,+BAGlC,UAACkF,EAAAA,EAAGA,CAAAA,CACFjT,GAAG,SACHkT,SAA4B,IAAlB/B,EAAOzQ,MAAM,CACvBkB,MAAO,UAAwB,OAAduP,EAAOzQ,MAAM,EAC9BpE,QAAS,IAAMyR,EAAe,iBAIpC,UAACrS,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,QAAQ,EAAGvG,MAAO,CAAC2X,UAAW,OAAQC,UAAW,OAAO,WAC5D,WAAhBtF,EACC,UAACuF,EAAAA,CAA4BA,CAAAA,CAC3BvQ,MAAOqO,EACPnN,WAAYsP,EAAAA,CAAoBA,CAChCC,WAAW,MAGb,UAACF,EAAAA,CAA4BA,CAAAA,CAC3BvQ,MACEgL,gCACIwD,EACAoB,EACErB,EACAD,EAERpN,WAAYwP,EAAAA,EAAkBA,CAC9BD,WAAW,QAIjB,UAACpJ,EAAAA,EAAYA,CAAAA,CAACC,SAAS,aACrB,UAAC9M,EAAAA,EAAMA,CAAAA,CACLkM,OAAO,UACPlN,QAAS,KACP2U,GAAc,EAChB,WACD,eAKL,UAAC1H,EAAAA,CAAGA,CAAAA,CAAChM,KAAwB,IAAlB6T,EAAO1Q,MAAM,CAAS,QAAU,cAAe8I,OAAQ/H,EAAQ,SAAW,gBACnF,UAACwG,EAAAA,CAAUA,CAAAA,CACT3L,QAAS,KACHmF,EACFuJ,CAAAA,EAAAA,EADS,EACTA,CAAeA,CAAC,CACdpJ,MAAO,eACP9G,KAAM,UAAC0G,EAAAA,EAAeA,CAAAA,CAACC,MAAOA,GAChC,GAEAwP,GAAc,EAElB,EACApC,MAAOpN,EAAQ1E,EAAAA,EAAc,GAAKA,EAAAA,EAAkB,YAEnD0E,EACG,gCACA0Q,EACE,4BACAD,QAKhB,0LChPA,IAAMuB,EAAY,CAChB,CAAC1V,EAAAA,GAAqBA,CAACC,OAAO,CAAC,CAAEjB,EAAAA,EAAkB,GACnD,CAACgB,EAAAA,GAAqBA,CAACE,OAAO,CAAC,CAAElB,EAAAA,EAAgB,GACjD,CAACgB,EAAAA,GAAqBA,CAACG,OAAO,CAAC,CAAEnB,EAAAA,EAAqB,GACtD,CAACgB,EAAAA,GAAqBA,CAACI,OAAO,CAAC,CAAEpB,EAAAA,EAAyB,EAC5D,EAEM2W,EAAgB,CACpB,CAAC3V,EAAAA,GAAqBA,CAACC,OAAO,CAAC,CAAEjB,EAAAA,EAAuB,GACxD,CAACgB,EAAAA,GAAqBA,CAACE,OAAO,CAAC,CAAElB,EAAAA,EAAqB,GACtD,CAACgB,EAAAA,GAAqBA,CAACG,OAAO,CAAC,CAAEnB,EAAAA,EAA0B,GAC3D,CAACgB,EAAAA,GAAqBA,CAACI,OAAO,CAAC,CAAEpB,EAAAA,EAAsB,EACzD,EAQa6I,EAAmB,eAA0D,OACxF9F,CAAK,gBACLtB,CAAc,aACdqH,CAAW,CACXG,cAAY,YACZC,CAAU,WACV4H,EAAY8F,GAAU,MAAD,IACrBC,KAAiB,CACjBC,KADWF,OATE,GAUK,CAUnB,GACO,CAACtM,EAAKyM,EAAO,CAAGnZ,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAASyM,KAAKC,GAAG,IACzC,CAAC0M,EAAUC,EAAU,CAAGrZ,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAU,GAEhDsX,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KACR,GAAI,CAAC8B,GAAY,CAAC9N,EAAY,CAC5B,IAAMgO,EAAWC,YAAY,KAC3BJ,EAAO1M,KAAKC,GAAG,GACjB,EAhCmB,CAgChB8M,IACH,MAAO,IAAMC,cAAcH,EAC7B,CACA,MAAO,KAAO,CAChB,EAAG,CAAChO,EAAY8N,EAAS,EAEzB,IAAMM,EAAOpO,SAAAA,KAAAA,EAAAA,CAAY,CAAC,IAAqB,CAAlCA,GAAkBA,CAAU,CAAC,EAAE,CAAUoB,EAAMwM,EACtDS,EAAOrO,CAAAA,QAAAA,KAAAA,EAAAA,CAAY,CAAC,IAAqB,EAAlCA,EAAkBA,CAAU,CAAC,EAAE,CAAUoB,EAAMwG,EACtD0G,EAAcD,EAAOjN,GAAOA,EAAMgN,EAElCG,EAAYH,EAAOC,EAEnB,UAACG,CAAQ,gBAAEC,CAAc,CAAC,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAWA,GAExCC,EAAgBvL,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IAErBvJ,EAAMqE,MAAM,CAAC,GAAU,CAAC9B,EAAKvB,YAAY,EAAwB,IAApBuB,EAAKvB,YAAY,CAAUwT,GAAMO,OAAO,GAC3F,CAAC/U,EAAOwU,EAAK,EAEVQ,EAAiBzL,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IACtBuL,EAAc1Z,GAAG,CAAC,CAACmH,EAAM0S,iBAC9B,IAAMC,KAAc,IAALC,EAAiBrU,SAAS,CA2NdsU,EA3NiBT,EAAStY,KAAK,GA4NrCyE,CAD2B,EA3NY0T,CA4N3BA,EA5NiCE,CA2NJ,EArNxDW,GAqNEvU,EA1Na+F,CAAAA,CAKRsO,CALQtO,CA0N4D,CA1N5DA,EA0NI,CA1NcA,CAACtE,EAAMuS,EAAclU,MAAM,CAAGqU,EAAI,GACrE1S,EAAKzB,SAAS,CACdyB,EAAKvB,YAAY,CACK,IAApBuB,EAAKvB,YAAY,CACjBuG,IAC0BoN,EAAStY,KAAK,CAsN3C,KAtN6CmY,CAsNfA,EAtNqBE,GACtD,KAqNqB5T,CArNd,CACL,GAAGyB,CAAI,CACPlG,MAAOiZ,KAAKC,GAAG,CAACF,EAAOH,EA5Db,GAAG,GA4DkBM,IAC/BN,CACF,CACF,GAEC,CAACV,EAAMjN,EAAKuN,EAAeJ,CAjES,CAiEEC,EAAStY,KAAK,CAAC,EAGlDoZ,EAAgBC,KADSH,GAAG,CAAC,CAAChB,EAAOC,CAAAA,CAAG,CAAK,GAAIV,GACb,EACpC6B,EAAiBL,KAAKM,IAAI,CAACpB,EAAOiB,GAAiBA,EACnDI,EAAWP,KAAKM,IAAI,CAAC,CAACrB,EAAOoB,CAAAA,CAAa,CAAKF,GAC/CK,EAAYR,KAAKM,IAAI,CAACC,EAAW,GAEjCE,EAAYxM,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KACxB,IAAMvJ,EAAQ,EAAE,CAChB,IAAK,IAAIgW,EAAK,EAAGA,EAAKH,EAAUG,IAAM,SACpC,IAAMC,EAAON,EAAiBK,EAAKP,EACnCzV,EAAM4L,IAAI,CAAC,MACTqK,EACAC,CAAAA,EAAGf,EAAKc,IAAMtB,EAAStY,KAAK,MAAEmY,CAgMCA,CAAG,CAhMEE,GACpCyB,UAAWH,EAAKF,GAAc,CAChC,EACF,CACA,OAAO9V,CACT,EAAG,CAAC6V,EAAUF,EAAgBF,EAAed,EAAStY,KAAK,CAAEmY,EAAME,EAAWoB,EAAU,EAExF,MACE,UAAChZ,MAAAA,CAAIpB,MAAO,CAAC0a,YAAa,KAAK,WAC7B,WAACtZ,MAAAA,CAAK,GAAG8X,CAAc,WACrB,WAACyB,EAAAA,WACEN,EAAU3a,GAAG,CAAC,GACb,WAACkb,EAAAA,CAEC5a,MAAO,CACL6a,UAAW,cAAqB,OAAPhU,EAAK2T,CAAC,CAAC,MAClC,YAEA,UAACM,EAAAA,CAAAA,GACAjU,EAAK4T,SAAS,CACb,UAACM,EAAAA,UACC,UAACjO,EAAAA,EAAOA,CAAAA,UACN,UAACkO,EAAAA,CAASA,CAAAA,CAAC5V,UAAW,CAAC6V,GAAIpU,EAAK0T,IAAI,EAAGlP,WAAY,CAACE,aAAa,CAAI,QAGvE,OAZC1E,EAAK0T,IAAI,GAejBjB,EAAe5Z,GAAG,CAAC,QAIZmH,EAFH7D,EADH,IAAMuL,EACJ,OAACvL,EAAmB,qBAAnBA,CAAyC,CAAE,YAAY6D,EACb,EADgB,KAEvDA,EAAAA,EAAK0D,MAAAA,EAAL1D,KAAAA,EAAAA,EAAa3B,GAAb2B,GAAmB,CADnBA,EAAKgG,WADR7J,uBAC0C,EAD1CA,EAE2B,EAC9B,MACE,UAACkY,EAAAA,CAEClb,MAAO,CACL6a,UAAW,cAA0B,OAAZhU,EAAK2S,MAAM,CAAC,OACrC7Y,MAAO,GAAc,OAAXkG,EAAKlG,KAAK,CAAC,KACvB,EACA6C,OAAQqD,EAAKrD,MAAM,CACnB2X,aAAc,KACZ9Q,EAAYxD,GACZ2R,EAAU,GACZ,EACA4C,aAAc,KACZ/Q,IACAmO,GAAU,EACZ,EACA1X,QAAS,KACP0J,EAAa3D,EACf,WAEA,UAAClF,EAAAA,CAAOA,CAAAA,CAACC,QAAS,UAACyZ,EAAAA,CAAYxU,KAAMA,EAAM7D,eAAgBA,aACzD,UAAC5B,MAAAA,CAAIpB,MAAO,CAACW,MAAOkG,EAAKlG,KAAK,CAAG,KAAM8T,OAAQ,MAAM,WAClDlG,EAAQ,EAAIA,EAAQ,UApBpB1H,EAAKrC,EAAE,CAyBlB,GACCuU,EACC,UAACuC,EAAAA,CACCtb,MAAO,CACL6a,UAAW,cAAyD,OAA3CpB,GAAK5N,IAAKoN,EAAStY,KAAK,MAAEmY,CAgI5BA,EAhIkCE,GAAW,MACtE,IAEA,QAEN,UAACuC,EAAAA,CAAAA,OAIT,EAAE,EAEkBC,CAAAA,EAAAA,EAAAA,IAAAA,CAAIA,CACtB,OAAC,MACC3U,CAAI,gBACJ7D,CAAc,CAIf,GACOQ,EAASqK,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,SAcThH,EAAsCA,SAblD,EAASrD,MAAM,GAAKjB,EAAAA,GAAqBA,CAACE,OAAO,CACxC,CAD0C,mBAG/CoE,EAAKrD,MAAM,GAAKjB,EAAAA,GAAqBA,CAACG,OAAO,CACxC,CAD0C,aAG5B,qBAAnBM,CAAyC,CAAE,UAAU6D,EAOhD,EAPmD,CAOnBmG,EAPuB,IAOvBA,CAA7BnG,CAAAA,OAAAA,EAAAA,EAAK6F,IAAAA,EAAL7F,KAAAA,EAAAA,EAAW3B,GAAX2B,GAAW3B,GAAU,EAAE,QAA2C,OAArC8H,CAAAA,EAAAA,EAAAA,CAAAA,CAAQA,CAAAA,OAACnG,EAAAA,EAAK6F,IAAAA,EAAL7F,KAAAA,EAAAA,EAAW3B,GAAX2B,GAAiB,CAAE,GAAI,KAAK,cANrE,GAA6DmG,MAAAA,CAA1DnG,EAAKgG,kCAAkC,CAAC,oBAIhD,OAJkEG,CAAAA,EAAAA,EAAAA,CAAAA,CAAQA,CAC1EnG,EAAKgG,kCAAkC,CACvC,GACA,KACA,aAIN,EAAG,CAAChG,EAAM7D,EAAe,EAEnByY,EAAYC,IAAM,IAAO7U,EAAKzB,SAAS,EACvCuW,EAAUD,IAAM7U,EAAKvB,YAAY,CAAG,EADnBoW,EAC0B7U,EAAKvB,YAAY,CAAGsG,KAAKC,CAArD6P,EAAwD,IACvEE,EAAcH,EAAUjI,EAAE,CAACmI,GAAS,GAE1C,MACE,WAACva,MAAAA,WACC,UAAC0L,EAAAA,EAAOA,CAAAA,CAAC+O,GAAG,eACV,UAACb,EAAAA,CAASA,CAAAA,CAAC5V,UAAW,CAAC0W,KAAMjV,EAAKzB,SAAS,EAAGiG,WAAY,CAACE,aAAa,CAAI,MAE9E,WAACuB,EAAAA,EAAOA,CAAAA,CAAC+O,GAAG,gBACTrY,EAAO,KAAGoY,EAAY,OAExB/U,EAAKrD,MAAM,GAAKjB,EAAAA,GAAqBA,CAACG,OAAO,CAAG,KAC/C,UAACoK,EAAAA,EAAOA,CAAAA,CAACuG,MAAO9R,EAAAA,EAAgB,YAAI,wBAI5C,GAGIoZ,EAAevN,EAAAA,EAAMA,CAAChM,GAAG,2HAIFG,EAAAA,EAAqB,IAG5Cga,EAAkBnO,EAAAA,EAAMA,CAAChM,GAAG,4DAI5B8Z,EAAO9N,EAAAA,EAAMA,CAAChM,GAAG,uMAWZG,EAAAA,EAAwB,GAC/B,OAAC,QAACiC,CAAM,CAAC,SAAK,qBAGE0U,MAAAA,CAFFD,CAAS,CAACzU,EAAO,CAAC,wCAEM,OAAtB0U,CAAa,CAAC1U,EAAO,CAAC,kBAKpCoX,EAAWxN,EAAAA,EAAMA,CAAChM,GAAG,2GAMrB0Z,EAAe1N,EAAAA,EAAMA,CAAChM,GAAG,6GAKfG,EAAAA,EAAqB,IAE/BwZ,EAAe3N,EAAAA,EAAMA,CAAChM,GAAG,qHAQzBka,EAAelO,EAAAA,EAAMA,CAAChM,GAAG,8NAKfG,EAAAA,EAAoB,GAKlBA,EAAAA,EAAoB,GACzBA,EAAAA,EAAqB,sHCpR3B,SAASwa,IACd,GAAM,CAACC,EAAmB,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAGtCC,EAAAA,EAA6BA,EAEzBC,EAAeC,CAAAA,EAAAA,EAAAA,EAAAA,CAAkBA,GACjCC,EAAUC,CAAAA,EAAAA,EAAAA,EAAAA,CAAUA,GAE1B,MAAOC,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAChB,MAAO7X,EAAgD8X,KACrD,GAAI,KA+Ba,EA9Bf,IAAMtN,EAAsB1J,MAAMiX,OAAO,CAAC/X,EAAUwK,mBAAmB,EACnExK,EAAUwK,mBAAmB,CAC7B,CAACxK,EAAUwK,mBAAmB,CAAC,CAE7BwN,EAAWxN,EAAoBxP,GAAG,CACtC,GAAYid,EAAO9M,QAAQ,CAAC/Q,OAAO,EAAI6d,EAAO9M,QAAQ,CAACtP,YAAY,EAGrE,GACEmc,EAASxX,MAAM,GAAKgK,EAAoBhK,MAAM,EAC9CwX,EAASE,QAAQ,MAACrX,IAClBmX,EAASE,QAAQ,CAAC,MAElB,CADA,KACM,MACJ,wFAIJ,IAAMC,EAAkE,CACtEH,SAAUA,EAAS/T,MAAM,CAAC,QAAmCpD,IAATtD,GACpD6a,iBAAavX,CACf,EAEMwX,EAAY,CAChB,GAAGrY,CAAS,CACZwK,oBAAqB1J,MAAMiX,OAAO,CAAC/X,EAAUwK,mBAAmB,EAC5DxK,EAAUwK,mBAAmB,CAACxP,GAAG,CAACsd,EAAAA,EAAyBA,EAC3DA,CAAAA,EAAAA,EAAAA,EAAAA,CAAyBA,CAACtY,EAAUwK,mBAAmB,CAC7D,EAEM+N,EAAAA,MAAS,UAAOjB,EAAmB,CAACtX,UAAWqY,CAAS,GAAC,CAAG5Y,IAAAA,EAAnD,SAAyD6X,GAAzD,eAA2E,CAU1F,OARIiB,IACFC,CAAAA,EAAAA,CADU,CACVA,EAAAA,CAA0BA,CAACD,EAAQZ,EAAS,UAACG,CAAQ,GACrDL,EACEgB,EAAAA,EAAeA,CAACC,oBAAoB,CACpCP,IAIGI,CACT,CAAE,MAAOhX,EAAO,CACdoX,QAAQpX,KAAK,CAAC,QAASA,GACvBqX,CAAAA,EAAAA,EAAAA,CAAAA,CAAeA,CAACrX,EAClB,CAEF,EACA,CAACoW,EAASL,EAAoBG,EAAa,CAE/C,sLCvEO,IAAMoB,EAAqB,GAAmB,KAAK,oCCFnD,IAAMC,EAAwB,QAC9BX,KAD+B,UAACA,CAAQ,CAAyC,SACtF,IAAI,GAACA,GAAAA,OAAAA,EAAAA,EAAUY,OAAVZ,EAAUY,EAAVZ,KAAAA,EAAAA,EAAqB3X,GAArB2X,GAA2B,EAI9B,UAAC3c,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,SAAUlG,IAAK,CAAC,WACpCwc,EAASY,SAAS,CAAC/d,GAAG,CAAC,GACtB,UAACge,EAAAA,CAASA,CAAAA,CAA0BC,KAAMpW,EAAIoW,IAAI,CAAE5b,KAAK,SAAzCwF,EAAIoW,IAAI,CAACC,IAAI,CAAC,SAL3B,UAAC7Q,OAAAA,CAAAA,EASZ,EAAE,gDCAK,IAAM8Q,EAAoB,OAAC,aAACjf,CAAW,QAAE0S,CAAM,CAAQ,GACtD,CACJwM,YAAa,CAACC,gBAAc,eAAEC,CAAa,CAAC,CAC7C,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,CAAyBA,CAACrf,EAAYsf,QAAQ,EAE5C,MAACjc,CAAI,CAAC,CAAGqP,EACTrC,EAAiB,CACrB,GAAGpL,CAAAA,EAAAA,EAAAA,CAAAA,CAAqBA,CAACjF,EAAY,CACrCqT,WAAYhQ,CACd,EAEM,CAACkc,EAAa,CAACxY,QAASyY,CAAgB,CAAC,CAAC,CAAGnC,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAG5DoC,EAAAA,EAAqBA,CAAE,CACvBC,YAAaC,EAAAA,EACf,GAKMC,EAAgBT,GAAkBC,EAElCS,EAAiBD,EACnB,kCAA4DlN,MAAAA,CAA1BrP,EAAK,uBAA0C,OAArBqP,EAAOoN,aAAa,CAAC,6EACjFC,EAAAA,EAAuBA,CAE3B,MACE,UAAChd,EAAAA,CAAOA,CAAAA,CACNC,QAAS,UAACR,MAAAA,CAAIpB,MAAO,CAACmM,SAAU,QAASyS,UAAW,YAAY,WAAIH,IACpExV,QAAQ,gBAER,UAACnH,EAAAA,EAAMA,CAAAA,CAAC4V,SAVK0G,CAUK1G,EAVe,CAAC8G,EAUN1d,QAfhB,CAeyBA,IAdvCqd,EAAY,CAACzZ,UAAW,gBAACuK,CAAc,CAAC,EAC1C,WAakD,yBAKpD,EAAE,sIC/CK,SAAS4P,EAAyB,CAMxC,KANwC,cACvCC,GAAe,CAAI,UACnBlU,CAAQ,CAIT,CANwC,EAOjCmU,EAAOlR,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KACnB,GAAI,CAACjD,EAAS1F,MAAM,CAClB,CADoB,KACb,EAAE,CAEX,IAAM6Z,EAAyE,EAAE,CAUjF,OATAnU,EAASwE,OAAO,CAAC,OAAC,eAAC3B,CAAa,mBAAEuR,CAAiB,CAAE1R,MAAI,CAAC,SACxDG,GAAAA,EAAe2B,OAAO,CAAC,IACrB2P,EAAK7O,IAAI,CAAC,EADZzC,GAEIlG,EACA0X,IAAKD,OACL1R,CACF,EACF,EACF,GACOyR,CACT,EAAG,CAACnU,EAAS,SAEb,EAAU1F,EAAN,IAAY,CAKd,WAAChF,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,SAAUlG,IAAK,GAAI6e,KAAM,CAAC,YAC9CJ,EACC,WAAC5e,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,MAAOnG,WAAY,SAAUC,IAAK,CAAC,YACxD,UAAC2B,EAAAA,EAAIA,CAAAA,CAACC,KAAK,cACX,UAACiI,EAAAA,EAAUA,CAAAA,UAAC,kCAEZ,KACJ,WAAC7I,EAAAA,CAAKA,CAAAA,CAACrB,MAAO,CAACsB,YAAa,aAAqC,OAAxBC,EAAAA,EAAqB,GAAI,YAChE,UAACE,QAAAA,UACC,WAAC5B,KAAAA,WACC,UAAC6B,KAAAA,UAAG,cACJ,UAACA,KAAAA,UAAG,yBACJ,UAACA,KAAAA,UAAG,0BAGR,UAACnC,QAAAA,UACEwf,EAAKrf,GAAG,CAAC,GAAmBE,QAAlB,KAAC2H,CAAG,KAAE0X,CAAG,MAAE3R,CAAI,CAAC,GACzB,MACE,WAACzN,KAAAA,WACC,UAACE,KAAAA,UAAIwH,IACL,UAACxH,KAAAA,UAAIkf,IACL,UAAClf,KAAAA,UACEuN,IAASvC,EAAAA,GAA4BA,CAACC,cAAc,CACnD,UAAC+C,EAAAA,CAAGA,CAAAA,CAACC,OAAO,mBACV,UAACjB,OAAAA,UAAK,oBAGR,UAACgB,EAAAA,CAAGA,CAAAA,CAACC,OAAO,kBACV,UAACjB,OAAAA,UAAK,2BAVLnN,EAgBb,WAtCC,IA2CX,k6BCHO,IAAMuf,EAAqB,IAChC,GAAM,QAACne,CAAM,SAAEC,CAAO,MAAEgB,CAAI,CAAC,CAAGgG,EAChC,MACE,UAACwG,EAAAA,EAAMA,CAAAA,CACLzN,OAAQA,EACRC,QAASA,EACTjB,MAAO,CAACW,MAAO,OAAQsI,QAAS,MAAM,EACtClH,KAAK,eACLqE,MAAO,2BAAgC,OAALnE,YAElC,UAACmd,EAAAA,CAAc,GAAGnX,CAAK,IAG7B,EAAE,EAEmB,QA0Cc+G,EAsE7BA,KAhHgB,aAACpQ,CAAW,MAAEqD,CAAI,eAAEod,CAAa,SAAEpe,CAAO,SAAEnC,CAAO,CAAQ,GACzEwgB,EAAaC,CAAAA,EAAAA,EAAAA,EAAAA,CAAaA,GAE1B,CAACC,EAAa,CAAGvD,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAChCwD,GAEI,CAACC,EAAkB,CAAGzD,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAGrC0D,EAAAA,CAAmBA,EACf,CAACC,EAAgB,CAAG3D,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAGnC4D,EAAAA,CAAyBA,EACrB,CAACC,EAAgB,CAAG7D,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAGnC8D,EAAAA,EAAkCA,EAE9B,CAACjU,EAAQkU,EAAU,CAAG7gB,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAACkgB,GAE/B,CAACY,EAAYC,EAAc,CAAG/gB,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GACvC,CAACghB,EAAWC,EAAa,CAAGjhB,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAAC,IACrC,CAAC8G,EAAOoa,EAAS,CAAGlhB,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAA6B,MACzD,CAAC6P,EAAqBsR,EAAuB,CACjDnhB,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,CAAqC,MAEzC8P,GAAiCpB,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAC5C,IAAO,EACLoE,WAAYhQ,EACZwN,uBAAwB7Q,EAAYsf,QAAQ,CAC5CxO,eAAgB9Q,EAAYqD,IAAI,CAClC,EACA,CAACrD,EAAaqD,EAAK,EAEfiN,GAAsBrB,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CACjC,IACEmB,GAAuBC,GACnBF,CAAAA,EAAAA,EAAAA,CAAAA,CAA8BA,CAACC,EAAqBC,GAAgBnQ,GACpE,EAAE,CACR,CAACmQ,GAAgBD,EAAqBlQ,EAAQ,EAE1CyhB,SAA2BvR,GAAAA,OAAAA,EAAAA,EAAqBG,gBAAAA,EAArBH,KAAAA,EAAAA,EAAuCwR,GAAvCxR,sBAAgE,CAE3FyR,GAAalE,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAAC,cAQhBU,EAGL9Y,EAVR+b,GAAc,GAOd,IAAM/b,EAAAA,MAAO8Y,GAAAA,CANE,MAAMuC,EAAa,CAChC9a,UAAW,CACTgc,aAAczR,UACdnD,CACF,CACF,IACoB3H,IAAAA,EAAP8Y,KAAAA,EAAAA,EAAauC,GAAbvC,SAAyB,CAClC9Y,EACEA,IADI,KACJA,KAAAA,EAAAA,CAAAA,CAAME,UAAAA,IAAe,wBACvB,CADgD,OAC5CF,EAAAA,EAAKgL,gBAAAA,EAALhL,KAAAA,EAAAA,EAAuB8B,GAAvB9B,EAAuB8B,EAAO,EACvB9B,EAAKgL,gBAAgB,CAAClJ,KAAK,EAEpCqa,EAAuBnc,GAEhBA,OAAAA,EAAAA,KAAAA,EAAAA,EAAME,MAANF,IAAME,IAAe,sBAC9BmL,CADqD,EACrDA,EAAAA,EAAAA,CAAeA,CAAC,CACdpJ,MAAO,mBACP9G,KAAM,kCAAuC,OAAL2C,EAC1C,GAEAoe,EAASlc,GAGXwc,CAAAA,EAAAA,EAAAA,EAAAA,CAAiBA,CAAC,4CAEpBT,GAAc,EAChB,EAAG,CAACV,EAAcvQ,GAAgBnD,EAAQ7J,EAAK,EAEzC2e,GAAqBrE,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAAC,cACtBvN,EAAf,IAAMlD,QAASkD,GAAAA,OAAAA,EAAAA,EAAqBG,gBAAAA,EAArBH,KAAAA,EAAAA,EAAuClD,GAAvCkD,GAA6C,CAC5D,GAAI,CAAClD,EACH,MADW,CAGb,GAAM,MAAC3H,CAAI,CAAC,CAAG,MAAMub,EAAkB,CACrChb,UAAW,gBAACuK,UAAgBnD,CAAM,CACpC,GACA,GAAI3H,OAAAA,EAAAA,KAAAA,EAAAA,EAAM0c,MAAN1c,SAAqB,CAACE,UAAAA,IAAe,SACvC,CADiD,KAC3Cyc,CAAAA,EAAAA,EAAAA,CAAAA,CAAiBA,CAAC,CAAC1S,QAAS,uBAAwBJ,OAAQ,SAAS,QACtE,SAAI7J,EAAAA,KAAAA,EAAAA,EAAM0c,MAAN1c,SAAqB,CAAE,CAChC,IAAM8B,EAAQ9B,EAAK0c,eAAe,OAC5BC,CAAAA,EAAAA,EAAAA,CAAAA,CAAiBA,CAAC,CACtB9S,OAAQ,SACRI,QACE,WAAC2S,EAAAA,CAAKA,CAAAA,CAACxa,UAAU,MAAMya,QAAS,YAC9B,UAAC5f,MAAAA,UAAI,gCACL,UAACqL,EAAAA,CAAUA,CAAAA,CACT4G,MAAO9R,EAAAA,EAAqB,GAC5B0f,UAAU,SACVngB,QAAS,KACP0O,CAAAA,EAAAA,EAAAA,EAAAA,CAAeA,CAAC,CACdpJ,MAAO,eACP9G,KACuB,gBAArB2G,EAAM5B,UAAU,CACd,UAAC2B,EAAAA,EAAeA,CAAAA,CAACC,MAAOA,IAExB,kBAEN,EACF,WACD,iBAKP,EACF,CACF,EAAG,OAAC+I,GAAAA,MAAAA,GAAAA,EAAqBG,gBAAAA,EAArBH,KAAAA,EAAAA,EAAuClD,GAAvCkD,GAA6C,CAAEC,GAAgByQ,EAAkB,EAE/EwB,GAAkCnF,CAAAA,EAAAA,EAAAA,CAAAA,CAAkCA,GAEpEoF,GAAWtT,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IAEG,MAAxB,IAAgCqB,GAAoBhK,MAAM,CAAG,GAC7D,CAACqb,OAAAA,GAAAA,KAAAA,EAAAA,GAA0Brb,MAAAA,GAAU,GAAK,EAE3C,CAACgK,GAAqBqR,GAAyB,EAE5Ca,CAJDb,EAIWhE,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAAC,UAC1B,GAAK4E,CAAD,GAIJ7B,EAAW,IAJI,iBAKfc,GAAa,GAEb,GAAI,QACEG,GAAAA,KAAAA,EAAAA,GAA0Brb,MAAAA,EAAQ,CACpC,MAAMmc,QAAQC,CADZf,EACe,CACfA,GAAyB7gB,GAAG,CAAC,MAAOC,IAC9BA,EAAQ2N,IAAI,GAAKvC,EAAAA,GAA4BA,CAACC,cAAc,CAC9D,CADgE,KAC1DqW,QAAQC,GAAG,CACf,CAAC3hB,EAAQ8N,aAAa,EAAI,IAAI/N,GAAG,CAAC,MAAO6hB,IACvC,MAAM3B,EAAgB,CACpBlb,UAAW,CACT8c,mBAAoB,CAClB9R,eAAgB9Q,EAAYqD,IAAI,CAChCwN,uBAAwB7Q,EAAYsf,QACtC,EACAc,kBAAmBrf,EAAQqf,iBAAiB,cAC5CuC,CACF,CACF,EACF,IAEO5hB,EAAQ8N,aAAa,EAAI9N,EAAQ8N,aAAa,CAACvI,MAAM,EAAE,MAC1D4a,EAAgB,CACpBpb,UAAW,CACT8c,mBAAoB,CAClB9R,eAAgB9Q,EAAYqD,IAAI,CAChCwN,uBAAwB7Q,EAAYsf,QAAQ,EAE9Cc,kBAAmBrf,EAAQqf,iBAAiB,CAC5CvR,cAAe9N,EAAQ8N,aAAa,CAExC,EAEJ,IAGAyB,IACF,MAAMgS,GAAgC,QADf,aACgBhS,EAAmB,EAAG,SAE/D0R,IACF,CAAE,MAAOa,EAAG,CACVpE,QAFsB,KAET,CAACoE,EAChB,CAEArB,GAAa,GACbnf,IACF,EAAG,CACDkgB,GACAvB,EACAE,EACAS,GACArR,GACAgS,GACAjgB,EACA2f,GACAhiB,EACA0gB,EACD,EAEKoC,GAAc7T,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IAC1B,EACS,KAGLmB,GAAuB/I,CAJZ,CAMX,UAACnE,EAAAA,EAAMA,CAAAA,CACLC,KAAM,UAACC,EAAAA,EAAIA,CAAAA,CAACC,KAAK,4BACjBzC,cAAaC,CAAAA,EAAAA,EAAAA,CAAAA,CAAMA,CAAC,aACpBqB,QAAS,KACPwf,EAAuB,MACvBD,EAAS,KACX,WACD,cAKI,KAER,CAACF,EAAWnR,EAAqB/I,EAAM,EAEpC0b,GAAe9T,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KAC3B,GAAIsS,EACF,MAAO,GADM,EACN,KAACjgB,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,MAAOlG,IAAK,CAAC,IAG7C,GAAI2O,GAAuB/I,EAAO,KACZ+I,EAApB,IAAMtQ,QAAcsQ,GAAAA,OAAAA,EAAAA,EAAqBG,gBAAAA,EAArBH,KAAAA,EAAAA,EAAuCtQ,GAAvCsQ,QAAkD,CAChE4S,EAAiBljB,OAAAA,EAAAA,KAAAA,EAAAA,EAAawG,MAAAA,GAAU,EACxC2c,EAAU,CAAC5b,GAA4B,IAAnB2b,SAEtB3b,EAEA,KAFO,GAEP,EAAC/F,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,MAAOlG,IAAK,CAAC,WAClC,UAACyB,EAAAA,EAAMA,CAAAA,CAAChB,QAASG,WAAS,YAGrB4gB,EAEP,OAFgB,EAEhB,EAAC3hB,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,MAAOlG,IAAK,CAAC,YAClC,UAACyB,EAAAA,EAAMA,CAAAA,CAAChB,QAASG,WAAS,UAE1B,UAACU,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,sBAAsBC,UAAU,mBAC/C,UAACC,EAAAA,EAAMA,CAAAA,CACLC,KAAM,UAACC,EAAAA,EAAIA,CAAAA,CAACC,KAAK,iBACjB+L,OAAO,UACPlN,QAAS8f,GACTphB,cAAaC,CAAAA,EAAAA,EAAAA,CAAAA,CAAMA,CAAC,+BAEpB,UAAC2B,MAAAA,UAAI,8BAOX,WAAClB,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,MAAOlG,IAAK,CAAC,YAClC,UAACyB,EAAAA,EAAMA,CAAAA,CAAChB,QAASG,WAAS,UAC1B,UAACU,EAAAA,CAAOA,CAAAA,CACNmgB,QAAS,CAACX,IAAYhB,EACtBve,QAAQ,+DACRC,UAAU,mBAEV,UAACC,EAAAA,EAAMA,CAAAA,CACLC,KAAM,UAACC,EAAAA,EAAIA,CAAAA,CAACC,KAAK,iBACjB+L,OAAO,UACP0J,SAAU,CAACyJ,IAAYhB,EACvBrf,QAASsgB,GACT5hB,cAAaC,CAAAA,EAAAA,EAAAA,CAAAA,CAAMA,CAAC,uBAEpB,UAAC2B,MAAAA,UAAI,8CAMjB,QACA,EAEI,UAFY,EAEXlB,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,MAAOlG,IAAK,CAAC,WAClC,UAACyB,EAAAA,EAAMA,CAAAA,CAAChB,QAASG,WAAS,aAK5B,WAACf,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,MAAOlG,IAAK,CAAC,YAClC,UAACyB,EAAAA,EAAMA,CAAAA,CAAChB,QAASG,WAAS,WAC1B,UAACa,EAAAA,EAAMA,CAAAA,CAAChB,QAAS2f,GAAYzS,OAAO,UAAUxO,cAAaC,CAAAA,EAAAA,EAAAA,CAAAA,CAAMA,CAAC,qBAAa,eAMvF,EAAG,CACD0gB,EACAnR,EACA/I,EACAga,EACAhf,EACA2f,GACAO,GACAC,GACAX,GACD,EAEK7e,GAAUiM,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KACtB,GAAIsS,EACF,MACE,GAFW,EAEX,MAACjgB,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,MAAOlG,IAAK,EAAG6F,eAAgB,SAAU9F,WAAY,QAAQ,YAClF,UAAC0F,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cACjB,UAAC3E,MAAAA,UAAI,sBAIX,GAAI4N,GAAuB/I,EAAO,KACZ+I,EAIlBA,EA8CqBA,EAiCdA,EAAAA,EAnFT,IAAMtQ,QAAcsQ,GAAAA,OAAAA,EAAAA,EAAqBG,gBAAgB,EAArCH,KAAAA,EAAAA,EAAuCtQ,GAAvCsQ,QAAkD,CAChE4S,EAAiBljB,OAAAA,EAAAA,KAAAA,EAAAA,EAAawG,MAAAA,GAAU,EACxC2c,EAAU,CAAC5b,GAA4B,IAAnB2b,EACpBrB,QACJvR,GAAAA,MAAAA,GAAAA,EAAqBG,gBAAAA,EAArBH,KAAAA,EAAAA,EAAuCwR,GAAvCxR,sBAAgE,CAClE,MACE,WAAC9O,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,SAAUlG,IAAK,CAAC,YACrC,WAAC0hB,GAAAA,WACC,WAAC3gB,MAAAA,WACC,UAAC8I,EAAAA,EAAUA,CAAAA,UAAC,WACZ,UAAChK,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAAC+e,KAAM,EAAG9e,WAAY,QAAQ,WACvC,UAACgB,MAAAA,UACE6E,EACC,UAAC8H,EAAAA,CAAGA,CAAAA,CAACC,OAAO,kBAAS,WACnB4T,EACF,WAAC7T,EAAAA,CAAGA,CAAAA,CAACC,OAAO,oBAAW4T,EAAe,mBAEtC,UAAC7T,EAAAA,CAAGA,CAAAA,CAACC,OAAO,mBAAU,mBAK9B,WAAC5M,MAAAA,WACC,UAAC8I,EAAAA,EAAUA,CAAAA,UAAC,sBACZ,UAAC8X,MAAAA,UAAKlW,OAAAA,EAAAA,KAAAA,EAAAA,EAAQ5G,MAAAA,EAAS4G,EAAS,eAGpC,WAAC5L,EAAAA,CAAGA,CAAAA,WACD+F,EACC,UAAC7E,MAAAA,UACC,UAAC4E,EAAAA,EAAeA,CAAAA,CAACC,MAAOA,MAExB,KACH4b,EACC,WAAC3hB,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,SAAUlG,IAAK,CAAC,YACrC,UAAC6J,EAAAA,EAAUA,CAAAA,CAAClK,MAAO,CAACiiB,aAAc,CAAC,WAAG,uBACtC,UAAC7gB,MAAAA,UACC,UAAC8gB,GAAAA,UACC,UAAC/b,EAAAA,CAAaA,CAAAA,CACZpE,KAAK,UACLqE,MAAM,oBACN4K,YACE,iCACE,UAACjE,OAAAA,UAAK,uFAIN,WAACA,OAAAA,WACC,UAACoV,KAAAA,CAAAA,GAAK,eACO,IACZnT,OAAAA,GAAAA,MAAAA,GAAAA,EAAqBG,gBAAAA,EAArBH,KAAAA,EAAAA,EAAuCX,GAAvCW,OAAiD,EAC9C,IAAoD,OAAhDA,EAAoBG,gBAAgB,CAACd,UAAU,CAAC,KACpD,2CAQhB,KACHuT,GAAkBljB,EACjB,WAACwB,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,SAAUlG,IAAK,CAAC,YACrC,WAAC6J,EAAAA,EAAUA,CAAAA,WAAC,mBAAiB0X,EAAe,OAC5C,UAACnjB,EAAAA,CAAeA,CAAAA,CACdC,YAAaA,EACbuD,KAAMA,EACNnD,QAASA,EACTH,OAAO,EACPC,YAAaA,OAGf,KACH2hB,OAAAA,EAAAA,KAAAA,EAAAA,EAA0Brb,MAAAA,EACzB,UAAC9D,MAAAA,CAAIpB,CADNugB,KACa,CAACtZ,UAAW,MAAM,WAC5B,UAAC4X,EAAwBA,CAACjU,SAAU2V,MAEpC,MAFyB1B,EAK/B,WAACuD,GAAAA,WACC,UAAClY,EAAAA,EAAUA,CAAAA,UAAC,0BACZ,UAAC8X,MAAAA,UACEhT,OAAAA,GAAAA,OAAAA,EAAAA,EAAqBG,gBAAAA,EAArBH,CAAAA,OAAAA,EAAAA,EAAAA,MAA6C,EAA7CA,KAAAA,EAAAA,EAA+C9J,GAA/C8J,GAAqD,QAClDA,EAAAA,KAAAA,EAAAA,EAAqBG,gBAAgB,CAACrD,IAAtCkD,EAA4C,CAC5C/I,EACE,QACA,cAKhB,QACIga,EAEA,UAFY,CAEX/f,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,MAAOlG,IAAK,EAAG6F,eAAgB,SAAU9F,WAAY,QAAQ,YAClF,UAAC0F,EAAAA,CAAOA,CAAAA,CAACC,QAAQ,cACjB,UAAC3E,MAAAA,UAAI,yBAKP,WAAClB,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,SAAUlG,IAAK,CAAC,YACrC,UAACe,MAAAA,UAAI,4BACL,UAACihB,EAAAA,EAASA,CAAAA,CACR7V,MAAOV,EACPrF,SAAU,GAAOuZ,EAAUyB,EAAEtQ,MAAM,CAAC3E,KAAK,EACzChN,cAAaC,CAAAA,EAAAA,EAAAA,CAAAA,CAAMA,CAAC,gBACpB6iB,YAAY,yBAEd,UAAClhB,MAAAA,UAAI,wQAKL,WAACA,MAAAA,WACC,UAAC6P,IAAAA,CAAEC,KAAK,yGAAgG,eAEnG,IAAI,qBAMnB,EAAG,CAAClC,EAAqB/I,EAAOga,EAAYE,EAAWle,EAAMnD,EAASF,EAAakN,EAAO,EAE1F,MACE,iCACE,UAAC4C,EAAAA,EAAUA,CAAAA,UACT,UAACtN,MAAAA,CAAIpB,MAAO,CAAC4X,UAAW,OAAO,WAAIhW,OAErC,UAAC+M,EAAAA,EAAYA,CAAAA,CAACC,SAAS,IAAC2T,KAAMb,YAC3BC,OAIT,EAEalC,EAA2BnhB,CAAAA,EAAAA,EAAAA,EAAAA,CAAGA,CAAAA,IA6BvCkkB,EAAAA,CAAoBA,CACpBhkB,EAAAA,CAAqBA,EACvB,GAEW4O,EAAAA,EAAMA,CAAChM,GAAG,4NAIMG,EAAAA,EAAqB,GAC9C2I,EAAAA,EAAUA,EAYRkY,GAAqBhV,EAAAA,EAAMA,CAAChM,GAAG,gMAIjC8I,EAAAA,EAAUA,EAYRgY,GAAiC9U,EAAAA,EAAMA,CAAChM,GAAG,8HAC7CqhB,EAAAA,CAAoBA,ECrkBXC,GAA2B,OAAC,QACvC5W,CAAM,MACN7J,CAAI,aACJrD,CAAW,SACXE,CAAO,YACP6U,CAAU,CACoB,GACxB,CAACgP,EAAoBC,EAAsB,CAAGzjB,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GAE7D,MACE,WAACe,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,MAAOnG,WAAY,SAAUC,IAAK,CAAC,YACxD,UAACsB,EAAAA,CAAOA,CAAAA,CACNmgB,QAASnO,IAAeC,EAAAA,GAAUA,CAACiP,QAAQ,CAC3CjhB,QAAQ,6CACRC,UAAU,mBAEV,UAACC,EAAAA,EAAMA,CAAAA,CACL4V,SAAU/D,IAAeC,EAAAA,GAAUA,CAACiP,QAAQ,CAC5C/hB,QAAS,IAAM8hB,GAAsB,GACrC7gB,KAAM,UAACC,EAAAA,EAAIA,CAAAA,CAACC,KAAK,0BAClB,0BAIH,UAACkd,EAAkBA,CACjBne,OAAQ2hB,EACR1hB,MAFiBke,EAER,IAAMyD,GAAsB,GACrCvD,cAAevT,EACf7J,KAAMA,EACNrD,YAAaA,EACbE,QAASA,MAIjB,EAAE,8DCjBF,IAAMgkB,GAAc,CAACvX,aAAa,EAAMD,aAAc,EAAK,EAW9CgB,GAAwBR,IACnC,GAAIA,GAAUA,EAAOiX,UAAU,CAAC,gBAAiB,CAC/C,IAAMC,EAAYC,KAAKC,KAAK,CAACpX,GAE7B,OADA,OAAOkX,EAAU,OAAD,EAAa,CACtBG,OAAOC,OAAO,CAACJ,GACnBra,MAAM,CAAC,GAAsB,OAAZ0a,CAAI,CAAC,EAAE,EAAyB,IAAZA,CAAI,CAAC,EAAE,EAC5C3jB,GAAG,CAAC,OAAC,CAAC4jB,EAAGC,EAAE,SAAK,GAAQA,MAAAA,CAALD,EAAE,KAAK,OAAFC,KACxB3F,IAAI,CAAC,IACV,CACA,OAAO9R,CACT,EAAE,GAEoC,GAIpC,CAHK0X,IACHA,EAAqB,IAEnBA,CAFuB,CAEF,IAAMA,EAAqB,EAH3B,EAG+B,IACxB,OAAnBA,EAAmB,QAEL,MAAM,CAA7BA,EACM,UAENA,EAR4E,MAQ/CA,EAAqB,KAC7C,CADmD,GACvB,OAAxBA,EAAqB,GAAG,QAEV,OAAO,CAA9BA,EACM,SAENA,EAAqB,OAASA,EAAqB,MAC9C,CADqD,GACvB,OAA1BA,EAAqB,KAAK,UAEhC,IAA+B,OAA3BA,EAAqB,MAAM,SAG3BvP,GAAgB,QAgEN3C,EAAAA,KAhEO,QAC5BA,CAAM,aACN1S,CAAW,cACXmV,CAAY,cACZjB,CAAY,gBACZhD,CAAc,CAOf,GACO,MACJ7N,CAAI,CACJwhB,YAAa,QAACjgB,CAAM,OAAEc,CAAK,CAAC,UAC5BuY,CAAQ,CACT,CAAGvL,EAEE,aACJwM,CAAW,iBACX4F,CAAe,CACf/d,QAASge,CAAkB,CAC5B,CAAG1F,CAAAA,EAAAA,EAAAA,EAAAA,CAAyBA,CAACrf,EAAYsf,QAAQ,EAC5C,uBAAC0F,CAAqB,CAAC,CAAG9F,EAE1B,CAAC+F,EAAiBC,EAAiB,CAAG3kB,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GAC/C8P,EAAiB,CACrBgD,WAAYX,EAAOrP,IAAI,CACvByN,eAAgB9Q,EAAYqD,IAAI,CAChCwN,uBAAwB7Q,EAAYsf,QAAQ,EAGxC6F,EAAazf,EAAMY,MAAM,CAAGZ,CAAK,CAAC,EAAE,CAAG,KACvCwH,EACJwF,EAAOmS,WAAW,CAACO,gBAAgB,EACgB,eAAnD1S,EAAOmS,WAAW,CAACO,gBAAgB,CAAC3f,UAAU,EAC9CiN,EAAOmS,WAAW,CAACO,gBAAgB,CAACC,UAAU,CAE1CC,EAAU1gB,IAAW2gB,EAAAA,GAAiBA,CAACC,OAAO,CAEpD,MACE,iCACE,UAACC,EAAAA,CAAUA,CAAAA,CACTje,MACE,WAACke,EAAAA,EAASA,CAAAA,CAACtkB,MAAO,CAACiJ,QAAS,OAAQsb,cAAe,MAAOlkB,IAAK,CAAC,YAC9D,UAACwW,EAAAA,EAAIA,CAAAA,CAACrD,GAAG,uBAAc,eACvB,UAACzG,OAAAA,UAAK,MACL9K,KAGLF,KAAK,UACLZ,KACE,WAAC4M,EAAAA,CAAGA,CAAAA,CAAChM,KAAK,oBAAU,aACR,UAACyiB,GAAAA,CAAcA,CAAAA,CAAC5lB,YAAaA,OAG3C6lB,MACE,WAACvkB,EAAAA,CAAGA,CAAAA,CAACkT,OAAQ,CAACpJ,IAAK,CAAC,EAAG7J,KAAM,CAACoG,UAAW,MAAOnG,WAAY,SAAUC,IAAK,CAAC,YAC1E,UAACqkB,GAAAA,EAAqBA,CAAAA,CAAC5R,aAAcA,IACrC,UAAC4P,GAAwBA,CACvB5W,OAAQA,GAAU,GAClB7J,KAAMqP,EAFiBoR,IAEN,CACjB9jB,YAAaA,EACbE,QAASwS,OAAAA,GAAAA,EAAO4D,OAAAA,GAAP5D,OAAAA,EAAAA,CAAgB,CAAhBA,EAAiB,EAAjBA,KAAAA,EAAAA,EAAqB/Q,GAArB+Q,SAAiC,GAAI,GAC9CqC,WAAYrC,EAAOqC,UAAU,QAKrC,UAACgR,EAAAA,EAAgBA,CAAAA,UACf,WAACplB,QAAAA,WACE+R,EAAON,WAAW,CACjB,WAACnR,KAAAA,WACC,UAACE,KAAAA,UAAG,gBACJ,UAACA,KAAAA,UAAIuR,EAAON,WAAW,MAEvB,KACJ,WAACnR,KAAAA,WACC,UAACE,KAAAA,UAAG,gBACJ,UAACA,KAAAA,UACEgkB,EACC,+BACE,WAAC7jB,EAAAA,CAAGA,CAAAA,CACFC,KAAM,CAACoG,UAAW,MAAOlG,IAAK,EAAGD,WAAY,QAAQ,EACrDJ,MAAO,CAACiH,UAAW,MAAM,YAEzB,UAACmE,GAAAA,CAAgBA,CAAAA,CAAChG,UAAW2e,EAAW3e,SAAS,CAAEiG,WAAYyX,KAC/D,UAACtX,GAAAA,CAAaA,CAAAA,CAAC3E,KAAMkd,EAAY/gB,eAAe,cAIpD,4BAILsO,EAAOsT,QAAQ,EAAI7Q,GAAgBmQ,GAClC,WAACrkB,KAAAA,WACC,UAACE,KAAAA,UAAG,cACJ,UAACA,KAAAA,UACC,UAACqL,GAAAA,CAAgBA,CAAAA,CAAChG,UAAWkM,EAAOsT,QAAQ,CAACxf,SAAS,CAAGiG,WAAYyX,UAIzExR,EAAO4D,OAAO,EAAI5D,EAAO4D,OAAO,CAAChQ,MAAM,EAAK4K,EAC5C,WAACjQ,KAAAA,WACC,UAACE,KAAAA,UAAG,WACJ,UAAC8kB,GAAAA,UACC,UAAC7P,GAAAA,CAAoBA,CAAAA,CACnBE,QAAS5D,EAAO4D,OAAO,CACvBtW,YAAaA,EACbkR,eAAgBA,GAAkB,KAClCmF,eAAgB3D,EAAOqC,UAAU,QAIrC,KACJ,WAAC9T,KAAAA,WACC,UAACE,KAAAA,UACC,UAACG,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,WAAY,QAAQ,EAAGJ,MAAO,CAACyU,OAAQ,MAAM,WAAG,cAI9D,UAAC1U,KAAAA,UACC,WAACG,EAAAA,CAAGA,CAAAA,CACFC,KAAM,CAACoG,UAAW,MAAOlG,IAAK,GAAID,WAAY,QAAQ,EACtDJ,MAAO,CAACyU,OAAQ,MAAM,YAEtB,UAACqQ,EAAAA,CAAYA,CAAAA,CAAClmB,YAAaA,EAAa0S,OAAQA,IAC/CA,EAAOyT,QAAQ,EAAI,UAAClH,EAAiBA,CAACjf,YAAaA,EAAdif,OAAmCvM,YAI/E,WAACzR,KAAAA,WACC,UAACE,KAAAA,UAAG,cACJ,UAACA,KAAAA,UAAIilB,GAAuB1T,EAAOkS,kBAAkB,OAEtD3G,EAASY,SAAS,EAAIZ,EAASY,SAAS,CAACvY,MAAM,CAC9C,WAACrF,KAAAA,WACC,UAACE,KAAAA,UAAG,qBACJ,UAACA,KAAAA,UACC,UAACyd,EAAqBA,CAACX,SAAUA,SAAXW,KAI3BlM,EAAOqC,UAAU,GAAKC,EAAAA,GAAUA,CAACC,gBAAgB,EAClDvC,EAAOqC,UAAU,GAAKC,EAAAA,GAAUA,CAACE,UAAU,CACzC,WAACjU,KAAAA,WACC,UAACE,KAAAA,UACC,UAACG,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACC,WAAY,QAAQ,EAAGJ,MAAO,CAACyU,OAAQ,MAAM,WAAG,aAI9D,WAAC1U,KAAAA,WACC,WAACG,EAAAA,CAAGA,CAAAA,CAACC,KAAM,CAACoG,UAAW,MAAOlG,IAAK,GAAID,WAAY,QAAQ,YACzD,UAAC2M,OAAAA,CAAK/M,MAAO,CAAC+L,WAAYC,EAAAA,CAAUA,CAACC,SAAS,CAAEC,SAAU,MAAM,WAC7DJ,EAASQ,GAAqBR,GAAU,SAE3C,UAACnK,EAAAA,CAAOA,CAAAA,CACNmgB,QAAS,CAAC8B,EACVhiB,QAAS8hB,EAAgBE,qBAAqB,UAE9C,UAAC9hB,EAAAA,EAAMA,CAAAA,CACLC,KAAM,UAACC,EAAAA,EAAIA,CAAAA,CAACC,KAAK,SACjByV,SAAU,CAACkM,GAAyBD,EACpC7iB,QAAS,IAAMgjB,GAAiB,YAE/BhY,IAAWQ,GAAqBR,GAAU,kBAAoB,cAIrE,UAACmZ,EAAAA,CAAgBA,CAAAA,CACfjkB,OAAQ6iB,EACR5U,eAAgBA,EAChBnD,OAAQA,GAAkB,GAC1B7K,GADiB6K,KACR,IAAMgY,GAAiB,WAIpC,KACJ,UAACvG,EAAkBA,CAAC3e,YAAaA,EAAaqT,CAA3BsL,UAAuCtb,WAKpE,EAAE,GAEiBmL,EAAAA,EAAMA,CAACrN,EAAE,iXCtQrB,IAAMyiB,EAAuBlkB,CAAAA,EAAAA,SAAAA,EAAAA,CAAGA,CAAAA","sources":["webpack://_N_E/../ui-core/src/schedules/ScheduleAssetSelectionsQuery.tsx","webpack://_N_E/../ui-core/src/ticks/DryRunRequestTable.tsx","webpack://_N_E/../ui-core/src/instigation/TickHistory.tsx","webpack://_N_E/../ui-core/src/instigation/util.ts","webpack://_N_E/../ui-core/src/ticks/TickStatusTag.tsx","webpack://_N_E/../ui-core/src/automation/AutomationAssetSelectionFragment.tsx","webpack://_N_E/../ui-core/src/util/buildExecutionParamsList.ts","webpack://_N_E/../ui-core/src/sensors/SensorFragment.tsx","webpack://_N_E/../ui-core/src/sensors/SensorInfo.tsx","webpack://_N_E/../ui-core/src/sensors/SensorPreviousRuns.tsx","webpack://_N_E/../ui-core/src/sensors/SensorRoot.tsx","webpack://_N_E/../ui-core/src/ticks/TickLogDialog.tsx","webpack://_N_E/../ui-components/src/components/Page.tsx","webpack://_N_E/../ui-core/src/automation/AutomationTargetList.tsx","webpack://_N_E/../ui-core/src/instigation/LiveTickTimeline2.tsx","webpack://_N_E/../ui-core/src/launchpad/useLaunchMultipleRunsWithTelemetry.ts","webpack://_N_E/../ui-core/src/sensors/SensorAlertDetails.oss.tsx","webpack://_N_E/../ui-core/src/sensors/SensorMonitoredAssets.tsx","webpack://_N_E/../ui-core/src/sensors/SensorResetButton.tsx","webpack://_N_E/../ui-core/src/ticks/DynamicPartitionRequests.tsx","webpack://_N_E/../ui-core/src/ticks/SensorDryRunDialog.tsx","webpack://_N_E/../ui-core/src/ticks/EvaluateTickButtonSensor.tsx","webpack://_N_E/../ui-core/src/sensors/SensorDetails.tsx","webpack://_N_E/../ui-core/src/ticks/RunRequestFragment.tsx"],"sourcesContent":["import {gql} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {AUTOMATION_ASSET_SELECTION_FRAGMENT} from '../automation/AutomationAssetSelectionFragment';\n\nexport const SCHEDULE_ASSET_SELECTIONS_QUERY = gql`\n  query ScheduleAssetSelectionQuery($scheduleSelector: ScheduleSelector!) {\n    scheduleOrError(scheduleSelector: $scheduleSelector) {\n      ... on Schedule {\n        id\n        assetSelection {\n          ...AutomationAssetSelectionFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${AUTOMATION_ASSET_SELECTION_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Button, Colors, Icon, Table, Tooltip} from '@dagster-io/ui-components';\nimport {useState} from 'react';\n\nimport {RunConfigDialog} from '../runs/RunConfigDialog';\nimport {RunRequestFragment} from './types/RunRequestFragment.types';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {testId} from '../testing/testId';\nimport {useRepository} from '../workspace/WorkspaceContext/util';\nimport {RepoAddress} from '../workspace/types';\n\ntype Props = {\n  name: string;\n  runRequests: RunRequestFragment[];\n  repoAddress: RepoAddress;\n  isJob: boolean;\n  jobName: string;\n  mode?: string;\n};\n\nexport const RunRequestTable = ({runRequests, isJob, repoAddress, mode, jobName}: Props) => {\n  const repo = useRepository(repoAddress);\n  const [selectedRequest, setSelectedRequest] = useState<RunRequestFragment | null>(null);\n  const [visibleDialog, setVisibleDialog] = useState<'config' | null>(null);\n\n  const body = (\n    <tbody data-testid={testId('table-body')}>\n      {runRequests.map((request, index) => {\n        return (\n          <tr key={index} data-testid={testId(request.runKey || '')}>\n            <td style={{verticalAlign: 'middle'}}>\n              <Box flex={{alignItems: 'center', gap: 8}}>\n                <PipelineReference\n                  pipelineName={request.jobName ?? jobName}\n                  pipelineHrefContext={repoAddress}\n                  isJob={!!repo && isJob}\n                  showIcon\n                  size=\"small\"\n                />\n              </Box>\n            </td>\n            <td style={{width: '7.5%', verticalAlign: 'middle', textAlign: 'center'}}>\n              <PreviewButton\n                request={request}\n                onClick={() => {\n                  setSelectedRequest(request);\n                  setVisibleDialog('config');\n                }}\n              />\n            </td>\n          </tr>\n        );\n      })}\n      {selectedRequest && (\n        <RunConfigDialog\n          isOpen={visibleDialog === 'config'}\n          onClose={() => setVisibleDialog(null)}\n          mode={mode || null}\n          runConfigYaml={selectedRequest.runConfigYaml}\n          tags={selectedRequest.tags}\n          isJob={isJob}\n          jobName={jobName}\n          request={selectedRequest}\n          repoAddress={repoAddress}\n        />\n      )}\n    </tbody>\n  );\n  return (\n    <div>\n      <Table style={{borderRight: `1px solid ${Colors.keylineDefault()}`, tableLayout: 'fixed'}}>\n        <thead>\n          <tr>\n            <th>Target</th>\n            <th style={{width: '7.5%'}}>Actions</th>\n          </tr>\n        </thead>\n        {body}\n      </Table>\n    </div>\n  );\n};\n\nfunction PreviewButton({request, onClick}: {request: RunRequestFragment; onClick: () => void}) {\n  return (\n    <Tooltip content=\"Preview run config and tags\" placement=\"left-start\">\n      <Button\n        icon={<Icon name=\"data_object\" />}\n        onClick={onClick}\n        data-testid={testId(`preview-${request.runKey || ''}`)}\n      />\n    </Tooltip>\n  );\n}\n","import 'chartjs-adapter-date-fns';\n\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Caption,\n  CursorHistoryControls,\n  FontFamily,\n  Icon,\n  Menu,\n  MenuItem,\n  MiddleTruncate,\n  NonIdealState,\n  Select,\n  Spinner,\n  Subheading,\n  Table,\n  ifPlural,\n} from '@dagster-io/ui-components';\nimport {Chart} from 'chart.js';\nimport zoomPlugin from 'chartjs-plugin-zoom';\nimport * as React from 'react';\nimport {useState} from 'react';\nimport styled from 'styled-components';\n\nimport {TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {HISTORY_TICK_FRAGMENT, RUN_STATUS_FRAGMENT, RunStatusLink} from './InstigationUtils';\nimport {LiveTickTimeline} from './LiveTickTimeline2';\nimport {TickDetailsDialog} from './TickDetailsDialog';\nimport {HistoryTickFragment} from './types/InstigationUtils.types';\nimport {TickHistoryQuery, TickHistoryQueryVariables} from './types/TickHistory.types';\nimport {countPartitionsAddedOrDeleted, isStuckStartedTick} from './util';\nimport {gql, useQuery} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {\n  DynamicPartitionsRequestType,\n  InstigationSelector,\n  InstigationTickStatus,\n  InstigationType,\n} from '../graphql/types';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {TimeElapsed} from '../runs/TimeElapsed';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {humanizeSensorCursor} from '../sensors/SensorDetails';\nimport {TickLogDialog} from '../ticks/TickLogDialog';\nimport {TickResultType, TickStatusTag} from '../ticks/TickStatusTag';\nimport {CopyIconButton} from '../ui/CopyButton';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nChart.register(zoomPlugin);\n\ntype InstigationTick = HistoryTickFragment;\n\nconst PAGE_SIZE = 25;\n\nenum TickStatusDisplay {\n  ALL = 'all',\n  FAILED = 'failed',\n  SUCCESS = 'success',\n}\n\nconst STATUS_DISPLAY_MAP = {\n  [TickStatusDisplay.ALL]: [\n    InstigationTickStatus.SUCCESS,\n    InstigationTickStatus.FAILURE,\n    InstigationTickStatus.STARTED,\n    InstigationTickStatus.SKIPPED,\n  ],\n  [TickStatusDisplay.FAILED]: [InstigationTickStatus.FAILURE],\n  [TickStatusDisplay.SUCCESS]: [InstigationTickStatus.SUCCESS],\n};\n\nexport const TicksTable = ({\n  name,\n  repoAddress,\n  tabs,\n  tickResultType,\n  setTimerange,\n  setParentStatuses,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  tickResultType: TickResultType;\n  tabs?: React.ReactElement;\n  setTimerange?: (range?: [number, number]) => void;\n  setParentStatuses?: (statuses?: InstigationTickStatus[]) => void;\n}) => {\n  const [tickStatus, setTickStatus] = useQueryPersistedState<TickStatusDisplay>({\n    queryKey: 'status',\n    defaults: {status: TickStatusDisplay.ALL},\n  });\n\n  const [showDetailsForTick, setShowDetailsForTick] = useState<HistoryTickFragment | null>(null);\n  const [showLogsForTick, setShowLogsForTick] = useState<HistoryTickFragment | null>(null);\n\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const statuses = React.useMemo(\n    () => STATUS_DISPLAY_MAP[tickStatus] || STATUS_DISPLAY_MAP[TickStatusDisplay.ALL],\n    [tickStatus],\n  );\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    TickHistoryQuery,\n    TickHistoryQueryVariables\n  >({\n    nextCursorForResult: (data) => {\n      if (data.instigationStateOrError.__typename !== 'InstigationState') {\n        return undefined;\n      }\n      return data.instigationStateOrError.ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data || data.instigationStateOrError.__typename !== 'InstigationState') {\n        return [];\n      }\n      return data.instigationStateOrError.ticks;\n    },\n    variables: {\n      instigationSelector,\n      statuses,\n    },\n    query: TICK_HISTORY_QUERY,\n    pageSize: PAGE_SIZE,\n  });\n\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const state = queryResult?.data?.instigationStateOrError;\n  const ticks = React.useMemo(\n    () => (state?.__typename === 'InstigationState' ? state.ticks : []),\n    [state],\n  );\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      if (ticks && ticks.length) {\n        const start = ticks[ticks.length - 1]?.timestamp;\n        const end = ticks[0]?.endTimestamp;\n        if (start && end) {\n          setTimerange?.([start, end]);\n        }\n      }\n    } else {\n      setTimerange?.(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, ticks, setTimerange]);\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      setParentStatuses?.(Array.from(statuses));\n    } else {\n      setParentStatuses?.(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, setParentStatuses, statuses]);\n\n  React.useEffect(() => {\n    if (paginationProps.hasPrevCursor && !ticks.length && !queryResult.loading) {\n      paginationProps.reset();\n    }\n    // paginationProps.reset isn't memoized\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ticks, queryResult.loading, paginationProps.hasPrevCursor]);\n\n  const {data} = queryResult;\n\n  if (!data) {\n    return (\n      <Box padding={{vertical: 48}}>\n        <Spinner purpose=\"page\" />\n      </Box>\n    );\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n\n  if (data.instigationStateOrError.__typename === 'InstigationStateNotFoundError') {\n    return (\n      <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n        <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n      </Box>\n    );\n  }\n\n  const {instigationType} = data.instigationStateOrError;\n\n  if (!ticks.length && tickStatus === TickStatusDisplay.ALL) {\n    return null;\n  }\n\n  return (\n    <>\n      <Box padding={{vertical: 12, horizontal: 24}}>\n        <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'center'}}>\n          {tabs}\n          <Box flex={{direction: 'row', gap: 16}}>\n            <StatusFilter status={tickStatus} onChange={setTickStatus} />\n          </Box>\n        </Box>\n      </Box>\n      {ticks.length ? (\n        <TableWrapper>\n          <thead>\n            <tr>\n              <th style={{width: 120}}>Timestamp</th>\n              <th style={{width: 90}}>Status</th>\n              <th style={{width: 90}}>Duration</th>\n              {instigationType === InstigationType.SENSOR ? (\n                <th style={{width: 120}}>Cursor</th>\n              ) : null}\n              <th style={{width: 180}}>Result</th>\n              <th style={{width: 80}}>Logs</th>\n            </tr>\n          </thead>\n          <tbody>\n            {ticks.map((tick, index) => (\n              <TickRow\n                key={tick.id}\n                tick={tick}\n                tickResultType={tickResultType}\n                instigationSelector={instigationSelector}\n                index={index}\n                onShowDetails={setShowDetailsForTick}\n                onShowLogs={setShowLogsForTick}\n              />\n            ))}\n          </tbody>\n        </TableWrapper>\n      ) : (\n        <Box padding={{vertical: 32}} flex={{justifyContent: 'center'}}>\n          <NonIdealState icon=\"no-results\" title=\"No ticks to display\" />\n        </Box>\n      )}\n      {ticks.length > 0 ? (\n        <div style={{marginTop: '16px'}}>\n          <CursorHistoryControls {...paginationProps} />\n        </div>\n      ) : null}\n      <TickDetailsDialog\n        isOpen={!!showDetailsForTick}\n        tickId={showDetailsForTick?.tickId}\n        tickResultType={tickResultType}\n        instigationSelector={instigationSelector}\n        onClose={() => setShowDetailsForTick(null)}\n      />\n      <TickLogDialog\n        isOpen={!!showLogsForTick}\n        tickId={showLogsForTick?.tickId ?? null}\n        timestamp={showLogsForTick?.timestamp}\n        instigationSelector={instigationSelector}\n        onClose={() => setShowLogsForTick(null)}\n      />\n    </>\n  );\n};\n\nconst StatusFilter = ({\n  status,\n  onChange,\n}: {\n  status: TickStatusDisplay;\n  onChange: (value: TickStatusDisplay) => void;\n}) => {\n  const items = [\n    {key: TickStatusDisplay.ALL, label: 'All ticks'},\n    {key: TickStatusDisplay.SUCCESS, label: 'Requested'},\n    {key: TickStatusDisplay.FAILED, label: 'Failed'},\n  ];\n  const activeItem = items.find(({key}) => key === status);\n  return (\n    <Select<(typeof items)[0]>\n      popoverProps={{position: 'bottom-right'}}\n      filterable={false}\n      activeItem={activeItem}\n      items={items}\n      itemRenderer={(item, props) => {\n        return (\n          <MenuItem\n            active={props.modifiers.active}\n            onClick={props.handleClick}\n            key={item.key}\n            text={item.label}\n            style={{width: '300px'}}\n          />\n        );\n      }}\n      itemListRenderer={({renderItem, filteredItems}) => {\n        const renderedItems = filteredItems.map(renderItem).filter(Boolean);\n        return <Menu>{renderedItems}</Menu>;\n      }}\n      onItemSelect={(item) => onChange(item.key)}\n    >\n      <Button\n        rightIcon={<Icon name=\"arrow_drop_down\" />}\n        style={{minWidth: '200px', display: 'flex', justifyContent: 'space-between'}}\n      >\n        {activeItem?.label}\n      </Button>\n    </Select>\n  );\n};\n\nexport const TickHistoryTimeline = ({\n  name,\n  repoAddress,\n  tickResultType,\n  onHighlightRunIds,\n  beforeTimestamp,\n  afterTimestamp,\n  statuses,\n}: {\n  name: string;\n  repoAddress: RepoAddress;\n  onHighlightRunIds?: (runIds: string[]) => void;\n  beforeTimestamp?: number;\n  afterTimestamp?: number;\n  statuses?: InstigationTickStatus[];\n  tickResultType: TickResultType;\n}) => {\n  const [selectedTickId, setSelectedTickId] = useQueryPersistedState<string | undefined>({\n    encode: (tickId) => ({tickId}),\n    decode: (qs) => (typeof qs.tickId === 'string' ? qs.tickId : undefined),\n  });\n\n  const [pollingPaused, pausePolling] = React.useState<boolean>(false);\n\n  const instigationSelector = {...repoAddressToSelector(repoAddress), name};\n  const queryResult = useQuery<TickHistoryQuery, TickHistoryQueryVariables>(TICK_HISTORY_QUERY, {\n    variables: {\n      instigationSelector,\n      beforeTimestamp,\n      afterTimestamp,\n      statuses,\n      limit: beforeTimestamp ? undefined : 15,\n    },\n    notifyOnNetworkStatusChange: true,\n  });\n\n  useQueryRefreshAtInterval(\n    queryResult,\n    1000,\n    !(pollingPaused || (beforeTimestamp && afterTimestamp)),\n  );\n  const {data, error} = queryResult;\n\n  if (!data || error) {\n    return (\n      <>\n        <Box padding={{top: 16, horizontal: 24}} border=\"bottom\">\n          <Subheading>Recent ticks</Subheading>\n        </Box>\n        <Box padding={{vertical: 64}}>\n          <Spinner purpose=\"section\" />\n        </Box>\n      </>\n    );\n  }\n\n  if (data.instigationStateOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={data.instigationStateOrError} />;\n  }\n  if (data.instigationStateOrError.__typename === 'InstigationStateNotFoundError') {\n    return null;\n  }\n\n  // Set it equal to an empty array in case of a weird error\n  // https://elementl-workspace.slack.com/archives/C03CCE471E0/p1693237968395179?thread_ts=1693233109.602669&cid=C03CCE471E0\n  const {ticks = []} = data.instigationStateOrError;\n\n  const onTickClick = (tick?: InstigationTick) => {\n    setSelectedTickId(tick ? tick.tickId : undefined);\n  };\n\n  const onTickHover = (tick?: InstigationTick) => {\n    if (!tick) {\n      pausePolling(false);\n    }\n    if (tick?.runIds) {\n      if (onHighlightRunIds) {\n        onHighlightRunIds(tick.runIds);\n      }\n      pausePolling(true);\n    }\n  };\n\n  return (\n    <>\n      <TickDetailsDialog\n        isOpen={!!selectedTickId}\n        tickId={selectedTickId}\n        tickResultType={tickResultType}\n        instigationSelector={instigationSelector}\n        onClose={() => onTickClick(undefined)}\n      />\n      <Box padding={{vertical: 16, horizontal: 24}}>\n        <Subheading>Recent ticks</Subheading>\n      </Box>\n      <Box border=\"top\">\n        <LiveTickTimeline\n          ticks={ticks}\n          tickResultType={tickResultType}\n          onHoverTick={onTickHover}\n          onSelectTick={onTickClick}\n          exactRange={\n            beforeTimestamp && afterTimestamp ? [afterTimestamp, beforeTimestamp] : undefined\n          }\n        />\n      </Box>\n    </>\n  );\n};\n\nfunction TickRow({\n  tick,\n  tickResultType,\n  index,\n  onShowDetails,\n  onShowLogs,\n}: {\n  tick: HistoryTickFragment;\n  tickResultType: TickResultType;\n  instigationSelector: InstigationSelector;\n  index: number;\n  onShowDetails: (tick: HistoryTickFragment) => void;\n  onShowLogs: (tick: HistoryTickFragment) => void;\n}) {\n  const [addedPartitions, deletedPartitions] = React.useMemo(() => {\n    const requests = tick.dynamicPartitionsRequestResults;\n    const added = countPartitionsAddedOrDeleted(\n      requests,\n      DynamicPartitionsRequestType.ADD_PARTITIONS,\n    );\n    const deleted = countPartitionsAddedOrDeleted(\n      requests,\n      DynamicPartitionsRequestType.DELETE_PARTITIONS,\n    );\n    return [added, deleted];\n  }, [tick?.dynamicPartitionsRequestResults]);\n\n  const isStuckStarted = isStuckStartedTick(tick, index);\n\n  return (\n    <tr>\n      <td>\n        <TimestampDisplay\n          timestamp={tick.timestamp}\n          timeFormat={{showTimezone: false, showSeconds: true}}\n        />\n      </td>\n      <td>\n        <TickStatusTag\n          tick={tick}\n          tickResultType={tickResultType}\n          isStuckStarted={isStuckStarted}\n        />\n      </td>\n      <td>\n        {isStuckStarted ? (\n          '- '\n        ) : (\n          <TimeElapsed\n            startUnix={tick.timestamp}\n            endUnix={tick.endTimestamp || Date.now() / 1000}\n          />\n        )}\n      </td>\n      {tick.instigationType === InstigationType.SENSOR ? (\n        <td>\n          {tick.cursor ? (\n            <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n              <div\n                style={{\n                  fontFamily: FontFamily.monospace,\n                  fontSize: '14px',\n                  maxWidth: '400px',\n                  overflow: 'hidden',\n                }}\n              >\n                <MiddleTruncate text={humanizeSensorCursor(tick.cursor) || ''} />\n              </div>\n              <CopyIconButton value={tick.cursor || ''} />\n            </Box>\n          ) : (\n            <>&mdash;</>\n          )}\n        </td>\n      ) : null}\n      <td>\n        <Box flex={{direction: 'column', gap: 6}}>\n          {tickResultType === 'runs' ? (\n            <Box flex={{alignItems: 'center', gap: 8}}>\n              <ButtonLink onClick={() => onShowDetails(tick)}>\n                {tick.runIds.length === 1\n                  ? '1 run requested'\n                  : `${tick.runIds.length} runs requested`}\n              </ButtonLink>\n              {tick.runs.length === 1\n                ? tick.runs.map((run) => (\n                    <React.Fragment key={run.id}>\n                      <RunStatusLink run={run} />\n                    </React.Fragment>\n                  ))\n                : null}\n            </Box>\n          ) : (\n            <Box flex={{alignItems: 'center', gap: 8}}>\n              <ButtonLink onClick={() => onShowDetails(tick)}>\n                {tick.requestedAssetMaterializationCount === 1\n                  ? '1 materialization requested'\n                  : `${tick.requestedAssetMaterializationCount} materializations requested`}\n              </ButtonLink>\n            </Box>\n          )}\n          {addedPartitions || deletedPartitions ? (\n            <Caption>\n              (\n              {addedPartitions ? (\n                <span>\n                  {addedPartitions} partition{ifPlural(addedPartitions, '', 's')} created\n                  {deletedPartitions ? ',' : ''}\n                </span>\n              ) : null}\n              {deletedPartitions ? (\n                <span>\n                  {deletedPartitions} partition{ifPlural(deletedPartitions, '', 's')} deleted,\n                </span>\n              ) : null}\n              )\n            </Caption>\n          ) : null}\n        </Box>\n      </td>\n      <td>\n        <Button onClick={() => onShowLogs(tick)}>View logs</Button>\n      </td>\n    </tr>\n  );\n}\n\nconst TICK_HISTORY_QUERY = gql`\n  query TickHistoryQuery(\n    $instigationSelector: InstigationSelector!\n    $dayRange: Int\n    $limit: Int\n    $cursor: String\n    $statuses: [InstigationTickStatus!]\n    $beforeTimestamp: Float\n    $afterTimestamp: Float\n  ) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        instigationType\n        ticks(\n          dayRange: $dayRange\n          limit: $limit\n          cursor: $cursor\n          statuses: $statuses\n          beforeTimestamp: $beforeTimestamp\n          afterTimestamp: $afterTimestamp\n        ) {\n          id\n          ...HistoryTick\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${RUN_STATUS_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n  ${HISTORY_TICK_FRAGMENT}\n`;\n\nconst TableWrapper = styled(Table)`\n  th,\n  td {\n    vertical-align: middle !important;\n  }\n`;\n","import {\n  DynamicPartitionsRequestResult,\n  DynamicPartitionsRequestType,\n  InstigationTick,\n  InstigationTickStatus,\n} from '../graphql/types';\n\nconst TRUNCATION_THRESHOLD = 100;\nconst TRUNCATION_BUFFER = 5;\n\nconst THREE_DAYS = 60 * 60 * 24 * 3;\n\nexport const truncate = (str: string) =>\n  str.length > TRUNCATION_THRESHOLD\n    ? `${str.slice(0, TRUNCATION_THRESHOLD - TRUNCATION_BUFFER)}…`\n    : str;\n\nexport function isStuckStartedTick(\n  tick: Pick<InstigationTick, 'timestamp' | 'endTimestamp' | 'status'>,\n  index: number,\n) {\n  return (\n    !tick.endTimestamp &&\n    // If the index is 0 and the tick does have an end timestamp then we can't know if its actually stuck or still in progress\n    // but if its older than three days then its very likely stuck\n    ((index !== 0 && tick.status === InstigationTickStatus.STARTED) ||\n      tick.timestamp * 1000 < Date.now() - THREE_DAYS)\n  );\n}\n\nexport function countPartitionsAddedOrDeleted(\n  requests: Pick<DynamicPartitionsRequestResult, 'partitionKeys' | 'type'>[],\n  type: DynamicPartitionsRequestType,\n) {\n  return requests.reduce((sum, request) => {\n    if (request.type === type) {\n      return sum + (request.partitionKeys?.length || 0);\n    }\n    return sum;\n  }, 0);\n}\n","import {\n  BaseTag,\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Tag,\n  Tooltip,\n  ifPlural,\n} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {InstigationTickStatus} from '../graphql/types';\nimport {HistoryTickFragment} from '../instigation/types/InstigationUtils.types';\n\nexport type TickResultType = 'runs' | 'materializations';\n\ntype PropsForMaterializations = {\n  tick: Pick<HistoryTickFragment, 'status' | 'requestedAssetMaterializationCount' | 'error'>;\n  tickResultType: 'materializations';\n  isStuckStarted?: boolean;\n};\n\ntype PropsForRuns = {\n  tick: Pick<HistoryTickFragment, 'status' | 'skipReason' | 'runIds' | 'runKeys' | 'error'>;\n  tickResultType: 'runs';\n  isStuckStarted?: boolean;\n};\n\nexport const TickStatusTag = ({\n  tick,\n  tickResultType,\n  isStuckStarted,\n}: PropsForMaterializations | PropsForRuns) => {\n  const [showErrors, setShowErrors] = useState(false);\n  const tag = useMemo(() => {\n    const requestedItem = tickResultType === 'materializations' ? 'materialization' : 'run';\n    switch (tick.status) {\n      case InstigationTickStatus.STARTED:\n        return (\n          <Tag intent=\"primary\" icon={isStuckStarted ? undefined : 'spinner'}>\n            {isStuckStarted ? 'In progress' : 'Evaluating'}\n          </Tag>\n        );\n      case InstigationTickStatus.SKIPPED:\n        const tag = (\n          <BaseTag\n            fillColor={Colors.backgroundLighter()}\n            label={\n              tickResultType === 'materializations'\n                ? '0 materializations requested'\n                : '0 runs requested'\n            }\n          />\n        );\n        if ('runKeys' in tick && tick.runKeys.length) {\n          const message = `${tick.runKeys.length} runs requested, but skipped because the runs already exist for the requested keys.`;\n          return (\n            <Tooltip position=\"right\" content={message}>\n              {tag}\n            </Tooltip>\n          );\n        }\n        if ('skipReason' in tick && tick.skipReason) {\n          return (\n            <Tooltip position=\"right\" content={tick.skipReason} targetTagName=\"div\">\n              {tag}\n            </Tooltip>\n          );\n        }\n        return tag;\n      case InstigationTickStatus.FAILURE:\n        return (\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n            <Tag intent=\"danger\">Failure</Tag>\n            {tick.error ? (\n              <ButtonLink\n                onClick={() => {\n                  setShowErrors(true);\n                }}\n              >\n                View\n              </ButtonLink>\n            ) : null}\n          </Box>\n        );\n      case InstigationTickStatus.SUCCESS:\n        const count =\n          tickResultType === 'materializations'\n            ? tick.requestedAssetMaterializationCount\n            : tick.runIds.length;\n        const successTag = (\n          <Tag intent=\"success\">\n            {count} {requestedItem}\n            {ifPlural(count, '', 's')} requested\n          </Tag>\n        );\n        if ('runKeys' in tick && tick.runKeys.length > tick.runIds.length) {\n          const message = `${tick.runKeys.length} runs requested, but ${\n            tick.runKeys.length - tick.runIds.length\n          } skipped because the runs already exist for those requested keys.`;\n          return (\n            <Tooltip position=\"right\" content={message}>\n              {successTag}\n            </Tooltip>\n          );\n        }\n        return successTag;\n    }\n  }, [isStuckStarted, tick, tickResultType]);\n\n  return (\n    <>\n      {tag}\n      {tick.error ? (\n        <Dialog isOpen={showErrors} title=\"Error\" style={{width: '80vw'}}>\n          <DialogBody>\n            <PythonErrorInfo error={tick.error} />\n          </DialogBody>\n          <DialogFooter topBorder>\n            <Button\n              intent=\"primary\"\n              onClick={() => {\n                setShowErrors(false);\n              }}\n            >\n              Close\n            </Button>\n          </DialogFooter>\n        </Dialog>\n      ) : null}\n    </>\n  );\n};\n","import {gql} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\n\nexport const AUTOMATION_ASSET_SELECTION_FRAGMENT = gql`\n  fragment AutomationAssetSelectionFragment on AssetSelection {\n    assetSelectionString\n    assetChecks {\n      name\n      assetKey {\n        path\n      }\n    }\n    assetsOrError {\n      ... on AssetConnection {\n        nodes {\n          id\n          ...AssetSelectionNodeFragment\n        }\n      }\n      ... on PythonError {\n        ...PythonErrorFragment\n      }\n    }\n  }\n\n  fragment AssetSelectionNodeFragment on Asset {\n    id\n    key {\n      path\n    }\n    definition {\n      id\n      automationCondition {\n        __typename\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import * as yaml from 'yaml';\n\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {ExecutionParams, ScheduleSelector, SensorSelector} from '../graphql/types';\nimport {sanitizeConfigYamlString} from '../launchpad/yamlUtils';\nimport {ScheduleDryRunInstigationTick} from '../ticks/EvaluateScheduleDialog';\nimport {SensorDryRunInstigationTick} from '../ticks/SensorDryRunDialog';\n\nconst YAML_SYNTAX_INVALID = `The YAML you provided couldn't be parsed. Please fix the syntax errors and try again.`;\n\n// This helper removes __typename, which prevents tags from being passed back to GraphQL\nconst onlyKeyAndValue = ({key, value}: {key: string; value: string}) => ({key, value});\n\n// adapted from buildExecutionVariables() in LaunchpadSession.tsx\nexport const buildExecutionParamsListSensor = (\n  sensorExecutionData: SensorDryRunInstigationTick,\n  sensorSelector: SensorSelector,\n  jobName: string,\n) => {\n  if (!sensorExecutionData) {\n    return [];\n  }\n\n  const executionParamsList: ExecutionParams[] = [];\n\n  sensorExecutionData?.evaluationResult?.runRequests?.forEach((request) => {\n    const configYamlOrEmpty = sanitizeConfigYamlString(request.runConfigYaml);\n\n    try {\n      yaml.parse(configYamlOrEmpty);\n    } catch {\n      showCustomAlert({title: 'Invalid YAML', body: YAML_SYNTAX_INVALID});\n      return;\n    }\n    const {repositoryLocationName, repositoryName} = sensorSelector;\n\n    const executionParams: ExecutionParams = {\n      runConfigData: configYamlOrEmpty,\n      selector: {\n        jobName: request.jobName ?? jobName, // get jobName from runRequest, fallback to jobName\n        repositoryLocationName,\n        repositoryName,\n        assetSelection: [],\n        assetCheckSelection: [],\n        solidSelection: undefined,\n      },\n      mode: 'default',\n      executionMetadata: {\n        tags: [...request.tags.map(onlyKeyAndValue)],\n      },\n    };\n    executionParamsList.push(executionParams);\n  });\n  return executionParamsList;\n};\n\n// adapted from buildExecutionVariables() in LaunchpadSession.tsx\nexport const buildExecutionParamsListSchedule = (\n  scheduleExecutionData: ScheduleDryRunInstigationTick,\n  scheduleSelector: ScheduleSelector,\n  jobName: string,\n) => {\n  if (!scheduleExecutionData) {\n    return [];\n  }\n\n  const executionParamsList: ExecutionParams[] = [];\n\n  scheduleExecutionData?.evaluationResult?.runRequests?.forEach((request) => {\n    const configYamlOrEmpty = sanitizeConfigYamlString(request.runConfigYaml);\n\n    try {\n      yaml.parse(configYamlOrEmpty);\n    } catch {\n      showCustomAlert({title: 'Invalid YAML', body: YAML_SYNTAX_INVALID});\n      return;\n    }\n    const {repositoryLocationName, repositoryName} = scheduleSelector;\n\n    const executionParams: ExecutionParams = {\n      runConfigData: configYamlOrEmpty,\n      selector: {\n        jobName: request.jobName ?? jobName, // get jobName from runRequest, fallback to jobName\n        repositoryLocationName,\n        repositoryName,\n        assetSelection: [],\n        assetCheckSelection: [],\n        solidSelection: undefined,\n      },\n      mode: 'default',\n      executionMetadata: {\n        tags: [...request.tags.map(onlyKeyAndValue)],\n      },\n    };\n    executionParamsList.push(executionParams);\n  });\n  return executionParamsList;\n};\n","import {gql} from '../apollo-client';\nimport {INSTIGATION_STATE_FRAGMENT} from '../instigation/InstigationUtils';\n\nexport const SENSOR_FRAGMENT = gql`\n  fragment SensorFragment on Sensor {\n    id\n    name\n    description\n    minIntervalSeconds\n    sensorType\n    nextTick {\n      timestamp\n    }\n    defaultStatus\n    canReset\n    sensorState {\n      id\n      ...InstigationStateFragment\n    }\n    targets {\n      pipelineName\n      solidSelection\n      mode\n    }\n    metadata {\n      assetKeys {\n        path\n      }\n    }\n  }\n\n  ${INSTIGATION_STATE_FRAGMENT}\n`;\n","import {Alert, Box} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nexport type DaemonStatusForWarning = {\n  healthy: boolean | null;\n  required: boolean | null;\n};\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  sensorDaemonStatus?: DaemonStatusForWarning;\n  assetDaemonStatus?: DaemonStatusForWarning;\n};\n\nexport const SensorInfo = ({sensorDaemonStatus, assetDaemonStatus, ...boxProps}: Props) => {\n  const warnForSensor =\n    sensorDaemonStatus && sensorDaemonStatus.healthy === false && sensorDaemonStatus.required;\n  const warnForAssets =\n    assetDaemonStatus && !assetDaemonStatus.healthy === false && assetDaemonStatus.required;\n\n  if (!warnForAssets && !warnForSensor) {\n    return null;\n  }\n\n  const title = () => {\n    if (warnForSensor) {\n      if (warnForAssets) {\n        return 'The sensor and asset daemons are not running';\n      }\n      return 'The sensor daemon is not running';\n    }\n    return 'The asset daemon is not running';\n  };\n\n  return (\n    <Box {...boxProps}>\n      <Alert\n        intent=\"warning\"\n        title={title()}\n        description={\n          <div>\n            See the{' '}\n            <a\n              href=\"https://docs.dagster.io/deployment/dagster-daemon\"\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >\n              dagster-daemon documentation\n            </a>{' '}\n            for more information on how to deploy the dagster-daemon process.\n          </div>\n        }\n      />\n    </Box>\n  );\n};\n","import * as React from 'react';\n\nimport {RunsFeedTableWithFilters} from '../runs/RunsFeedTable';\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {DagsterTag} from '../runs/RunTag';\nimport {repoAddressAsTag} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const SensorPreviousRuns = ({\n  sensor,\n  repoAddress,\n  tabs,\n}: {\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  tabs?: React.ReactElement;\n}) => {\n  const filter = React.useMemo(\n    () => ({\n      tags: [\n        {key: DagsterTag.SensorName, value: sensor.name},\n        {key: DagsterTag.RepositoryLabelTag, value: repoAddressAsTag(repoAddress)},\n      ],\n    }),\n    [repoAddress, sensor.name],\n  );\n  return (\n    <RunsFeedTableWithFilters filter={filter} includeRunsFromBackfills actionBarComponents={tabs} />\n  );\n};\n","import {Box, ButtonGroup, Colors, NonIdealState, Page, Spinner} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\nimport {Redirect, useParams} from 'react-router-dom';\n\nimport {SensorDetails} from './SensorDetails';\nimport {SENSOR_FRAGMENT} from './SensorFragment';\nimport {SensorInfo} from './SensorInfo';\nimport {SensorPreviousRuns} from './SensorPreviousRuns';\nimport {gql, useQuery} from '../apollo-client';\nimport {\n  SensorAssetSelectionQuery,\n  SensorAssetSelectionQueryVariables,\n  SensorRootQuery,\n  SensorRootQueryVariables,\n} from './types/SensorRoot.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, useMergedRefresh, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {AUTOMATION_ASSET_SELECTION_FRAGMENT} from '../automation/AutomationAssetSelectionFragment';\nimport {InstigationTickStatus, SensorType} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {TickHistoryTimeline, TicksTable} from '../instigation/TickHistory';\nimport {TickResultType} from '../ticks/TickStatusTag';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\nexport const SensorRoot = ({repoAddress}: {repoAddress: RepoAddress}) => {\n  useTrackPageView();\n\n  const {sensorName} = useParams<{sensorName: string}>();\n  useDocumentTitle(`Sensor: ${sensorName}`);\n\n  const sensorSelector = {\n    ...repoAddressToSelector(repoAddress),\n    sensorName,\n  };\n\n  const [statuses, setStatuses] = useState<undefined | InstigationTickStatus[]>(undefined);\n  const [timeRange, setTimerange] = useState<undefined | [number, number]>(undefined);\n  const variables = useMemo(() => {\n    if (timeRange || statuses) {\n      return {\n        afterTimestamp: timeRange?.[0],\n        beforeTimestamp: timeRange?.[1],\n        statuses,\n      };\n    }\n    return {};\n  }, [statuses, timeRange]);\n\n  const [selectedTab, setSelectedTab] = useQueryPersistedState<'evaluations' | 'runs'>(\n    useMemo(\n      () => ({\n        queryKey: 'view',\n        decode: ({view}) => (view === 'runs' ? 'runs' : 'evaluations'),\n        encode: (raw) => {\n          return {view: raw, cursor: undefined, statuses: undefined};\n        },\n      }),\n      [],\n    ),\n  );\n\n  const queryResult = useQuery<SensorRootQuery, SensorRootQueryVariables>(SENSOR_ROOT_QUERY, {\n    variables: {sensorSelector},\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const selectionQueryResult = useQuery<\n    SensorAssetSelectionQuery,\n    SensorAssetSelectionQueryVariables\n  >(SENSOR_ASSET_SELECTIONS_QUERY, {\n    variables: {sensorSelector},\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const refreshState1 = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const refreshState2 = useQueryRefreshAtInterval(selectionQueryResult, FIFTEEN_SECONDS);\n  const refreshState = useMergedRefresh(refreshState1, refreshState2);\n\n  const {data, loading} = queryResult;\n\n  const tabs = (\n    <ButtonGroup\n      activeItems={new Set([selectedTab])}\n      buttons={[\n        {id: 'evaluations', label: 'Evaluations'},\n        {id: 'runs', label: 'Runs'},\n      ]}\n      onClick={(id: 'evaluations' | 'runs') => {\n        setSelectedTab(id);\n      }}\n    />\n  );\n\n  if (!data && loading) {\n    return (\n      <Box\n        margin={{top: 32}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'center', gap: 16}}\n      >\n        <Spinner purpose=\"body-text\" />\n        <div style={{color: Colors.textLight()}}>Loading sensor…</div>\n      </Box>\n    );\n  }\n\n  if (!data || data.sensorOrError.__typename === 'SensorNotFoundError') {\n    return (\n      <Box padding={{vertical: 32}}>\n        <NonIdealState\n          icon=\"error\"\n          title={`Could not find sensor \\`${sensorName}\\` in definitions for \\`${repoAddress.name}\\``}\n        />\n      </Box>\n    );\n  }\n\n  const {sensorOrError} = data;\n  if (sensorOrError.__typename === 'PythonError') {\n    return <PythonErrorInfo error={sensorOrError} />;\n  }\n\n  if (sensorOrError.__typename === 'UnauthorizedError') {\n    return <Redirect to=\"/overview/sensors\" />;\n  }\n\n  const {instance} = data;\n  const assetSelection =\n    selectionQueryResult.data?.sensorOrError.__typename === 'Sensor'\n      ? selectionQueryResult.data.sensorOrError.assetSelection\n      : null;\n\n  const isAutomationSensor =\n    sensorOrError.sensorType === SensorType.AUTO_MATERIALIZE ||\n    sensorOrError.sensorType === SensorType.AUTOMATION;\n\n  const sensorDaemonStatus = instance.daemonHealth.sensorDaemonStatus;\n\n  const tickResultType: TickResultType = isAutomationSensor ? 'materializations' : 'runs';\n\n  return (\n    <Page>\n      <SensorDetails\n        repoAddress={repoAddress}\n        sensor={sensorOrError}\n        daemonHealth={sensorDaemonStatus.healthy}\n        refreshState={refreshState}\n        assetSelection={assetSelection || null}\n      />\n      <SensorInfo\n        sensorDaemonStatus={sensorDaemonStatus}\n        padding={{vertical: 16, horizontal: 24}}\n      />\n      <TickHistoryTimeline\n        tickResultType={tickResultType}\n        repoAddress={repoAddress}\n        name={sensorOrError.name}\n        {...variables}\n      />\n      <Box margin={{top: 32}} border=\"top\">\n        {selectedTab === 'evaluations' ? (\n          <TicksTable\n            tabs={tabs}\n            tickResultType={tickResultType}\n            repoAddress={repoAddress}\n            name={sensorOrError.name}\n            setParentStatuses={setStatuses}\n            setTimerange={setTimerange}\n          />\n        ) : (\n          <SensorPreviousRuns repoAddress={repoAddress} sensor={sensorOrError} tabs={tabs} />\n        )}\n      </Box>\n    </Page>\n  );\n};\n\nconst SENSOR_ROOT_QUERY = gql`\n  query SensorRootQuery($sensorSelector: SensorSelector!) {\n    sensorOrError(sensorSelector: $sensorSelector) {\n      ... on Sensor {\n        id\n        ...SensorFragment\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      id\n      daemonHealth {\n        id\n        sensorDaemonStatus: daemonStatus(daemonType: \"SENSOR\") {\n          id\n          healthy\n          required\n        }\n        ampDaemonStatus: daemonStatus(daemonType: \"ASSET\") {\n          id\n          healthy\n          required\n        }\n      }\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${SENSOR_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n\nexport const SENSOR_ASSET_SELECTIONS_QUERY = gql`\n  query SensorAssetSelectionQuery($sensorSelector: SensorSelector!) {\n    sensorOrError(sensorSelector: $sensorSelector) {\n      ... on Sensor {\n        id\n        assetSelection {\n          ...AutomationAssetSelectionFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${AUTOMATION_ASSET_SELECTION_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {\n  Box,\n  Button,\n  Colors,\n  Dialog,\n  DialogFooter,\n  ExternalAnchorButton,\n  Icon,\n  NonIdealState,\n  SpinnerWithText,\n} from '@dagster-io/ui-components';\n\nimport {INSTIGATION_EVENT_LOG_FRAGMENT, InstigationEventLogTable} from './InstigationEventLogTable';\nimport {gql, useQuery} from '../apollo-client';\nimport {TickLogEventsQuery, TickLogEventsQueryVariables} from './types/TickLogDialog.types';\nimport {InstigationSelector} from '../graphql/types';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\n\nexport const TickLogDialog = ({\n  tickId,\n  timestamp,\n  instigationSelector,\n  isOpen,\n  onClose,\n}: {\n  tickId: string | null;\n  timestamp?: number;\n  instigationSelector: InstigationSelector;\n  isOpen: boolean;\n  onClose: () => void;\n}) => {\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '70vw', maxWidth: '1200px', minWidth: '800px'}}\n      title={\n        <span>\n          {timestamp ? (\n            <span>\n              <span>Logs for {instigationSelector.name}: </span>\n              <TimestampDisplay timestamp={timestamp} timeFormat={{showSeconds: true}} />\n            </span>\n          ) : (\n            <span>Logs for {instigationSelector.name}</span>\n          )}\n        </span>\n      }\n    >\n      {tickId ? (\n        <QueryfulTickLogsTable instigationSelector={instigationSelector} tickId={tickId} />\n      ) : null}\n      {/* Use z-index to force the footer to sit above the lines of the logs table */}\n      <Box background={Colors.backgroundDefault()} style={{zIndex: 3, position: 'relative'}}>\n        <DialogFooter topBorder>\n          <Button onClick={onClose}>Done</Button>\n        </DialogFooter>\n      </Box>\n    </Dialog>\n  );\n};\n\ninterface TickLogTableProps {\n  tickId: string;\n  instigationSelector: InstigationSelector;\n}\n\nexport const QueryfulTickLogsTable = ({instigationSelector, tickId}: TickLogTableProps) => {\n  const {data, loading} = useQuery<TickLogEventsQuery, TickLogEventsQueryVariables>(\n    TICK_LOG_EVENTS_QUERY,\n    {\n      variables: {instigationSelector, tickId},\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const events =\n    data?.instigationStateOrError.__typename === 'InstigationState' &&\n    data?.instigationStateOrError.tick\n      ? data?.instigationStateOrError.tick.logEvents.events\n      : undefined;\n\n  if (loading) {\n    return (\n      <Box style={{height: 500}} flex={{justifyContent: 'center', alignItems: 'center'}}>\n        <SpinnerWithText label=\"Loading logs…\" />\n      </Box>\n    );\n  }\n\n  if (events && events.length) {\n    return (\n      <Box style={{height: 500}} flex={{direction: 'column'}}>\n        <InstigationEventLogTable events={events} />\n      </Box>\n    );\n  }\n\n  const tickStatus =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.tick.status\n      : undefined;\n  const instigationType =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.instigationType\n      : undefined;\n  const instigationLoggingDocsUrl =\n    instigationType === 'SENSOR'\n      ? 'https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors#logging-in-sensors'\n      : instigationType === 'SCHEDULE'\n        ? 'https://docs.dagster.io/concepts/partitions-schedules-sensors/schedules#logging-in-schedules'\n        : undefined;\n\n  return (\n    <Box\n      style={{height: 500}}\n      flex={{justifyContent: 'center', alignItems: 'center'}}\n      padding={{vertical: 48}}\n    >\n      <NonIdealState\n        icon=\"no-results\"\n        title=\"No logs to display\"\n        description={\n          <Box flex={{direction: 'column', gap: 12}}>\n            <div>\n              Your evaluation did not emit any logs. To learn how to emit logs in your evaluation,\n              visit the documentation for more information.\n            </div>\n            {tickStatus === 'FAILURE' && (\n              <>\n                <div>\n                  For failed evaluations, logs will only be displayed if your Dagster and Dagster\n                  Cloud agent versions 1.5.14 or higher.\n                </div>\n                <div>Upgrade your Dagster versions to view logs for failed evaluations.</div>\n              </>\n            )}\n          </Box>\n        }\n        action={\n          instigationLoggingDocsUrl && (\n            <ExternalAnchorButton\n              href={instigationLoggingDocsUrl}\n              rightIcon={<Icon name=\"open_in_new\" />}\n            >\n              View documentation\n            </ExternalAnchorButton>\n          )\n        }\n      />\n    </Box>\n  );\n};\n\nconst TICK_LOG_EVENTS_QUERY = gql`\n  query TickLogEventsQuery($instigationSelector: InstigationSelector!, $tickId: ID!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        instigationType\n        tick(tickId: $tickId) {\n          id\n          status\n          timestamp\n          logEvents {\n            events {\n              ...InstigationEventLog\n            }\n          }\n        }\n      }\n    }\n  }\n  ${INSTIGATION_EVENT_LOG_FRAGMENT}\n`;\n","import styled from 'styled-components';\n\nexport const Page = styled.div`\n  height: 100%;\n  overflow-y: auto;\n  padding-bottom: 64px;\n  width: 100%;\n`;\n","import {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogFooter,\n  Mono,\n  Subtitle2,\n  Tab,\n  Tabs,\n  Tag,\n} from '@dagster-io/ui-components';\nimport {useEffect, useMemo, useState} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {\n  labelForAssetCheck,\n  renderItemAssetCheck,\n  renderItemAssetKey,\n  sortItemAssetCheck,\n  sortItemAssetKey,\n} from '../assets/AssetListUtils';\nimport {VirtualizedItemListForDialog} from '../ui/VirtualizedItemListForDialog';\nimport {AutomationAssetSelectionFragment} from './types/AutomationAssetSelectionFragment.types';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {displayNameForAssetKey, isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {\n  assetDetailsPathForAssetCheck,\n  assetDetailsPathForKey,\n} from '../assets/assetDetailsPathForKey';\nimport {SensorType} from '../graphql/types';\nimport {PipelineReference} from '../pipelines/PipelineReference';\nimport {isThisThingAJob, useRepository} from '../workspace/WorkspaceContext/util';\nimport {RepoAddress} from '../workspace/types';\n\ntype AutomationType = 'schedule' | SensorType;\n\nexport const AutomationTargetList = ({\n  assetSelection,\n  automationType,\n  targets,\n  repoAddress,\n}: {\n  automationType: AutomationType;\n  repoAddress: RepoAddress;\n  targets: {pipelineName: string}[] | null;\n  assetSelection: AutomationAssetSelectionFragment | null;\n}) => {\n  const repo = useRepository(repoAddress);\n  if (!targets && !assetSelection) {\n    return <span />;\n  }\n\n  const visibleTargets = targets?.filter((target) => !isHiddenAssetGroupJob(target.pipelineName));\n\n  if (assetSelection) {\n    return <AssetSelectionTag assetSelection={assetSelection} automationType={automationType} />;\n  }\n\n  if (visibleTargets?.length) {\n    return (\n      <Box flex={{direction: 'row', gap: 4}}>\n        {visibleTargets.map((target) =>\n          target.pipelineName ? (\n            <Tag icon=\"job\" tooltipText={target.pipelineName} key={target.pipelineName}>\n              <PipelineReference\n                key={target.pipelineName}\n                pipelineName={target.pipelineName}\n                pipelineHrefContext={repoAddress}\n                isJob={!!(repo && isThisThingAJob(repo, target.pipelineName))}\n              />\n            </Tag>\n          ) : null,\n        )}\n      </Box>\n    );\n  }\n\n  return (\n    <Tag>\n      <div style={{color: Colors.textLight()}}>None</div>\n    </Tag>\n  );\n};\n\nconst ALL_ASSETS_STRING = 'all materializable assets';\n\nconst AssetSelectionTag = ({\n  assetSelection,\n  automationType,\n}: {\n  assetSelection: AutomationAssetSelectionFragment;\n  automationType: AutomationType;\n}) => {\n  const [showDialog, setShowDialog] = useState(false);\n\n  const error =\n    assetSelection.assetsOrError.__typename === 'PythonError' ? assetSelection.assetsOrError : null;\n\n  const {checks, assets, assetsWithAMP, assetsWithoutAMP} = useMemo(() => {\n    if (assetSelection.assetsOrError.__typename === 'PythonError') {\n      return {checks: [], assets: [], assetsWithAMP: [], assetsWithoutAMP: []};\n    }\n    const assets = assetSelection.assetsOrError.nodes;\n\n    return {\n      checks: assetSelection.assetChecks.slice().sort(sortItemAssetCheck),\n      assets: assets.map((a) => a.key).sort(sortItemAssetKey),\n      assetsWithAMP: assets\n        .filter((asset) => !!asset.definition?.automationCondition)\n        .map((a) => a.key)\n        .sort(sortItemAssetKey),\n      assetsWithoutAMP: assets\n        .filter((asset) => !asset.definition?.automationCondition)\n        .map((a) => a.key)\n        .sort(sortItemAssetKey),\n    };\n  }, [assetSelection]);\n\n  const [selectedTab, setSelectedTab] = useState('none');\n  const initialTab = checks.length && !assets.length ? 'checks' : 'assets';\n  useEffect(() => setSelectedTab(initialTab), [initialTab]);\n\n  const assetSelectionString = assetSelection.assetSelectionString || '';\n  const isAllAssets = assetSelectionString === ALL_ASSETS_STRING;\n\n  if (checks.length === 0 && assets.length === 1 && assets[0]) {\n    return (\n      <Tag icon=\"asset\">\n        <Link to={assetDetailsPathForKey(assets[0])}>{displayNameForAssetKey(assets[0])}</Link>\n      </Tag>\n    );\n  }\n\n  if (assets.length === 0 && checks.length === 1 && checks[0]) {\n    return (\n      <Tag icon=\"asset_check\">\n        <Link to={assetDetailsPathForAssetCheck(checks[0])}>{labelForAssetCheck(checks[0])}</Link>\n      </Tag>\n    );\n  }\n\n  const splitConditioned =\n    automationType === SensorType.AUTO_MATERIALIZE || automationType === SensorType.AUTOMATION;\n\n  return (\n    <>\n      <Dialog\n        isOpen={showDialog}\n        title=\"Targeted assets\"\n        onClose={() => setShowDialog(false)}\n        style={{width: '750px', maxWidth: '80vw', minWidth: '500px'}}\n        canOutsideClickClose\n        canEscapeKeyClose\n      >\n        <Box\n          flex={{direction: 'column', gap: 16}}\n          padding={{horizontal: 20, vertical: 16}}\n          border=\"bottom\"\n        >\n          <Box flex={{direction: 'column', gap: 4}}>\n            <Subtitle2>Asset selection</Subtitle2>\n            <Mono>{assetSelectionString}</Mono>\n          </Box>\n        </Box>\n\n        <Box padding={{horizontal: 20, top: 8}} border=\"bottom\">\n          <Tabs size=\"small\" selectedTabId={selectedTab}>\n            {splitConditioned ? (\n              <Tab\n                id=\"assets\"\n                title={`Assets with Automation Conditions (${assetsWithAMP.length})`}\n                onClick={() => setSelectedTab('assets')}\n              />\n            ) : (\n              <Tab\n                id=\"assets\"\n                title={`Assets (${assets.length})`}\n                onClick={() => setSelectedTab('assets')}\n              />\n            )}\n            {splitConditioned && (\n              <Tab\n                id=\"assets-without-conditions\"\n                disabled={assetsWithoutAMP.length === 0}\n                title={`Other Assets (${assetsWithoutAMP.length})`}\n                onClick={() => setSelectedTab('assets-without-conditions')}\n              />\n            )}\n            <Tab\n              id=\"checks\"\n              disabled={checks.length === 0}\n              title={`Checks ${checks.length}`}\n              onClick={() => setSelectedTab('checks')}\n            />\n          </Tabs>\n        </Box>\n        <Box flex={{direction: 'column'}} style={{maxHeight: '60vh', minHeight: '300px'}}>\n          {selectedTab === 'checks' ? (\n            <VirtualizedItemListForDialog\n              items={checks}\n              renderItem={renderItemAssetCheck}\n              itemBorders\n            />\n          ) : (\n            <VirtualizedItemListForDialog\n              items={\n                selectedTab === 'assets-without-conditions'\n                  ? assetsWithoutAMP\n                  : splitConditioned\n                    ? assetsWithAMP\n                    : assets\n              }\n              renderItem={renderItemAssetKey}\n              itemBorders\n            />\n          )}\n        </Box>\n        <DialogFooter topBorder>\n          <Button\n            intent=\"primary\"\n            onClick={() => {\n              setShowDialog(false);\n            }}\n          >\n            Close\n          </Button>\n        </DialogFooter>\n      </Dialog>\n      <Tag icon={assets.length === 1 ? 'asset' : 'asset_group'} intent={error ? 'danger' : 'none'}>\n        <ButtonLink\n          onClick={() => {\n            if (error) {\n              showCustomAlert({\n                title: 'Python error',\n                body: <PythonErrorInfo error={error} />,\n              });\n            } else {\n              setShowDialog(true);\n            }\n          }}\n          color={error ? Colors.textRed() : Colors.linkDefault()}\n        >\n          {error\n            ? 'Error loading asset selection'\n            : isAllAssets\n              ? 'All materializable assets'\n              : assetSelectionString}\n        </ButtonLink>\n      </Tag>\n    </>\n  );\n};\n","import {Caption, Colors, Tooltip, ifPlural, useViewport} from '@dagster-io/ui-components';\nimport dayjs from 'dayjs';\nimport {memo, useEffect, useMemo, useState} from 'react';\nimport styled from 'styled-components';\n\nimport {Timestamp} from '../app/time/Timestamp';\nimport {TickResultType} from '../ticks/TickStatusTag';\nimport {HistoryTickFragment} from './types/InstigationUtils.types';\nimport {isStuckStartedTick} from './util';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {InstigationTickStatus} from '../graphql/types';\n\nimport '../util/dayjsExtensions';\n\nconst COLOR_MAP = {\n  [InstigationTickStatus.SUCCESS]: Colors.accentGreen(),\n  [InstigationTickStatus.FAILURE]: Colors.accentRed(),\n  [InstigationTickStatus.STARTED]: Colors.accentLavender(),\n  [InstigationTickStatus.SKIPPED]: Colors.backgroundDisabled(),\n};\n\nconst HoverColorMap = {\n  [InstigationTickStatus.SUCCESS]: Colors.accentGreenHover(),\n  [InstigationTickStatus.FAILURE]: Colors.accentRedHover(),\n  [InstigationTickStatus.STARTED]: Colors.accentLavenderHover(),\n  [InstigationTickStatus.SKIPPED]: Colors.accentGrayHover(),\n};\n\nconst REFRESH_INTERVAL = 100;\n\nconst MIN_WIDTH = 8; // At least 8px wide\n\nconst MINUTE = 60000;\n\nexport const LiveTickTimeline = <T extends HistoryTickFragment | AssetDaemonTickFragment>({\n  ticks,\n  tickResultType,\n  onHoverTick,\n  onSelectTick,\n  exactRange,\n  timeRange = MINUTE * 5, // 5 minutes,\n  tickGrid = MINUTE, // 1 minute\n  timeAfter = MINUTE, // 1 minute\n}: {\n  ticks: T[];\n  tickResultType: TickResultType;\n  onHoverTick: (InstigationTick?: T) => void;\n  onSelectTick: (InstigationTick: T) => void;\n  exactRange?: [number, number];\n  timeRange?: number;\n  tickGrid?: number;\n  timeAfter?: number;\n}) => {\n  const [now, setNow] = useState<number>(Date.now());\n  const [isPaused, setPaused] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!isPaused && !exactRange) {\n      const interval = setInterval(() => {\n        setNow(Date.now());\n      }, REFRESH_INTERVAL);\n      return () => clearInterval(interval);\n    }\n    return () => {};\n  }, [exactRange, isPaused]);\n\n  const maxX = exactRange?.[1] ? exactRange[1] * 1000 : now + timeAfter;\n  const minX = exactRange?.[0] ? exactRange[0] * 1000 : now - timeRange;\n  const showNowLine = minX < now && now < maxX;\n\n  const fullRange = maxX - minX;\n\n  const {viewport, containerProps} = useViewport();\n\n  const ticksReversed = useMemo(() => {\n    // Reverse ticks to make tab order correct\n    return ticks.filter((tick) => !tick.endTimestamp || tick.endTimestamp * 1000 > minX).reverse();\n  }, [ticks, minX]);\n\n  const ticksToDisplay = useMemo(() => {\n    return ticksReversed.map((tick, i) => {\n      const startX = getX(1000 * tick.timestamp!, viewport.width, minX, fullRange);\n      const endTimestamp = isStuckStartedTick(tick, ticksReversed.length - i - 1)\n        ? tick.timestamp\n        : tick.endTimestamp\n          ? tick.endTimestamp * 1000\n          : now;\n      const endX = getX(endTimestamp, viewport.width, minX, fullRange);\n      return {\n        ...tick,\n        width: Math.max(endX - startX, MIN_WIDTH),\n        startX,\n      };\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [minX, now, ticksReversed, fullRange, viewport.width]);\n\n  const timeTickGridDelta = Math.max((maxX - minX) / 25, tickGrid);\n  const tickGridDelta = timeTickGridDelta / 5;\n  const startTickGridX = Math.ceil(minX / tickGridDelta) * tickGridDelta;\n  const numTicks = Math.ceil((maxX - startTickGridX) / tickGridDelta);\n  const numLabels = Math.ceil(numTicks / 5);\n\n  const gridTicks = useMemo(() => {\n    const ticks = [];\n    for (let ii = 0; ii < numTicks; ii++) {\n      const time = startTickGridX + ii * tickGridDelta;\n      ticks.push({\n        time,\n        x: getX(time, viewport.width, minX, fullRange),\n        showLabel: ii % numLabels === 0,\n      });\n    }\n    return ticks;\n  }, [numTicks, startTickGridX, tickGridDelta, viewport.width, minX, fullRange, numLabels]);\n\n  return (\n    <div style={{marginRight: '8px'}}>\n      <div {...containerProps}>\n        <TicksWrapper>\n          {gridTicks.map((tick) => (\n            <GridTick\n              key={tick.time}\n              style={{\n                transform: `translateX(${tick.x}px)`,\n              }}\n            >\n              <GridTickLine />\n              {tick.showLabel ? (\n                <GridTickTime>\n                  <Caption>\n                    <Timestamp timestamp={{ms: tick.time}} timeFormat={{showSeconds: true}} />\n                  </Caption>\n                </GridTickTime>\n              ) : null}\n            </GridTick>\n          ))}\n          {ticksToDisplay.map((tick) => {\n            const count =\n              (tickResultType === 'materializations' || !('runIds' in tick)\n                ? tick.requestedAssetMaterializationCount\n                : tick.runIds?.length) ?? 0;\n            return (\n              <Tick\n                key={tick.id}\n                style={{\n                  transform: `translateX(${tick.startX}px)`,\n                  width: `${tick.width}px`,\n                }}\n                status={tick.status}\n                onMouseEnter={() => {\n                  onHoverTick(tick);\n                  setPaused(true);\n                }}\n                onMouseLeave={() => {\n                  onHoverTick();\n                  setPaused(false);\n                }}\n                onClick={() => {\n                  onSelectTick(tick);\n                }}\n              >\n                <Tooltip content={<TickTooltip tick={tick} tickResultType={tickResultType} />}>\n                  <div style={{width: tick.width + 'px', height: '80px'}}>\n                    {count > 0 ? count : null}\n                  </div>\n                </Tooltip>\n              </Tick>\n            );\n          })}\n          {showNowLine ? (\n            <NowIndicator\n              style={{\n                transform: `translateX(${getX(now, viewport.width, minX, fullRange)}px)`,\n              }}\n            />\n          ) : null}\n        </TicksWrapper>\n        <TimeAxisWrapper></TimeAxisWrapper>\n      </div>\n    </div>\n  );\n};\n\nconst TickTooltip = memo(\n  ({\n    tick,\n    tickResultType,\n  }: {\n    tick: HistoryTickFragment | AssetDaemonTickFragment;\n    tickResultType: TickResultType;\n  }) => {\n    const status = useMemo(() => {\n      if (tick.status === InstigationTickStatus.FAILURE) {\n        return 'Evaluation failed';\n      }\n      if (tick.status === InstigationTickStatus.STARTED) {\n        return 'Evaluating…';\n      }\n      if (tickResultType === 'materializations' || !('runs' in tick)) {\n        return `${tick.requestedAssetMaterializationCount} materialization${ifPlural(\n          tick.requestedAssetMaterializationCount,\n          '',\n          's',\n        )} requested`;\n      } else {\n        return `${tick.runs?.length || 0} run${ifPlural(tick.runs?.length, '', 's')} requested`;\n      }\n    }, [tick, tickResultType]);\n\n    const startTime = dayjs(1000 * tick.timestamp!);\n    const endTime = dayjs(tick.endTimestamp ? 1000 * tick.endTimestamp : Date.now());\n    const elapsedTime = startTime.to(endTime, true);\n\n    return (\n      <div>\n        <Caption as=\"div\">\n          <Timestamp timestamp={{unix: tick.timestamp}} timeFormat={{showSeconds: true}} />\n        </Caption>\n        <Caption as=\"div\">\n          {status} ({elapsedTime})\n        </Caption>\n        {tick.status === InstigationTickStatus.STARTED ? null : (\n          <Caption color={Colors.textLight()}>Click for details</Caption>\n        )}\n      </div>\n    );\n  },\n);\n\nconst TicksWrapper = styled.div`\n  position: relative;\n  height: 100px;\n  padding: 10px 2px;\n  border-bottom: 1px solid ${Colors.keylineDefault()};\n`;\n\nconst TimeAxisWrapper = styled.div`\n  height: 24px;\n`;\n\nconst Tick = styled.div<{status: InstigationTickStatus}>`\n  cursor: pointer;\n  position: absolute;\n  top: 10px;\n  height: 80px;\n  will-change: transform, width;\n  border-radius: 2px;\n  div {\n    place-content: center;\n    display: grid;\n  }\n  color: ${Colors.backgroundDefault()};\n  ${({status}) => `\n    background: ${COLOR_MAP[status]};\n    &:hover {\n      background: ${HoverColorMap[status]};\n    }\n  `}\n`;\n\nconst GridTick = styled.div`\n  position: absolute;\n  top: 0;\n  height: 124px;\n  will-change: transform;\n`;\nconst GridTickLine = styled.div`\n  position: absolute;\n  top: 0;\n  height: 108px;\n  width: 1px;\n  background: ${Colors.keylineDefault()};\n`;\nconst GridTickTime = styled.div`\n  height: 16px;\n  position: absolute;\n  bottom: 0;\n  width: 100px;\n  margin-left: -24px;\n`;\n\nconst NowIndicator = styled.div`\n  position: absolute;\n  top: 0;\n  height: 126px;\n  width: 2px;\n  background: ${Colors.accentPrimary()};\n  &:after {\n    content: 'Now';\n    position: absolute;\n    left: 0;\n    background: ${Colors.accentPrimary()};\n    color: ${Colors.accentReversed()};\n    bottom: 0;\n    font-size: 12px;\n    padding: 3px 4px;\n  }\n`;\n\nfunction getX(timestamp: number, viewportWidth: number, minX: number, timeRange: number) {\n  return (viewportWidth * (timestamp - minX)) / timeRange;\n}\n","import {useCallback} from 'react';\nimport {useHistory} from 'react-router-dom';\n\nimport {showLaunchError} from './showLaunchError';\nimport {useMutation} from '../apollo-client';\nimport {paramsWithUIExecutionTags} from './uiExecutionTags';\nimport {TelemetryAction, useTelemetryAction} from '../app/Telemetry';\nimport {\n  LAUNCH_MULTIPLE_RUNS_MUTATION,\n  LaunchBehavior,\n  handleLaunchMultipleResult,\n} from '../runs/RunUtils';\nimport {\n  LaunchMultipleRunsMutation,\n  LaunchMultipleRunsMutationVariables,\n} from '../runs/types/RunUtils.types';\n\nexport function useLaunchMultipleRunsWithTelemetry() {\n  const [launchMultipleRuns] = useMutation<\n    LaunchMultipleRunsMutation,\n    LaunchMultipleRunsMutationVariables\n  >(LAUNCH_MULTIPLE_RUNS_MUTATION);\n\n  const logTelemetry = useTelemetryAction();\n  const history = useHistory();\n\n  return useCallback(\n    async (variables: LaunchMultipleRunsMutationVariables, behavior: LaunchBehavior) => {\n      try {\n        const executionParamsList = Array.isArray(variables.executionParamsList)\n          ? variables.executionParamsList\n          : [variables.executionParamsList];\n\n        const jobNames = executionParamsList.map(\n          (params) => params.selector.jobName || params.selector.pipelineName,\n        );\n\n        if (\n          jobNames.length !== executionParamsList.length ||\n          jobNames.includes(undefined) ||\n          jobNames.includes(null)\n        ) {\n          throw new Error(\n            'Error: Invalid job names. Each RunRequest must specify a job name to launch all runs',\n          );\n        }\n\n        const metadata: {[key: string]: string | string[] | null | undefined} = {\n          jobNames: jobNames.filter((name): name is string => name !== undefined),\n          opSelection: undefined,\n        };\n\n        const finalized = {\n          ...variables,\n          executionParamsList: Array.isArray(variables.executionParamsList)\n            ? variables.executionParamsList.map(paramsWithUIExecutionTags)\n            : paramsWithUIExecutionTags(variables.executionParamsList),\n        };\n\n        const result = (await launchMultipleRuns({variables: finalized})).data?.launchMultipleRuns;\n\n        if (result) {\n          handleLaunchMultipleResult(result, history, {behavior});\n          logTelemetry(\n            TelemetryAction.LAUNCH_MULTIPLE_RUNS,\n            metadata as {[key: string]: string | string[] | null | undefined},\n          );\n        }\n\n        return result;\n      } catch (error) {\n        console.error('error', error);\n        showLaunchError(error as Error);\n      }\n      return undefined;\n    },\n    [history, launchMultipleRuns, logTelemetry],\n  );\n}\n","import {RepoAddress} from '../workspace/types';\n\nexport interface Props {\n  repoAddress: RepoAddress;\n  sensorName: string;\n}\n\nexport const SensorAlertDetails = (_props: Props) => null;\n","import {Box} from '@dagster-io/ui-components';\n\nimport {AssetLink} from '../assets/AssetLink';\nimport {SensorMetadata} from '../graphql/types';\n\nexport const SensorMonitoredAssets = ({metadata}: {metadata: SensorMetadata | undefined}) => {\n  if (!metadata?.assetKeys?.length) {\n    return <span />;\n  }\n  return (\n    <Box flex={{direction: 'column', gap: 2}}>\n      {metadata.assetKeys.map((key) => (\n        <AssetLink key={key.path.join('/')} path={key.path} icon=\"asset\" />\n      ))}\n    </Box>\n  );\n};\n","import {Button, Tooltip} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {RESET_SENSOR_MUTATION, displaySensorMutationErrors} from './SensorMutations';\nimport {useMutation} from '../apollo-client';\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {ResetSensorMutation, ResetSensorMutationVariables} from './types/SensorMutations.types';\nimport {DEFAULT_DISABLED_REASON, usePermissionsForLocation} from '../app/Permissions';\nimport {repoAddressToSelector} from '../workspace/repoAddressToSelector';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Props {\n  repoAddress: RepoAddress;\n  sensor: SensorFragment;\n}\n\nexport const SensorResetButton = ({repoAddress, sensor}: Props) => {\n  const {\n    permissions: {canStartSensor, canStopSensor},\n  } = usePermissionsForLocation(repoAddress.location);\n\n  const {name} = sensor;\n  const sensorSelector = {\n    ...repoAddressToSelector(repoAddress),\n    sensorName: name,\n  };\n\n  const [resetSensor, {loading: toggleOnInFlight}] = useMutation<\n    ResetSensorMutation,\n    ResetSensorMutationVariables\n  >(RESET_SENSOR_MUTATION, {\n    onCompleted: displaySensorMutationErrors,\n  });\n  const onClick = () => {\n    resetSensor({variables: {sensorSelector}});\n  };\n\n  const hasPermission = canStartSensor && canStopSensor;\n  const disabled = toggleOnInFlight || !hasPermission;\n  const tooltipContent = hasPermission\n    ? `In code, a default status for \"${name}\" has been set to \"${sensor.defaultStatus}\". Click here to reset the sensor status to track the status set in code.`\n    : DEFAULT_DISABLED_REASON;\n\n  return (\n    <Tooltip\n      content={<div style={{maxWidth: '500px', wordBreak: 'break-word'}}>{tooltipContent}</div>}\n      display=\"flex\"\n    >\n      <Button disabled={disabled} onClick={onClick}>\n        Reset sensor status\n      </Button>\n    </Tooltip>\n  );\n};\n","import {Box, Colors, Icon, Subheading, Table, Tag} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\n\nimport {DynamicPartitionRequestFragment} from './types/SensorDryRunDialog.types';\nimport {DynamicPartitionsRequestType} from '../graphql/types';\n\nexport function DynamicPartitionRequests({\n  includeTitle = true,\n  requests,\n}: {\n  includeTitle?: boolean;\n  requests: Pick<DynamicPartitionRequestFragment, 'partitionKeys' | 'partitionsDefName' | 'type'>[];\n}) {\n  const rows = useMemo(() => {\n    if (!requests.length) {\n      return [];\n    }\n    const rows: {key: string; def: string; type: DynamicPartitionsRequestType}[] = [];\n    requests.forEach(({partitionKeys, partitionsDefName, type}) => {\n      partitionKeys?.forEach((key) => {\n        rows.push({\n          key,\n          def: partitionsDefName,\n          type,\n        });\n      });\n    });\n    return rows;\n  }, [requests]);\n\n  if (!rows.length) {\n    return null;\n  }\n\n  return (\n    <Box flex={{direction: 'column', gap: 12, grow: 1}}>\n      {includeTitle ? (\n        <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n          <Icon name=\"partition\" />\n          <Subheading>Dynamic Partition Requests</Subheading>\n        </Box>\n      ) : null}\n      <Table style={{borderRight: `1px solid ${Colors.keylineDefault()}`}}>\n        <thead>\n          <tr>\n            <th>Partition</th>\n            <th>Partition definition</th>\n            <th>Requested change</th>\n          </tr>\n        </thead>\n        <tbody>\n          {rows.map(({key, def, type}, index) => {\n            return (\n              <tr key={index}>\n                <td>{key}</td>\n                <td>{def}</td>\n                <td>\n                  {type === DynamicPartitionsRequestType.ADD_PARTITIONS ? (\n                    <Tag intent=\"success\">\n                      <span>Add Partition</span>\n                    </Tag>\n                  ) : (\n                    <Tag intent=\"danger\">\n                      <span>Delete Partition</span>\n                    </Tag>\n                  )}\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </Box>\n  );\n}\n","import {\n  Box,\n  Button,\n  ButtonLink,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n  NonIdealState,\n  NonIdealStateWrapper,\n  Spinner,\n  Subheading,\n  Tag,\n  TextInput,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport {useCallback, useMemo, useState} from 'react';\nimport styled from 'styled-components';\n\nimport {RunRequestTable} from './DryRunRequestTable';\nimport {DynamicPartitionRequests} from './DynamicPartitionRequests';\nimport {RUN_REQUEST_FRAGMENT} from './RunRequestFragment';\nimport {gql, useMutation} from '../apollo-client';\nimport {\n  SensorDryRunMutation,\n  SensorDryRunMutationVariables,\n} from './types/SensorDryRunDialog.types';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {assertUnreachable} from '../app/Util';\nimport {useTrackEvent} from '../app/analytics';\nimport {PythonErrorFragment} from '../app/types/PythonErrorFragment.types';\nimport {DELETE_DYNAMIC_PARTITIONS_MUTATION} from '../assets/DeleteDynamicPartitionsDialog';\nimport {\n  DeleteDynamicPartitionsMutation,\n  DeleteDynamicPartitionsMutationVariables,\n} from '../assets/types/DeleteDynamicPartitionsDialog.types';\nimport {DynamicPartitionsRequestType, SensorSelector} from '../graphql/types';\nimport {useLaunchMultipleRunsWithTelemetry} from '../launchpad/useLaunchMultipleRunsWithTelemetry';\nimport {CREATE_PARTITION_MUTATION} from '../partitions/CreatePartitionDialog';\nimport {\n  AddDynamicPartitionMutation,\n  AddDynamicPartitionMutationVariables,\n} from '../partitions/types/CreatePartitionDialog.types';\nimport {SET_CURSOR_MUTATION} from '../sensors/EditCursorDialog';\nimport {\n  SetSensorCursorMutation,\n  SetSensorCursorMutationVariables,\n} from '../sensors/types/EditCursorDialog.types';\nimport {testId} from '../testing/testId';\nimport {buildExecutionParamsListSensor} from '../util/buildExecutionParamsList';\nimport {RepoAddress} from '../workspace/types';\n\nexport type SensorDryRunInstigationTick = Extract<\n  SensorDryRunMutation['sensorDryRun'],\n  {__typename: 'DryRunInstigationTick'}\n>;\n\ntype Props = {\n  name: string;\n  onClose: () => void;\n  repoAddress: RepoAddress;\n  currentCursor: string;\n  isOpen: boolean;\n  jobName: string;\n};\n\nexport const SensorDryRunDialog = (props: Props) => {\n  const {isOpen, onClose, name} = props;\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '70vw', display: 'flex'}}\n      icon=\"preview_tick\"\n      title={`Preview tick result for ${name}`}\n    >\n      <SensorDryRun {...props} />\n    </Dialog>\n  );\n};\n\nconst SensorDryRun = ({repoAddress, name, currentCursor, onClose, jobName}: Props) => {\n  const trackEvent = useTrackEvent();\n\n  const [sensorDryRun] = useMutation<SensorDryRunMutation, SensorDryRunMutationVariables>(\n    EVALUATE_SENSOR_MUTATION,\n  );\n  const [setCursorMutation] = useMutation<\n    SetSensorCursorMutation,\n    SetSensorCursorMutationVariables\n  >(SET_CURSOR_MUTATION);\n  const [createPartition] = useMutation<\n    AddDynamicPartitionMutation,\n    AddDynamicPartitionMutationVariables\n  >(CREATE_PARTITION_MUTATION);\n  const [deletePartition] = useMutation<\n    DeleteDynamicPartitionsMutation,\n    DeleteDynamicPartitionsMutationVariables\n  >(DELETE_DYNAMIC_PARTITIONS_MUTATION);\n\n  const [cursor, setCursor] = useState(currentCursor);\n\n  const [submitting, setSubmitting] = useState(false);\n  const [launching, setLaunching] = useState(false);\n  const [error, setError] = useState<PythonErrorFragment | null>(null);\n  const [sensorExecutionData, setSensorExecutionData] =\n    useState<SensorDryRunInstigationTick | null>(null);\n\n  const sensorSelector: SensorSelector = useMemo(\n    () => ({\n      sensorName: name,\n      repositoryLocationName: repoAddress.location,\n      repositoryName: repoAddress.name,\n    }),\n    [repoAddress, name],\n  );\n  const executionParamsList = useMemo(\n    () =>\n      sensorExecutionData && sensorSelector\n        ? buildExecutionParamsListSensor(sensorExecutionData, sensorSelector, jobName)\n        : [],\n    [sensorSelector, sensorExecutionData, jobName],\n  );\n  const dynamicPartitionRequests = sensorExecutionData?.evaluationResult?.dynamicPartitionsRequests;\n\n  const submitTest = useCallback(async () => {\n    setSubmitting(true);\n    const result = await sensorDryRun({\n      variables: {\n        selectorData: sensorSelector,\n        cursor,\n      },\n    });\n    const data = result.data?.sensorDryRun;\n    if (data) {\n      if (data?.__typename === 'DryRunInstigationTick') {\n        if (data.evaluationResult?.error) {\n          setError(data.evaluationResult.error);\n        } else {\n          setSensorExecutionData(data);\n        }\n      } else if (data?.__typename === 'SensorNotFoundError') {\n        showCustomAlert({\n          title: 'Sensor not found',\n          body: `Could not find a sensor named: ${name}`,\n        });\n      } else {\n        setError(data);\n      }\n    } else {\n      assertUnreachable('sensorDryRun Mutation returned no data??' as never);\n    }\n    setSubmitting(false);\n  }, [sensorDryRun, sensorSelector, cursor, name]);\n\n  const onCommitTickResult = useCallback(async () => {\n    const cursor = sensorExecutionData?.evaluationResult?.cursor;\n    if (!cursor) {\n      return;\n    }\n    const {data} = await setCursorMutation({\n      variables: {sensorSelector, cursor},\n    });\n    if (data?.setSensorCursor.__typename === 'Sensor') {\n      await showSharedToaster({message: 'Cursor value updated', intent: 'success'});\n    } else if (data?.setSensorCursor) {\n      const error = data.setSensorCursor;\n      await showSharedToaster({\n        intent: 'danger',\n        message: (\n          <Group direction=\"row\" spacing={8}>\n            <div>Could not set cursor value.</div>\n            <ButtonLink\n              color={Colors.accentReversed()}\n              underline=\"always\"\n              onClick={() => {\n                showCustomAlert({\n                  title: 'Python Error',\n                  body:\n                    error.__typename === 'PythonError' ? (\n                      <PythonErrorInfo error={error} />\n                    ) : (\n                      'Sensor not found'\n                    ),\n                });\n              }}\n            >\n              View error\n            </ButtonLink>\n          </Group>\n        ),\n      });\n    }\n  }, [sensorExecutionData?.evaluationResult?.cursor, sensorSelector, setCursorMutation]);\n\n  const launchMultipleRunsWithTelemetry = useLaunchMultipleRunsWithTelemetry();\n\n  const canApply = useMemo(() => {\n    return (\n      (executionParamsList != null && executionParamsList.length > 0) ||\n      (dynamicPartitionRequests?.length || 0) > 0\n    );\n  }, [executionParamsList, dynamicPartitionRequests]);\n\n  const onApply = useCallback(async () => {\n    if (!canApply) {\n      return;\n    }\n\n    trackEvent('launch-all-sensor');\n    setLaunching(true);\n\n    try {\n      if (dynamicPartitionRequests?.length) {\n        await Promise.all(\n          dynamicPartitionRequests.map(async (request) => {\n            if (request.type === DynamicPartitionsRequestType.ADD_PARTITIONS) {\n              await Promise.all(\n                (request.partitionKeys || []).map(async (partitionKey) => {\n                  await createPartition({\n                    variables: {\n                      repositorySelector: {\n                        repositoryName: repoAddress.name,\n                        repositoryLocationName: repoAddress.location,\n                      },\n                      partitionsDefName: request.partitionsDefName,\n                      partitionKey,\n                    },\n                  });\n                }),\n              );\n            } else if (request.partitionKeys && request.partitionKeys.length) {\n              await deletePartition({\n                variables: {\n                  repositorySelector: {\n                    repositoryName: repoAddress.name,\n                    repositoryLocationName: repoAddress.location,\n                  },\n                  partitionsDefName: request.partitionsDefName,\n                  partitionKeys: request.partitionKeys,\n                },\n              });\n            }\n          }),\n        );\n      }\n      if (executionParamsList) {\n        await launchMultipleRunsWithTelemetry({executionParamsList}, 'toast');\n      }\n      onCommitTickResult(); // persist tick\n    } catch (e) {\n      console.error(e);\n    }\n\n    setLaunching(false);\n    onClose();\n  }, [\n    canApply,\n    createPartition,\n    deletePartition,\n    dynamicPartitionRequests,\n    executionParamsList,\n    launchMultipleRunsWithTelemetry,\n    onClose,\n    onCommitTickResult,\n    repoAddress,\n    trackEvent,\n  ]);\n\n  const leftButtons = useMemo(() => {\n    if (launching) {\n      return null;\n    }\n\n    if (sensorExecutionData || error) {\n      return (\n        <Button\n          icon={<Icon name=\"settings_backup_restore\" />}\n          data-testid={testId('try-again')}\n          onClick={() => {\n            setSensorExecutionData(null);\n            setError(null);\n          }}\n        >\n          Try again\n        </Button>\n      );\n    } else {\n      return null;\n    }\n  }, [launching, sensorExecutionData, error]);\n\n  const rightButtons = useMemo(() => {\n    if (launching) {\n      return <Box flex={{direction: 'row', gap: 8}}></Box>;\n    }\n\n    if (sensorExecutionData || error) {\n      const runRequests = sensorExecutionData?.evaluationResult?.runRequests;\n      const numRunRequests = runRequests?.length || 0;\n      const didSkip = !error && numRunRequests === 0;\n\n      if (error) {\n        return (\n          <Box flex={{direction: 'row', gap: 8}}>\n            <Button onClick={onClose}>Close</Button>\n          </Box>\n        );\n      } else if (didSkip) {\n        return (\n          <Box flex={{direction: 'row', gap: 8}}>\n            <Button onClick={onClose}>Close</Button>\n\n            <Tooltip content=\"Commits tick result\" placement=\"top-end\">\n              <Button\n                icon={<Icon name=\"check_filled\" />}\n                intent=\"primary\"\n                onClick={onCommitTickResult}\n                data-testid={testId('commit-tick-result')}\n              >\n                <div>Commit tick result</div>\n              </Button>\n            </Tooltip>\n          </Box>\n        );\n      } else {\n        return (\n          <Box flex={{direction: 'row', gap: 8}}>\n            <Button onClick={onClose}>Close</Button>\n            <Tooltip\n              canShow={!canApply || launching}\n              content=\"Applies requests, launches all runs, and commits tick result\"\n              placement=\"top-end\"\n            >\n              <Button\n                icon={<Icon name=\"check_filled\" />}\n                intent=\"primary\"\n                disabled={!canApply || launching}\n                onClick={onApply}\n                data-testid={testId('launch-all')}\n              >\n                <div>Apply requests & commit tick result</div>\n              </Button>\n            </Tooltip>\n          </Box>\n        );\n      }\n    }\n    if (submitting) {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button onClick={onClose}>Cancel</Button>\n        </Box>\n      );\n    } else {\n      return (\n        <Box flex={{direction: 'row', gap: 8}}>\n          <Button onClick={onClose}>Cancel</Button>\n          <Button onClick={submitTest} intent=\"primary\" data-testid={testId('continue')}>\n            Continue\n          </Button>\n        </Box>\n      );\n    }\n  }, [\n    launching,\n    sensorExecutionData,\n    error,\n    submitting,\n    onClose,\n    onCommitTickResult,\n    canApply,\n    onApply,\n    submitTest,\n  ]);\n\n  const content = useMemo(() => {\n    if (launching) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, justifyContent: 'center', alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          <div>Launching runs</div>\n        </Box>\n      );\n    }\n    if (sensorExecutionData || error) {\n      const runRequests = sensorExecutionData?.evaluationResult?.runRequests;\n      const numRunRequests = runRequests?.length || 0;\n      const didSkip = !error && numRunRequests === 0;\n      const dynamicPartitionRequests =\n        sensorExecutionData?.evaluationResult?.dynamicPartitionsRequests;\n      return (\n        <Box flex={{direction: 'column', gap: 8}}>\n          <Grid>\n            <div>\n              <Subheading>Result</Subheading>\n              <Box flex={{grow: 1, alignItems: 'center'}}>\n                <div>\n                  {error ? (\n                    <Tag intent=\"danger\">Failed</Tag>\n                  ) : numRunRequests ? (\n                    <Tag intent=\"success\">{numRunRequests} run requests</Tag>\n                  ) : (\n                    <Tag intent=\"warning\">Skipped</Tag>\n                  )}\n                </div>\n              </Box>\n            </div>\n            <div>\n              <Subheading>Used cursor value</Subheading>\n              <pre>{cursor?.length ? cursor : 'None'}</pre>\n            </div>\n          </Grid>\n          <Box>\n            {error ? (\n              <div>\n                <PythonErrorInfo error={error} />\n              </div>\n            ) : null}\n            {didSkip ? (\n              <Box flex={{direction: 'column', gap: 8}}>\n                <Subheading style={{marginBottom: 8}}>Requested runs (0)</Subheading>\n                <div>\n                  <SkipReasonNonIdealStateWrapper>\n                    <NonIdealState\n                      icon=\"missing\"\n                      title=\"No runs requested\"\n                      description={\n                        <>\n                          <span>\n                            The sensor function was successfully evaluated but didn&apos;t return\n                            any run requests.\n                          </span>\n                          <span>\n                            <br />\n                            Skip reason:{' '}\n                            {sensorExecutionData?.evaluationResult?.skipReason\n                              ? `\"${sensorExecutionData.evaluationResult.skipReason}\"`\n                              : 'No skip reason was output'}\n                          </span>\n                        </>\n                      }\n                    />\n                  </SkipReasonNonIdealStateWrapper>\n                </div>\n              </Box>\n            ) : null}\n            {numRunRequests && runRequests ? (\n              <Box flex={{direction: 'column', gap: 8}}>\n                <Subheading>Requested runs ({numRunRequests})</Subheading>\n                <RunRequestTable\n                  runRequests={runRequests}\n                  name={name}\n                  jobName={jobName}\n                  isJob={true}\n                  repoAddress={repoAddress}\n                />\n              </Box>\n            ) : null}\n            {dynamicPartitionRequests?.length ? (\n              <div style={{marginTop: '24px'}}>\n                <DynamicPartitionRequests requests={dynamicPartitionRequests} />\n              </div>\n            ) : null}\n          </Box>\n\n          <ComputedCursorGrid>\n            <Subheading>Computed cursor value</Subheading>\n            <pre>\n              {sensorExecutionData?.evaluationResult?.cursor?.length\n                ? sensorExecutionData?.evaluationResult.cursor\n                : error\n                  ? 'Error'\n                  : 'None'}\n            </pre>\n          </ComputedCursorGrid>\n        </Box>\n      );\n    }\n    if (submitting) {\n      return (\n        <Box flex={{direction: 'row', gap: 8, justifyContent: 'center', alignItems: 'center'}}>\n          <Spinner purpose=\"body-text\" />\n          <div>Evaluating sensor</div>\n        </Box>\n      );\n    } else {\n      return (\n        <Box flex={{direction: 'column', gap: 8}}>\n          <div>Cursor value (optional)</div>\n          <TextInput\n            value={cursor}\n            onChange={(e) => setCursor(e.target.value)}\n            data-testid={testId('cursor-input')}\n            placeholder=\"Enter a cursor value\"\n          />\n          <div>\n            A cursor tracks where a sensor left off, allowing the sensor to efficiently process new\n            changes or events without missing anything or duplicating work. The cursor is typically\n            a string, and can be updated within the sensor&apos;s logic to reflect the latest state.\n          </div>\n          <div>\n            <a href=\"https://docs.dagster.io/concepts/partitions-schedules-sensors/sensors#idempotence-and-cursors\">\n              Learn more\n            </a>{' '}\n            about cursors\n          </div>\n        </Box>\n      );\n    }\n  }, [sensorExecutionData, error, submitting, launching, name, jobName, repoAddress, cursor]);\n\n  return (\n    <>\n      <DialogBody>\n        <div style={{minHeight: '300px'}}>{content}</div>\n      </DialogBody>\n      <DialogFooter topBorder left={leftButtons}>\n        {rightButtons}\n      </DialogFooter>\n    </>\n  );\n};\n\nexport const EVALUATE_SENSOR_MUTATION = gql`\n  mutation SensorDryRunMutation($selectorData: SensorSelector!, $cursor: String) {\n    sensorDryRun(selectorData: $selectorData, cursor: $cursor) {\n      ... on DryRunInstigationTick {\n        timestamp\n        evaluationResult {\n          cursor\n          runRequests {\n            ...RunRequestFragment\n          }\n          skipReason\n          error {\n            ...PythonErrorFragment\n          }\n          dynamicPartitionsRequests {\n            ...DynamicPartitionRequestFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  fragment DynamicPartitionRequestFragment on DynamicPartitionRequest {\n    partitionKeys\n    partitionsDefName\n    type\n  }\n\n  ${RUN_REQUEST_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  padding-bottom: 12px;\n  border-bottom: 1px solid ${Colors.keylineDefault()};\n  ${Subheading} {\n    padding-bottom: 4px;\n    display: block;\n  }\n  pre {\n    margin: 0;\n  }\n  button {\n    margin-top: 4px;\n  }\n`;\n\nconst ComputedCursorGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  padding-bottom: 12px;\n  ${Subheading} {\n    padding-bottom: 4px;\n    display: block;\n  }\n  pre {\n    margin: 0;\n  }\n  button {\n    margin-top: 4px;\n  }\n`;\n\nconst SkipReasonNonIdealStateWrapper = styled.div`\n  ${NonIdealStateWrapper} {\n    margin: auto !important;\n    width: unset !important;\n    max-width: unset !important;\n  }\n`;\n","import {Box, Button, Icon, Tooltip} from '@dagster-io/ui-components';\nimport {useState} from 'react';\n\nimport {SensorDryRunDialog} from './SensorDryRunDialog';\nimport {SensorType} from '../graphql/types';\nimport {RepoAddress} from '../workspace/types';\n\ninterface EvaluateTickButtonSensorProps {\n  cursor: string;\n  name: string;\n  repoAddress: RepoAddress;\n  jobName: string;\n  sensorType: SensorType;\n}\n\nexport const EvaluateTickButtonSensor = ({\n  cursor,\n  name,\n  repoAddress,\n  jobName,\n  sensorType,\n}: EvaluateTickButtonSensorProps) => {\n  const [showTestTickDialog, setShowTestTickDialog] = useState(false);\n\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n      <Tooltip\n        canShow={sensorType !== SensorType.STANDARD}\n        content=\"Testing not available for this sensor type\"\n        placement=\"top-end\"\n      >\n        <Button\n          disabled={sensorType !== SensorType.STANDARD}\n          onClick={() => setShowTestTickDialog(true)}\n          icon={<Icon name=\"preview_tick\" />}\n        >\n          Preview tick result\n        </Button>\n      </Tooltip>\n      <SensorDryRunDialog\n        isOpen={showTestTickDialog}\n        onClose={() => setShowTestTickDialog(false)}\n        currentCursor={cursor}\n        name={name}\n        repoAddress={repoAddress}\n        jobName={jobName}\n      />\n    </Box>\n  );\n};\n","import {\n  Box,\n  Button,\n  FontFamily,\n  Icon,\n  MetadataTableWIP,\n  PageHeader,\n  Subtitle1,\n  Tag,\n  Tooltip,\n} from '@dagster-io/ui-components';\nimport {useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport {SensorAlertDetails} from 'shared/sensors/SensorAlertDetails.oss';\nimport styled from 'styled-components';\n\nimport {EditCursorDialog} from './EditCursorDialog';\nimport {SensorMonitoredAssets} from './SensorMonitoredAssets';\nimport {SensorResetButton} from './SensorResetButton';\nimport {SensorSwitch} from './SensorSwitch';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {EvaluateTickButtonSensor} from '../ticks/EvaluateTickButtonSensor';\nimport {SensorFragment} from './types/SensorFragment.types';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {AutomationTargetList} from '../automation/AutomationTargetList';\nimport {AutomationAssetSelectionFragment} from '../automation/types/AutomationAssetSelectionFragment.types';\nimport {InstigationStatus, SensorType} from '../graphql/types';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {TickStatusTag} from '../ticks/TickStatusTag';\nimport {RepoAddress} from '../workspace/types';\n\nconst TIME_FORMAT = {showSeconds: true, showTimezone: false};\n\n/** Some cursors are persisted Python tuples, which come through as JSON. Examples:\n * {\"__class__\": \"AirflowPollingSensorCursor\", \"dag_query_offset\": 0, \"end_date_gte\": 1743134332.087687, \"end_date_lte\": null}\n * {\"__class__\": \"RunStatusSensorCursor\", \"record_id\": 1234, \"update_timestamp\": \"1743134332.087687\", \"record_timestamp\": null}\n *\n * For these, there are often empty / unused fields and we can pull just the cursor fields that are in use\n * into a compact table-ready presentation:\n *\n * end_date_gte=1743134332.087687\n */\nexport const humanizeSensorCursor = (cursor: string | false | null) => {\n  if (cursor && cursor.startsWith('{\"__class__\"')) {\n    const cursorObj = JSON.parse(cursor);\n    delete cursorObj['__class__'];\n    return Object.entries(cursorObj)\n      .filter((pair) => pair[1] !== null && pair[1] !== 0)\n      .map(([k, v]) => `${k}=${v}`)\n      .join(',');\n  }\n  return cursor;\n};\n\nexport const humanizeSensorInterval = (minIntervalSeconds?: number) => {\n  if (!minIntervalSeconds) {\n    minIntervalSeconds = 30; // should query sensor interval config when available\n  }\n  if (minIntervalSeconds < 60 || minIntervalSeconds % 60) {\n    return `~${minIntervalSeconds} sec`;\n  }\n  if (minIntervalSeconds === 3600) {\n    return `~1 hour`;\n  }\n  if (minIntervalSeconds < 3600 || minIntervalSeconds % 3600) {\n    return `~${minIntervalSeconds / 60} min`;\n  }\n  if (minIntervalSeconds === 86400) {\n    return `~1 day`;\n  }\n  if (minIntervalSeconds < 86400 || minIntervalSeconds % 86400) {\n    return `~${minIntervalSeconds / 3600} hours`;\n  }\n  return `~${minIntervalSeconds / 86400} days`;\n};\n\nexport const SensorDetails = ({\n  sensor,\n  repoAddress,\n  daemonHealth,\n  refreshState,\n  assetSelection,\n}: {\n  sensor: SensorFragment;\n  repoAddress: RepoAddress;\n  daemonHealth: boolean | null;\n  refreshState: QueryRefreshState;\n  assetSelection: AutomationAssetSelectionFragment | null;\n}) => {\n  const {\n    name,\n    sensorState: {status, ticks},\n    metadata,\n  } = sensor;\n\n  const {\n    permissions,\n    disabledReasons,\n    loading: loadingPermissions,\n  } = usePermissionsForLocation(repoAddress.location);\n  const {canUpdateSensorCursor} = permissions;\n\n  const [isCursorEditing, setCursorEditing] = useState(false);\n  const sensorSelector = {\n    sensorName: sensor.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n\n  const latestTick = ticks.length ? ticks[0] : null;\n  const cursor =\n    sensor.sensorState.typeSpecificData &&\n    sensor.sensorState.typeSpecificData.__typename === 'SensorData' &&\n    sensor.sensorState.typeSpecificData.lastCursor;\n\n  const running = status === InstigationStatus.RUNNING;\n\n  return (\n    <>\n      <PageHeader\n        title={\n          <Subtitle1 style={{display: 'flex', flexDirection: 'row', gap: 4}}>\n            <Link to=\"/automation\">Automation</Link>\n            <span>/</span>\n            {name}\n          </Subtitle1>\n        }\n        icon=\"sensors\"\n        tags={\n          <Tag icon=\"sensors\">\n            Sensor in <RepositoryLink repoAddress={repoAddress} />\n          </Tag>\n        }\n        right={\n          <Box margin={{top: 4}} flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            <QueryRefreshCountdown refreshState={refreshState} />\n            <EvaluateTickButtonSensor\n              cursor={cursor || ''}\n              name={sensor.name}\n              repoAddress={repoAddress}\n              jobName={sensor.targets?.[0]?.pipelineName || ''}\n              sensorType={sensor.sensorType}\n            />\n          </Box>\n        }\n      />\n      <MetadataTableWIP>\n        <tbody>\n          {sensor.description ? (\n            <tr>\n              <td>Description</td>\n              <td>{sensor.description}</td>\n            </tr>\n          ) : null}\n          <tr>\n            <td>Latest tick</td>\n            <td>\n              {latestTick ? (\n                <>\n                  <Box\n                    flex={{direction: 'row', gap: 8, alignItems: 'center'}}\n                    style={{marginTop: '-2px'}}\n                  >\n                    <TimestampDisplay timestamp={latestTick.timestamp} timeFormat={TIME_FORMAT} />\n                    <TickStatusTag tick={latestTick} tickResultType=\"runs\" />\n                  </Box>\n                </>\n              ) : (\n                'Sensor has never run'\n              )}\n            </td>\n          </tr>\n          {sensor.nextTick && daemonHealth && running && (\n            <tr>\n              <td>Next tick</td>\n              <td>\n                <TimestampDisplay timestamp={sensor.nextTick.timestamp!} timeFormat={TIME_FORMAT} />\n              </td>\n            </tr>\n          )}\n          {(sensor.targets && sensor.targets.length) || assetSelection ? (\n            <tr>\n              <td>Target</td>\n              <TargetCell>\n                <AutomationTargetList\n                  targets={sensor.targets}\n                  repoAddress={repoAddress}\n                  assetSelection={assetSelection || null}\n                  automationType={sensor.sensorType}\n                />\n              </TargetCell>\n            </tr>\n          ) : null}\n          <tr>\n            <td>\n              <Box flex={{alignItems: 'center'}} style={{height: '32px'}}>\n                Running\n              </Box>\n            </td>\n            <td>\n              <Box\n                flex={{direction: 'row', gap: 12, alignItems: 'center'}}\n                style={{height: '32px'}}\n              >\n                <SensorSwitch repoAddress={repoAddress} sensor={sensor} />\n                {sensor.canReset && <SensorResetButton repoAddress={repoAddress} sensor={sensor} />}\n              </Box>\n            </td>\n          </tr>\n          <tr>\n            <td>Frequency</td>\n            <td>{humanizeSensorInterval(sensor.minIntervalSeconds)}</td>\n          </tr>\n          {metadata.assetKeys && metadata.assetKeys.length ? (\n            <tr>\n              <td>Monitored assets</td>\n              <td>\n                <SensorMonitoredAssets metadata={metadata} />\n              </td>\n            </tr>\n          ) : null}\n          {sensor.sensorType !== SensorType.AUTO_MATERIALIZE &&\n          sensor.sensorType !== SensorType.AUTOMATION ? (\n            <tr>\n              <td>\n                <Box flex={{alignItems: 'center'}} style={{height: '32px'}}>\n                  Cursor\n                </Box>\n              </td>\n              <td>\n                <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n                  <span style={{fontFamily: FontFamily.monospace, fontSize: '14px'}}>\n                    {cursor ? humanizeSensorCursor(cursor) : 'None'}\n                  </span>\n                  <Tooltip\n                    canShow={!canUpdateSensorCursor}\n                    content={disabledReasons.canUpdateSensorCursor}\n                  >\n                    <Button\n                      icon={<Icon name=\"edit\" />}\n                      disabled={!canUpdateSensorCursor || loadingPermissions}\n                      onClick={() => setCursorEditing(true)}\n                    >\n                      {cursor !== humanizeSensorCursor(cursor) ? 'View Raw / Edit' : 'Edit'}\n                    </Button>\n                  </Tooltip>\n                </Box>\n                <EditCursorDialog\n                  isOpen={isCursorEditing}\n                  sensorSelector={sensorSelector}\n                  cursor={cursor ? cursor : ''}\n                  onClose={() => setCursorEditing(false)}\n                />\n              </td>\n            </tr>\n          ) : null}\n          <SensorAlertDetails repoAddress={repoAddress} sensorName={name} />\n        </tbody>\n      </MetadataTableWIP>\n    </>\n  );\n};\n\nconst TargetCell = styled.td`\n  button {\n    line-height: 20px;\n  }\n`;\n","import {gql} from '../apollo-client';\n\nexport const RUN_REQUEST_FRAGMENT = gql`\n  fragment RunRequestFragment on RunRequest {\n    runConfigYaml\n    tags {\n      key\n      value\n    }\n    runKey\n    jobName\n    assetSelection {\n      path\n    }\n  }\n`;\n"],"names":["SCHEDULE_ASSET_SELECTIONS_QUERY","gql","AUTOMATION_ASSET_SELECTION_FRAGMENT","PYTHON_ERROR_FRAGMENT","RunRequestTable","runRequests","isJob","repoAddress","mode","jobName","repo","useRepository","selectedRequest","setSelectedRequest","useState","visibleDialog","setVisibleDialog","body","tbody","data-testid","testId","map","request","index","tr","runKey","td","style","verticalAlign","Box","flex","alignItems","gap","PipelineReference","pipelineName","pipelineHrefContext","showIcon","size","width","textAlign","PreviewButton","onClick","RunConfigDialog","isOpen","onClose","runConfigYaml","tags","div","Table","borderRight","Colors","tableLayout","thead","th","Tooltip","content","placement","Button","icon","Icon","name","Chart","register","zoomPlugin","TickStatusDisplay","STATUS_DISPLAY_MAP","InstigationTickStatus","SUCCESS","FAILURE","STARTED","SKIPPED","TicksTable","queryResult","showLogsForTick","tabs","tickResultType","setTimerange","setParentStatuses","tickStatus","setTickStatus","useQueryPersistedState","queryKey","defaults","status","showDetailsForTick","setShowDetailsForTick","setShowLogsForTick","instigationSelector","repoAddressToSelector","statuses","React","paginationProps","useCursorPaginatedQuery","nextCursorForResult","data","instigationStateOrError","__typename","ticks","PAGE_SIZE","id","getResultArray","variables","query","TICK_HISTORY_QUERY","pageSize","useQueryRefreshAtInterval","FIFTEEN_SECONDS","state","hasPrevCursor","length","start","timestamp","end","endTimestamp","undefined","Array","from","reset","loading","padding","vertical","Spinner","purpose","PythonErrorInfo","error","justifyContent","NonIdealState","title","instigationType","horizontal","direction","StatusFilter","onChange","TableWrapper","InstigationType","SENSOR","tick","TickRow","onShowDetails","onShowLogs","marginTop","CursorHistoryControls","TickDetailsDialog","tickId","TickLogDialog","items","key","label","activeItem","find","Select","popoverProps","position","filterable","itemRenderer","item","props","MenuItem","active","modifiers","handleClick","text","itemListRenderer","renderItem","filteredItems","renderedItems","filter","Boolean","Menu","onItemSelect","rightIcon","minWidth","display","TickHistoryTimeline","onHighlightRunIds","beforeTimestamp","afterTimestamp","selectedTickId","setSelectedTickId","encode","decode","qs","pollingPaused","pausePolling","useQuery","limit","notifyOnNetworkStatusChange","top","border","Subheading","onTickClick","LiveTickTimeline","onHoverTick","onTickHover","runIds","onSelectTick","exactRange","addedPartitions","deletedPartitions","requests","dynamicPartitionsRequestResults","countPartitionsAddedOrDeleted","DynamicPartitionsRequestType","ADD_PARTITIONS","DELETE_PARTITIONS","isStuckStarted","isStuckStartedTick","TimestampDisplay","timeFormat","showTimezone","showSeconds","TickStatusTag","TimeElapsed","startUnix","endUnix","Date","now","cursor","fontFamily","FontFamily","monospace","fontSize","maxWidth","overflow","MiddleTruncate","humanizeSensorCursor","CopyIconButton","value","ButtonLink","runs","RunStatusLink","run","requestedAssetMaterializationCount","Caption","span","ifPlural","RUN_STATUS_FRAGMENT","TICK_TAG_FRAGMENT","HISTORY_TICK_FRAGMENT","styled","THREE_DAYS","type","reduce","sum","partitionKeys","showErrors","setShowErrors","tag","useMemo","requestedItem","Tag","intent","BaseTag","fillColor","runKeys","message","skipReason","targetTagName","count","successTag","Dialog","DialogBody","DialogFooter","topBorder","YAML_SYNTAX_INVALID","onlyKeyAndValue","buildExecutionParamsListSensor","sensorExecutionData","sensorSelector","executionParamsList","evaluationResult","forEach","configYamlOrEmpty","sanitizeConfigYamlString","yaml","showCustomAlert","repositoryLocationName","repositoryName","executionParams","runConfigData","selector","assetSelection","assetCheckSelection","solidSelection","executionMetadata","push","scheduleExecutionData","scheduleSelector","SENSOR_FRAGMENT","INSTIGATION_STATE_FRAGMENT","SensorInfo","sensorDaemonStatus","assetDaemonStatus","boxProps","warnForSensor","healthy","required","warnForAssets","Alert","description","a","href","target","rel","SensorPreviousRuns","sensor","DagsterTag","SensorName","RepositoryLabelTag","repoAddressAsTag","RunsFeedTableWithFilters","includeRunsFromBackfills","actionBarComponents","SensorRoot","selectionQueryResult","useTrackPageView","sensorName","useParams","useDocumentTitle","setStatuses","timeRange","selectedTab","setSelectedTab","view","raw","SENSOR_ROOT_QUERY","SENSOR_ASSET_SELECTIONS_QUERY","refreshState1","refreshState2","refreshState","useMergedRefresh","ButtonGroup","activeItems","Set","buttons","margin","color","sensorOrError","Redirect","to","instance","isAutomationSensor","sensorType","SensorType","AUTO_MATERIALIZE","AUTOMATION","daemonHealth","Page","SensorDetails","INSTANCE_HEALTH_FRAGMENT","QueryfulTickLogsTable","background","zIndex","TICK_LOG_EVENTS_QUERY","events","logEvents","height","SpinnerWithText","InstigationEventLogTable","instigationLoggingDocsUrl","action","ExternalAnchorButton","INSTIGATION_EVENT_LOG_FRAGMENT","AutomationTargetList","automationType","targets","visibleTargets","isHiddenAssetGroupJob","AssetSelectionTag","tooltipText","isThisThingAJob","showDialog","setShowDialog","assetsOrError","checks","assets","assetsWithAMP","assetsWithoutAMP","nodes","assetChecks","slice","sort","sortItemAssetCheck","sortItemAssetKey","asset","definition","automationCondition","initialTab","useEffect","assetSelectionString","isAllAssets","ALL_ASSETS_STRING","Link","assetDetailsPathForKey","displayNameForAssetKey","assetDetailsPathForAssetCheck","labelForAssetCheck","splitConditioned","canOutsideClickClose","canEscapeKeyClose","Subtitle2","Mono","Tabs","selectedTabId","Tab","disabled","maxHeight","minHeight","VirtualizedItemListForDialog","renderItemAssetCheck","itemBorders","renderItemAssetKey","COLOR_MAP","HoverColorMap","MINUTE","tickGrid","timeAfter","setNow","isPaused","setPaused","interval","setInterval","REFRESH_INTERVAL","clearInterval","maxX","minX","showNowLine","fullRange","viewport","containerProps","useViewport","ticksReversed","reverse","ticksToDisplay","i","startX","getX","viewportWidth","endX","Math","max","MIN_WIDTH","tickGridDelta","timeTickGridDelta","startTickGridX","ceil","numTicks","numLabels","gridTicks","ii","time","x","showLabel","marginRight","TicksWrapper","GridTick","transform","GridTickLine","GridTickTime","Timestamp","ms","Tick","onMouseEnter","onMouseLeave","TickTooltip","NowIndicator","TimeAxisWrapper","memo","startTime","dayjs","endTime","elapsedTime","as","unix","useLaunchMultipleRunsWithTelemetry","launchMultipleRuns","useMutation","LAUNCH_MULTIPLE_RUNS_MUTATION","logTelemetry","useTelemetryAction","history","useHistory","useCallback","behavior","isArray","jobNames","params","includes","metadata","opSelection","finalized","paramsWithUIExecutionTags","result","handleLaunchMultipleResult","TelemetryAction","LAUNCH_MULTIPLE_RUNS","console","showLaunchError","SensorAlertDetails","SensorMonitoredAssets","assetKeys","AssetLink","path","join","SensorResetButton","permissions","canStartSensor","canStopSensor","usePermissionsForLocation","location","resetSensor","toggleOnInFlight","RESET_SENSOR_MUTATION","onCompleted","displaySensorMutationErrors","hasPermission","tooltipContent","defaultStatus","DEFAULT_DISABLED_REASON","wordBreak","DynamicPartitionRequests","includeTitle","rows","partitionsDefName","def","grow","SensorDryRunDialog","SensorDryRun","currentCursor","trackEvent","useTrackEvent","sensorDryRun","EVALUATE_SENSOR_MUTATION","setCursorMutation","SET_CURSOR_MUTATION","createPartition","CREATE_PARTITION_MUTATION","deletePartition","DELETE_DYNAMIC_PARTITIONS_MUTATION","setCursor","submitting","setSubmitting","launching","setLaunching","setError","setSensorExecutionData","dynamicPartitionRequests","dynamicPartitionsRequests","submitTest","selectorData","assertUnreachable","onCommitTickResult","setSensorCursor","showSharedToaster","Group","spacing","underline","launchMultipleRunsWithTelemetry","canApply","onApply","Promise","all","partitionKey","repositorySelector","e","leftButtons","rightButtons","numRunRequests","didSkip","canShow","Grid","pre","marginBottom","SkipReasonNonIdealStateWrapper","br","ComputedCursorGrid","TextInput","placeholder","left","RUN_REQUEST_FRAGMENT","NonIdealStateWrapper","EvaluateTickButtonSensor","showTestTickDialog","setShowTestTickDialog","STANDARD","TIME_FORMAT","startsWith","cursorObj","JSON","parse","Object","entries","pair","k","v","minIntervalSeconds","sensorState","disabledReasons","loadingPermissions","canUpdateSensorCursor","isCursorEditing","setCursorEditing","latestTick","typeSpecificData","lastCursor","running","InstigationStatus","RUNNING","PageHeader","Subtitle1","flexDirection","RepositoryLink","right","QueryRefreshCountdown","MetadataTableWIP","nextTick","TargetCell","SensorSwitch","canReset","humanizeSensorInterval","EditCursorDialog"],"sourceRoot":"","ignoreList":[]}