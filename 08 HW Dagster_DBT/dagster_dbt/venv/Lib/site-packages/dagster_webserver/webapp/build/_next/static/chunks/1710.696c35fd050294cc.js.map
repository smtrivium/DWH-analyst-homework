{"version":3,"file":"static/chunks/1710.696c35fd050294cc.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/InstanceConfig.tsx","webpack://_N_E/../ui-core/src/nav/InstanceWarningIcon.tsx","webpack://_N_E/../ui-core/src/nav/WorkspaceStatus.tsx","webpack://_N_E/../ui-core/src/instance/InstanceTabs.tsx"],"sourcesContent":["import 'codemirror/addon/search/searchcursor';\n\nimport {\n  Box,\n  Code,\n  Colors,\n  PageHeader,\n  Spinner,\n  Subheading,\n  Subtitle1,\n} from '@dagster-io/ui-components';\nimport {StyledRawCodeMirror} from '@dagster-io/ui-components/editor';\nimport CodeMirror from 'codemirror';\nimport {memo, useContext, useMemo} from 'react';\nimport {createGlobalStyle} from 'styled-components';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {InstanceTabs} from './InstanceTabs';\nimport {gql, useQuery} from '../apollo-client';\nimport {InstanceConfigQuery, InstanceConfigQueryVariables} from './types/InstanceConfig.types';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nconst InstanceConfigStyle = createGlobalStyle`\n  .CodeMirror.cm-s-instance-config.cm-s-instance-config {\n    background-color: ${Colors.backgroundDefault()};\n    box-shadow: 0 1px 0 ${Colors.keylineDefault()};\n    color: ${Colors.textDefault()};\n    height: 100%;\n\n    .config-highlight.config-highlight {\n      background-color: ${Colors.backgroundLimeHover()};\n    }\n  }\n`;\n\nexport const InstanceConfigContent = memo(() => {\n  useTrackPageView();\n  useDocumentTitle('Configuration');\n\n  const queryResult = useQuery<InstanceConfigQuery, InstanceConfigQueryVariables>(\n    INSTANCE_CONFIG_QUERY,\n    {\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {data} = queryResult;\n  const config = data?.instance.info;\n\n  const handlers = useMemo(() => {\n    return {\n      onReady: (editor: CodeMirror.Editor) => {\n        const documentHash = document.location.hash;\n        if (documentHash) {\n          const target = new RegExp(`^${documentHash.slice(1)}:`);\n          const cursor = editor.getSearchCursor(target);\n          const found = cursor.findNext();\n          if (found) {\n            editor.markText(cursor.from(), cursor.to(), {className: 'config-highlight'});\n            editor.scrollIntoView(cursor.from());\n          }\n        }\n      },\n    };\n  }, []);\n\n  if (!data) {\n    return (\n      <Box padding={{vertical: 64}}>\n        <Spinner purpose=\"section\" />\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <InstanceConfigStyle />\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        border=\"bottom\"\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Subheading>\n          Dagster version: <Code style={{fontSize: '16px'}}>{data.version}</Code>\n        </Subheading>\n        <QueryRefreshCountdown refreshState={refreshState} />\n      </Box>\n      {/* Div wrapper on CodeMirror to allow entire page to scroll */}\n      <div style={{flex: 1, overflow: 'hidden'}}>\n        <StyledRawCodeMirror\n          value={config || ''}\n          options={{readOnly: true, lineNumbers: true, mode: 'yaml'}}\n          handlers={handlers}\n          theme={['instance-config']}\n        />\n      </div>\n    </>\n  );\n});\n\nexport const InstanceConfigRoot = () => {\n  const {pageTitle} = useContext(InstancePageContext);\n  return (\n    <>\n      <PageHeader title={<Subtitle1>{pageTitle}</Subtitle1>} tabs={<InstanceTabs tab=\"config\" />} />\n      <InstanceConfigContent />\n    </>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default InstanceConfigRoot;\n\nexport const INSTANCE_CONFIG_QUERY = gql`\n  query InstanceConfigQuery {\n    version\n    instance {\n      id\n      info\n    }\n  }\n`;\n","import {Colors, Icon} from '@dagster-io/ui-components';\nimport {memo, useContext} from 'react';\n\nimport {WarningTooltip} from './WarningTooltip';\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nexport const InstanceWarningIcon = memo(() => {\n  const {daemons} = useContext(DeploymentStatusContext);\n\n  if (!daemons) {\n    return null;\n  }\n\n  return (\n    <WarningTooltip\n      content={daemons.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.accentYellow()} />\n    </WarningTooltip>\n  );\n});\n","import {Colors, Icon, Spinner, Tooltip} from '@dagster-io/ui-components';\nimport {memo, useContext} from 'react';\n\nimport {WarningTooltip} from './WarningTooltip';\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nexport const WorkspaceStatus = memo(({placeholder}: {placeholder: boolean}) => {\n  const {codeLocations} = useContext(DeploymentStatusContext);\n\n  if (!codeLocations) {\n    return placeholder ? <div style={{width: '16px'}} /> : null;\n  }\n\n  if (codeLocations.type === 'spinner') {\n    return (\n      <Tooltip content={codeLocations.content} placement=\"bottom\">\n        <Spinner purpose=\"body-text\" fillColor={Colors.accentGray()} />\n      </Tooltip>\n    );\n  }\n\n  return (\n    <WarningTooltip\n      content={codeLocations.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.accentYellow()} />\n    </WarningTooltip>\n  );\n});\n","import {Box, Tabs} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {useCanSeeConfig} from './useCanSeeConfig';\nimport {QueryResult} from '../apollo-client';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {InstanceWarningIcon} from '../nav/InstanceWarningIcon';\nimport {WorkspaceStatus} from '../nav/WorkspaceStatus';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const InstanceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const {healthTitle} = useContext(InstancePageContext);\n  const canSeeConfig = useCanSeeConfig();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink\n          id=\"locations\"\n          title=\"Code locations\"\n          to=\"/locations\"\n          icon={<WorkspaceStatus placeholder={false} />}\n        />\n        <TabLink id=\"health\" title={healthTitle} to=\"/health\" icon={<InstanceWarningIcon />} />\n        {canSeeConfig ? <TabLink id=\"concurrency\" title=\"Concurrency\" to=\"/concurrency\" /> : null}\n        {canSeeConfig ? <TabLink id=\"config\" title=\"Configuration\" to=\"/config\" /> : null}\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n"],"names":["InstanceConfigStyle","createGlobalStyle","Colors","InstanceConfigContent","memo","useTrackPageView","useDocumentTitle","queryResult","useQuery","INSTANCE_CONFIG_QUERY","notifyOnNetworkStatusChange","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","data","config","instance","info","handlers","useMemo","onReady","documentHash","document","location","hash","target","RegExp","slice","cursor","editor","getSearchCursor","findNext","markText","from","to","className","scrollIntoView","Box","padding","vertical","horizontal","border","flex","direction","alignItems","justifyContent","Subheading","Code","style","fontSize","version","QueryRefreshCountdown","div","overflow","StyledRawCodeMirror","value","options","readOnly","lineNumbers","mode","theme","Spinner","purpose","pageTitle","useContext","InstancePageContext","PageHeader","title","Subtitle1","tabs","InstanceTabs","tab","InstanceConfigRoot","gql","InstanceWarningIcon","daemons","DeploymentStatusContext","WarningTooltip","content","position","modifiers","offset","enabled","Icon","name","color","WorkspaceStatus","placeholder","codeLocations","type","Tooltip","placement","fillColor","width","props","healthTitle","canSeeConfig","useCanSeeConfig","Tabs","selectedTabId","TabLink","id","icon","bottom"],"sourceRoot":"","ignoreList":[]}