{"version":3,"file":"static/chunks/3496.a893aea9163eeaf5.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/LastRunSummary.tsx","webpack://_N_E/../ui-core/src/instance/StepSummaryForRun.tsx","webpack://_N_E/../ui-core/src/instigation/TickDetailsDialog.tsx","webpack://_N_E/../ui-core/src/instigation/TickMaterializationsTable.tsx","webpack://_N_E/../ui-core/src/instigation/InstigationTick.tsx","webpack://_N_E/../ui-core/src/instigation/InstigationUtils.tsx","webpack://_N_E/../ui-core/src/runs/RunStatusPez.tsx"],"sourcesContent":["import {Box, Popover, Tag} from '@dagster-io/ui-components';\nimport {memo, useMemo} from 'react';\n\nimport {StepSummaryForRun} from './StepSummaryForRun';\nimport {RunStatus} from '../graphql/types';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunStatusOverlay} from '../runs/RunStatusPez';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\nimport {RunStateSummary, RunTime} from '../runs/RunUtils';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {AnchorButton} from '../ui/AnchorButton';\n\ninterface Props {\n  name: string;\n  run: RunTimeFragment;\n  showHover?: boolean;\n  showButton?: boolean;\n  showSummary?: boolean;\n}\n\nexport const LastRunSummary = memo(\n  ({name, run, showHover = false, showButton = true, showSummary = true}: Props) => {\n    const {status} = run;\n\n    const intent = useMemo(() => {\n      switch (status) {\n        case RunStatus.SUCCESS:\n          return 'success';\n        case RunStatus.CANCELED:\n        case RunStatus.CANCELING:\n        case RunStatus.FAILURE:\n          return 'danger';\n        default:\n          return 'none';\n      }\n    }, [status]);\n\n    const tag = () => {\n      const tagElement = (\n        <Tag intent={intent}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n            <RunStatusIndicator status={run.status} size={10} />\n            <RunTime run={run} />\n          </Box>\n        </Tag>\n      );\n\n      if (!showHover) {\n        return tagElement;\n      }\n\n      return (\n        <Popover\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={name} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          {tagElement}\n        </Popover>\n      );\n    };\n\n    return (\n      <Box\n        flex={{\n          direction: 'row',\n          justifyContent: 'space-between',\n          alignItems: 'flex-start',\n          gap: 16,\n        }}\n      >\n        <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 4}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            {tag()}\n            {showSummary ? <RunStateSummary run={run} /> : null}\n          </Box>\n          {showSummary && (failedStatuses.has(run.status) || inProgressStatuses.has(run.status)) ? (\n            <StepSummaryForRun runId={run.id} />\n          ) : undefined}\n        </Box>\n        {showButton ? <AnchorButton to={`/runs/${run.id}`}>View run</AnchorButton> : null}\n      </Box>\n    );\n  },\n);\n","import {Caption, Colors} from '@dagster-io/ui-components';\nimport qs from 'qs';\nimport {useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {gql, useQuery} from '../apollo-client';\nimport {\n  StepSummaryForRunQuery,\n  StepSummaryForRunQueryVariables,\n} from './types/StepSummaryForRun.types';\nimport {StepEventStatus} from '../graphql/types';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\n\ninterface Props {\n  runId: string;\n}\n\nexport const StepSummaryForRun = (props: Props) => {\n  const {runId} = props;\n  const queryResult = useQuery<StepSummaryForRunQuery, StepSummaryForRunQueryVariables>(\n    STEP_SUMMARY_FOR_RUN_QUERY,\n    {\n      variables: {runId},\n    },\n  );\n  const {data} = queryResult;\n\n  const run = data?.pipelineRunOrError;\n  const status = run?.__typename === 'Run' ? run.status : null;\n\n  const relevantSteps = useMemo(() => {\n    if (run?.__typename !== 'Run') {\n      return [];\n    }\n\n    const {status} = run;\n    if (failedStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.FAILURE);\n    }\n\n    if (inProgressStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.IN_PROGRESS);\n    }\n\n    return [];\n  }, [run]);\n\n  const stepCount = relevantSteps.length;\n\n  if (!stepCount || !status) {\n    return null;\n  }\n\n  if (failedStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.textLight()}>\n          Failed at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.textLight()}>\n        Failed at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  if (inProgressStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.textLight()}>\n          In progress at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.textLight()}>\n        In progress at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  return null;\n};\n\nconst STEP_SUMMARY_FOR_RUN_QUERY = gql`\n  query StepSummaryForRunQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        stepStats {\n          endTime\n          stepKey\n          status\n        }\n      }\n    }\n  }\n`;\n","import 'chartjs-adapter-date-fns';\nimport {\n  Box,\n  Button,\n  ButtonLink,\n  Dialog,\n  DialogFooter,\n  DialogHeader,\n  MiddleTruncate,\n  NonIdealState,\n  SpinnerWithText,\n  Subtitle2,\n  Table,\n  Tag,\n} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\n\nimport {RunList, TargetedRunList} from './InstigationTick';\nimport {HISTORY_TICK_FRAGMENT} from './InstigationUtils';\nimport {TickMaterializationsTable} from './TickMaterializationsTable';\nimport {gql, useQuery} from '../apollo-client';\nimport {HistoryTickFragment} from './types/InstigationUtils.types';\nimport {SelectedTickQuery, SelectedTickQueryVariables} from './types/TickDetailsDialog.types';\nimport {showCustomAlert} from '../app/CustomAlertProvider';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {formatElapsedTimeWithoutMsec} from '../app/Util';\nimport {Timestamp} from '../app/time/Timestamp';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {\n  DynamicPartitionsRequestResult,\n  DynamicPartitionsRequestType,\n  InstigationSelector,\n  InstigationTickStatus,\n} from '../graphql/types';\nimport {TimestampDisplay} from '../schedules/TimestampDisplay';\nimport {TickResultType} from '../ticks/TickStatusTag';\n\ninterface DialogProps extends InnerProps {\n  onClose: () => void;\n  isOpen: boolean;\n}\n\nexport const TickDetailsDialog = ({\n  tickId,\n  tickResultType,\n  isOpen,\n  instigationSelector,\n  onClose,\n}: DialogProps) => {\n  return (\n    <Dialog\n      isOpen={isOpen}\n      onClose={onClose}\n      style={{width: '80vw', maxWidth: '1200px', minWidth: '600px'}}\n    >\n      <TickDetailsDialogImpl\n        tickId={tickId}\n        tickResultType={tickResultType}\n        instigationSelector={instigationSelector}\n      />\n      <DialogFooter topBorder>\n        <Button onClick={onClose}>Close</Button>\n      </DialogFooter>\n    </Dialog>\n  );\n};\n\ninterface InnerProps {\n  tickId: string | undefined;\n  tickResultType: TickResultType;\n  instigationSelector: InstigationSelector;\n}\n\nconst TickDetailsDialogImpl = ({tickId, tickResultType, instigationSelector}: InnerProps) => {\n  const {data, loading} = useQuery<SelectedTickQuery, SelectedTickQueryVariables>(\n    JOB_SELECTED_TICK_QUERY,\n    {\n      variables: {instigationSelector, tickId: tickId || ''},\n      skip: !tickId,\n    },\n  );\n\n  const tick =\n    data?.instigationStateOrError.__typename === 'InstigationState'\n      ? data?.instigationStateOrError.tick\n      : undefined;\n\n  const [addedPartitionRequests, deletedPartitionRequests] = useMemo(() => {\n    const added = tick?.dynamicPartitionsRequestResults.filter(\n      (request) =>\n        request.type === DynamicPartitionsRequestType.ADD_PARTITIONS &&\n        request.partitionKeys?.length,\n    );\n    const deleted = tick?.dynamicPartitionsRequestResults.filter(\n      (request) =>\n        request.type === DynamicPartitionsRequestType.DELETE_PARTITIONS &&\n        request.partitionKeys?.length,\n    );\n    return [added, deleted];\n  }, [tick?.dynamicPartitionsRequestResults]);\n\n  if (loading) {\n    return (\n      <>\n        <DialogHeader label={`Tick for ${instigationSelector.name}`} />\n        <Box style={{padding: 64}} flex={{alignItems: 'center', justifyContent: 'center'}}>\n          <SpinnerWithText label=\"Loading tick details…\" />\n        </Box>\n      </>\n    );\n  }\n\n  if (!tick) {\n    return (\n      <>\n        <DialogHeader label={`Tick for ${instigationSelector.name}`} />\n        <Box style={{padding: 64}} flex={{alignItems: 'center', justifyContent: 'center'}}>\n          <NonIdealState\n            icon=\"no-results\"\n            title=\"Tick details not found\"\n            description=\"Details for this tick could not be found.\"\n          />\n        </Box>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <DialogHeader\n        label={\n          <>\n            <span>Tick for {instigationSelector.name}: </span>\n            <TimestampDisplay\n              timestamp={tick.timestamp}\n              timeFormat={{showTimezone: false, showSeconds: true}}\n            />\n          </>\n        }\n      />\n      <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n        <TickDetailSummary tick={tick} tickResultType={tickResultType} />\n      </Box>\n      {tickResultType === 'materializations' ? <TickMaterializationsTable tick={tick} /> : null}\n      {tickResultType === 'runs' ? (\n        <div style={{height: '500px', overflowY: 'auto'}}>\n          {tick.runIds.length ? (\n            <>\n              <Box padding={{vertical: 16, horizontal: 24}} border=\"bottom\">\n                <Subtitle2>Requested runs</Subtitle2>\n              </Box>\n              <RunList runIds={tick.runIds} />\n            </>\n          ) : tick.originRunIds.length ? (\n            <TargetedRunList originRunIds={tick.originRunIds} />\n          ) : null}\n          {addedPartitionRequests?.length ? (\n            <>\n              <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n                <Subtitle2>Added partitions</Subtitle2>\n              </Box>\n              <PartitionsTable partitions={addedPartitionRequests} />\n            </>\n          ) : null}\n          {deletedPartitionRequests?.length ? (\n            <>\n              <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n                <Subtitle2>Deleted partitions</Subtitle2>\n              </Box>\n              <PartitionsTable partitions={deletedPartitionRequests} />\n            </>\n          ) : null}\n          {tick.error ? (\n            <Box padding={24}>\n              <PythonErrorInfo error={tick.error} />\n            </Box>\n          ) : null}\n          {tick.skipReason ? (\n            <Box padding={24}>\n              <strong>Skip reason:</strong> {tick.skipReason}\n            </Box>\n          ) : null}\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport function TickDetailSummary({\n  tick,\n  tickResultType,\n}: {\n  tick: HistoryTickFragment | AssetDaemonTickFragment;\n  tickResultType: TickResultType;\n}) {\n  const intent = useMemo(() => {\n    switch (tick?.status) {\n      case InstigationTickStatus.FAILURE:\n        return 'danger';\n      case InstigationTickStatus.STARTED:\n        return 'primary';\n      case InstigationTickStatus.SUCCESS:\n        return 'success';\n    }\n    return undefined;\n  }, [tick]);\n\n  return (\n    <>\n      <div style={{display: 'grid', gridTemplateColumns: 'repeat(3, minmax(0, 1fr))', gap: 12}}>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <Subtitle2>Status</Subtitle2>\n          <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n            <Tag intent={intent}>\n              {tick.status === InstigationTickStatus.STARTED ? (\n                'Evaluating…'\n              ) : (\n                <>\n                  {(tickResultType === 'materializations' || !('runIds' in tick)\n                    ? tick.requestedAssetMaterializationCount\n                    : tick.runIds.length) ?? 0}{' '}\n                  requested\n                </>\n              )}\n            </Tag>\n            {tick.error ? (\n              <ButtonLink\n                onClick={() => {\n                  showCustomAlert({\n                    title: 'Tick error',\n                    body: <PythonErrorInfo error={tick.error!} />,\n                  });\n                }}\n              >\n                View error\n              </ButtonLink>\n            ) : null}\n          </Box>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <Subtitle2>Timestamp</Subtitle2>\n          <div>\n            {tick ? (\n              <Timestamp timestamp={{unix: tick.timestamp}} timeFormat={{showTimezone: true}} />\n            ) : (\n              '–'\n            )}\n          </div>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <Subtitle2>Duration</Subtitle2>\n          <div>\n            {tick?.endTimestamp\n              ? formatElapsedTimeWithoutMsec(tick.endTimestamp * 1000 - tick.timestamp * 1000)\n              : '\\u2013'}\n          </div>\n        </Box>\n      </div>\n    </>\n  );\n}\n\nfunction PartitionsTable({partitions}: {partitions: DynamicPartitionsRequestResult[]}) {\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <th>Partition definition</th>\n          <th>Partition</th>\n        </tr>\n      </thead>\n      <tbody>\n        {partitions.flatMap((partition) =>\n          partition.partitionKeys?.map((key) => (\n            <tr key={key}>\n              <td>\n                <MiddleTruncate text={partition.partitionsDefName} />\n              </td>\n              <td>\n                <MiddleTruncate text={key} />\n              </td>\n            </tr>\n          )),\n        )}\n      </tbody>\n    </Table>\n  );\n}\n\nconst JOB_SELECTED_TICK_QUERY = gql`\n  query SelectedTickQuery($instigationSelector: InstigationSelector!, $tickId: ID!) {\n    instigationStateOrError(instigationSelector: $instigationSelector) {\n      ... on InstigationState {\n        id\n        tick(tickId: $tickId) {\n          id\n          ...HistoryTick\n\n          requestedAssetKeys {\n            path\n          }\n          requestedAssetMaterializationCount\n          autoMaterializeAssetEvaluationId\n          requestedMaterializationsForAssets {\n            assetKey {\n              path\n            }\n            partitionKeys\n          }\n        }\n      }\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${HISTORY_TICK_FRAGMENT}\n`;\n","import {\n  Box,\n  ButtonLink,\n  Caption,\n  Colors,\n  HeaderCell,\n  Icon,\n  Inner,\n  Row,\n  RowCell,\n  Spinner,\n  Subtitle2,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {useMemo, useRef, useState} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {gql, useQuery} from '../apollo-client';\nimport {\n  AssetGroupAndLocationQuery,\n  AssetGroupAndLocationQueryVariables,\n} from './types/TickMaterializationsTable.types';\nimport {tokenForAssetKey} from '../asset-graph/Utils';\nimport {AssetLink} from '../assets/AssetLink';\nimport {AssetKeysDialogEmptyState} from '../assets/AutoMaterializePolicyPage/AssetKeysDialog';\nimport {EvaluationDetailDialog} from '../assets/AutoMaterializePolicyPage/EvaluationDetailDialog';\nimport {AssetDaemonTickFragment} from '../assets/auto-materialization/types/AssetDaemonTicksQuery.types';\nimport {AssetKeyInput} from '../graphql/types';\nimport {Container, HeaderRow} from '../ui/VirtualizedTable';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\nconst TEMPLATE_COLUMNS = '30% 17% 53%';\n\nexport const TickMaterializationsTable = ({\n  tick,\n}: {\n  tick: Pick<\n    AssetDaemonTickFragment,\n    'requestedAssetKeys' | 'requestedMaterializationsForAssets' | 'autoMaterializeAssetEvaluationId'\n  > | null;\n}) => {\n  const [queryString, setQueryString] = useState('');\n\n  const filteredAssetKeys = useMemo(\n    () =>\n      tick\n        ? tick.requestedAssetKeys.filter((assetKey) =>\n            assetKey.path.join('/').includes(queryString),\n          )\n        : [],\n    [tick, queryString],\n  );\n\n  const parentRef = useRef<HTMLDivElement | null>(null);\n  const rowVirtualizer = useVirtualizer({\n    count: filteredAssetKeys.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 34,\n    overscan: 10,\n  });\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  const assetKeyToPartitionsMap = useMemo(() => {\n    const map: Record<string, string[]> = {};\n    tick?.requestedMaterializationsForAssets.forEach(({assetKey, partitionKeys}) => {\n      map[tokenForAssetKey(assetKey)] = partitionKeys;\n    });\n    return map;\n  }, [tick?.requestedMaterializationsForAssets]);\n\n  const content = () => {\n    if (queryString && !filteredAssetKeys.length) {\n      return (\n        <AssetKeysDialogEmptyState\n          title=\"No matching asset keys\"\n          description={\n            <>\n              No matching asset keys for <strong>{queryString}</strong>\n            </>\n          }\n        />\n      );\n    }\n    if (!tick?.requestedAssetKeys.length) {\n      return (\n        <Box padding={{vertical: 12, horizontal: 24}}>\n          <Caption color={Colors.textLight()}>None</Caption>\n        </Box>\n      );\n    }\n    return (\n      <Container ref={parentRef}>\n        <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n          <HeaderCell>Asset</HeaderCell>\n          <HeaderCell>Group</HeaderCell>\n          <HeaderCell>Result</HeaderCell>\n        </HeaderRow>\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            const assetKey = filteredAssetKeys[index]!;\n            return (\n              <AssetDetailRow\n                key={key}\n                $height={size}\n                $start={start}\n                assetKey={assetKey}\n                partitionKeys={assetKeyToPartitionsMap[tokenForAssetKey(assetKey)]}\n                evaluationId={tick.autoMaterializeAssetEvaluationId!}\n              />\n            );\n          })}\n        </Inner>\n      </Container>\n    );\n  };\n\n  return (\n    <Box style={{height: '500px'}} flex={{direction: 'column'}}>\n      <Box\n        padding={{vertical: 12, horizontal: 24}}\n        flex={{justifyContent: 'space-between', alignItems: 'center'}}\n        border=\"bottom\"\n      >\n        <Subtitle2>Requested materializations</Subtitle2>\n        <TextInput\n          icon=\"search\"\n          value={queryString}\n          onChange={(e) => setQueryString(e.target.value)}\n          placeholder=\"Filter by asset key…\"\n          style={{width: '252px'}}\n        />\n      </Box>\n      {content()}\n    </Box>\n  );\n};\n\nconst AssetDetailRow = ({\n  $start,\n  $height,\n  assetKey,\n  partitionKeys,\n  evaluationId,\n}: {\n  $start: number;\n  $height: number;\n  assetKey: AssetKeyInput;\n  partitionKeys?: string[];\n  evaluationId: string;\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const numMaterializations = partitionKeys?.length || 1;\n  const queryResult = useQuery<AssetGroupAndLocationQuery, AssetGroupAndLocationQueryVariables>(\n    ASSET_GROUP_QUERY,\n    {\n      fetchPolicy: 'cache-and-network',\n      variables: {\n        assetKey: {path: assetKey.path},\n      },\n    },\n  );\n  const {data} = queryResult;\n\n  const asset = data?.assetOrError.__typename === 'Asset' ? data.assetOrError : null;\n  const definition = asset?.definition;\n  const repoAddress = definition\n    ? buildRepoAddress(definition.repository.name, definition.repository.location.name)\n    : null;\n\n  return (\n    <Row $start={$start} $height={$height}>\n      <RowGrid border=\"bottom\">\n        <RowCell>\n          <AssetLink path={assetKey.path} icon=\"asset\" textStyle=\"middle-truncate\" />\n        </RowCell>\n        <RowCell>\n          {data ? (\n            definition && definition.groupName && repoAddress ? (\n              <Link\n                to={workspacePathFromAddress(repoAddress, `/asset-groups/${definition.groupName}`)}\n              >\n                <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                  <Icon color={Colors.textLight()} name=\"asset_group\" />\n                  {definition.groupName}\n                </Box>\n              </Link>\n            ) : (\n              <Caption color={Colors.textLight()}>Asset not found</Caption>\n            )\n          ) : (\n            <Spinner purpose=\"body-text\" />\n          )}\n        </RowCell>\n        <RowCell>\n          {definition ? (\n            <>\n              <ButtonLink onClick={() => setIsOpen(true)}>\n                {numMaterializations} materialization{numMaterializations === 1 ? '' : 's'}{' '}\n                requested\n              </ButtonLink>\n              <EvaluationDetailDialog\n                isOpen={isOpen}\n                onClose={() => setIsOpen(false)}\n                evaluationID={evaluationId}\n                assetKeyPath={assetKey.path}\n              />\n            </>\n          ) : null}\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n  > * {\n    justify-content: center;\n  }\n`;\n\nconst ASSET_GROUP_QUERY = gql`\n  query AssetGroupAndLocationQuery($assetKey: AssetKeyInput!) {\n    assetOrError(assetKey: $assetKey) {\n      ... on Asset {\n        id\n        definition {\n          id\n          groupName\n          repository {\n            id\n            name\n            location {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import {Body, Box, Colors, Group, Icon, NonIdealState, Tooltip} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\n\nimport {gql} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {RunsFeedTableWithFilters} from '../runs/RunsFeedTable';\n\nexport const RunList = ({runIds}: {runIds: string[]}) => {\n  const filter = useMemo(\n    () => ({\n      runIds,\n    }),\n    [runIds],\n  );\n\n  return (\n    <Box padding={{bottom: 8}}>\n      <RunsFeedTableWithFilters filter={filter} includeRunsFromBackfills />\n    </Box>\n  );\n};\n\nexport const TargetedRunList = ({originRunIds}: {originRunIds?: string[]}) => {\n  if (!originRunIds || !originRunIds.length) {\n    return null;\n  }\n  return (\n    <Group direction=\"column\" spacing={16}>\n      <Box padding={12} border={{side: 'bottom', color: Colors.textLighter()}}>\n        <Body>\n          Targeted Runs\n          <Tooltip content=\"Runs this tick reacted on and reported back to.\">\n            <Icon name=\"info\" color={Colors.textLight()} />\n          </Tooltip>\n        </Body>\n        <RunList runIds={originRunIds} />\n      </Box>\n      <Box padding={12} margin={{bottom: 8}}>\n        <Body>\n          Requested Runs\n          <Tooltip content=\"Runs launched by the run requests in this tick.\">\n            <Icon name=\"info\" color={Colors.textLight()} />\n          </Tooltip>\n        </Body>\n        <NonIdealState\n          icon=\"sensors\"\n          title=\"No runs to display\"\n          description=\"This sensor does not target a pipeline or job.\"\n        />\n      </Box>\n    </Group>\n  );\n};\n\nexport const TICK_TAG_FRAGMENT = gql`\n  fragment TickTagFragment on InstigationTick {\n    id\n    status\n    timestamp\n    skipReason\n    runIds\n    runKeys\n    error {\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Colors, Group, Mono} from '@dagster-io/ui-components';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {TICK_TAG_FRAGMENT} from './InstigationTick';\nimport {gql} from '../apollo-client';\nimport {InstigationStateFragment, RunStatusFragment} from './types/InstigationUtils.types';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RUN_TIME_FRAGMENT, titleForRun} from '../runs/RunUtils';\n\nexport const InstigatedRunStatus = ({\n  instigationState,\n}: {\n  instigationState: InstigationStateFragment;\n}) => {\n  const [instigationRun] = instigationState.runs;\n  if (!instigationRun) {\n    return <span style={{color: Colors.textLight()}}>None</span>;\n  }\n  return <LastRunSummary run={instigationRun} name={instigationState.name} />;\n};\n\nexport const RunStatusLink = ({run}: {run: RunStatusFragment}) => (\n  <Group direction=\"row\" spacing={4} alignItems=\"center\">\n    <RunStatusIndicator status={run.status} />\n    <Link to={`/runs/${run.id}`} target=\"_blank\" rel=\"noreferrer\">\n      <Mono>{titleForRun({id: run.id})}</Mono>\n    </Link>\n  </Group>\n);\n\nexport const RUN_STATUS_FRAGMENT = gql`\n  fragment RunStatusFragment on Run {\n    id\n    status\n  }\n`;\n\nexport const INSTIGATION_STATE_FRAGMENT = gql`\n  fragment InstigationStateFragment on InstigationState {\n    id\n    selectorId\n    name\n    instigationType\n    status\n    hasStartPermission\n    hasStopPermission\n    repositoryName\n    repositoryLocationName\n    typeSpecificData {\n      ... on SensorData {\n        lastRunKey\n        lastCursor\n      }\n      ... on ScheduleData {\n        cronSchedule\n      }\n    }\n    runs(limit: 1) {\n      id\n      ...RunStatusFragment\n      ...RunTimeFragment\n    }\n    status\n    ticks(limit: 1) {\n      id\n      cursor\n      ...TickTagFragment\n    }\n    runningCount\n  }\n\n  ${RUN_STATUS_FRAGMENT}\n  ${RUN_TIME_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n`;\n\nexport const StatusTable = styled.table`\n  font-size: 13px;\n  border-spacing: 0;\n\n  &&&&& tr {\n    box-shadow: none;\n  }\n\n  &&&&& tbody > tr > td {\n    background: transparent;\n    box-shadow: none !important;\n    padding: 1px 0;\n  }\n\n  &&&&& tbody > tr > td:first-child {\n    color: ${Colors.textLight()};\n  }\n`;\n\nexport const DYNAMIC_PARTITIONS_REQUEST_RESULT_FRAGMENT = gql`\n  fragment DynamicPartitionsRequestResultFragment on DynamicPartitionsRequestResult {\n    partitionsDefName\n    partitionKeys\n    skippedPartitionKeys\n    type\n  }\n`;\n\nexport const HISTORY_TICK_FRAGMENT = gql`\n  fragment HistoryTick on InstigationTick {\n    id\n    tickId\n    status\n    timestamp\n    endTimestamp\n    cursor\n    instigationType\n    skipReason\n    requestedAssetMaterializationCount\n    runIds\n    runs {\n      id\n      status\n      ...RunStatusFragment\n    }\n    originRunIds\n    error {\n      ...PythonErrorFragment\n    }\n    logKey\n    ...TickTagFragment\n    dynamicPartitionsRequestResults {\n      ...DynamicPartitionsRequestResultFragment\n    }\n  }\n  ${RUN_STATUS_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${TICK_TAG_FRAGMENT}\n  ${DYNAMIC_PARTITIONS_REQUEST_RESULT_FRAGMENT}\n`;\n","import {Box, CaptionMono, Colors, FontFamily, Popover} from '@dagster-io/ui-components';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {RunStatusIndicator} from './RunStatusDots';\nimport {RUN_STATUS_COLORS} from './RunStatusTag';\nimport {failedStatuses, inProgressStatuses} from './RunStatuses';\nimport {RunStateSummary, RunTime, titleForRun} from './RunUtils';\nimport {RunTimeFragment} from './types/RunUtils.types';\nimport {RunStatus} from '../graphql/types';\nimport {StepSummaryForRun} from '../instance/StepSummaryForRun';\n\nconst MIN_OPACITY = 0.2;\nconst MAX_OPACITY = 1.0;\nconst MIN_OPACITY_STEPS = 3;\n\ninterface Props {\n  opacity?: number;\n  runId: string;\n  status: RunStatus;\n}\n\nexport const RunStatusPez = (props: Props) => {\n  const {status, opacity = MAX_OPACITY} = props;\n  const color = RUN_STATUS_COLORS[status];\n\n  return <Pez $color={color} $opacity={opacity} />;\n};\n\ninterface ListProps {\n  fade: boolean;\n  jobName: string;\n  runs: RunTimeFragment[];\n  forceCount?: number;\n}\n\nexport const RunStatusPezList = (props: ListProps) => {\n  const {fade, jobName, runs, forceCount} = props;\n  const count = runs.length;\n  const countForStep = Math.max(MIN_OPACITY_STEPS, count);\n  const step = (MAX_OPACITY - MIN_OPACITY) / countForStep;\n\n  let items: (RunTimeFragment | null)[] = [...runs];\n  if (forceCount) {\n    if (forceCount > items.length) {\n      items.unshift(...Array(forceCount - items.length).fill(null));\n    } else {\n      items = items.slice(0, forceCount);\n    }\n  }\n\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 2}}>\n      {items.map((run, ii) => {\n        const opacity = fade ? MAX_OPACITY - (count - ii - 1) * step : 1.0;\n        if (!run) {\n          return <Pez key={`empty-${ii}`} $color={Colors.backgroundLighter()} $opacity={opacity} />;\n        }\n\n        return (\n          <Popover\n            key={run.id}\n            position=\"top\"\n            interactionKind=\"hover\"\n            content={\n              <div>\n                <RunStatusOverlay run={run} name={jobName} />\n              </div>\n            }\n            hoverOpenDelay={100}\n          >\n            <RunStatusPez key={run.id} runId={run.id} status={run.status} opacity={opacity} />\n          </Popover>\n        );\n      })}\n    </Box>\n  );\n};\n\ninterface OverlayProps {\n  run: RunTimeFragment;\n  name: string;\n}\n\nexport const RunStatusOverlay = ({name, run}: OverlayProps) => {\n  return (\n    <OverlayContainer>\n      <OverlayTitle>{name}</OverlayTitle>\n      <RunRow>\n        <Box flex={{alignItems: 'center', direction: 'row', gap: 8}}>\n          <RunStatusIndicator status={run.status} />\n          <Link to={`/runs/${run.id}`}>\n            <CaptionMono>{titleForRun(run)}</CaptionMono>\n          </Link>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <RunTime run={run} />\n          <RunStateSummary run={run} />\n        </Box>\n      </RunRow>\n      {failedStatuses.has(run.status) || inProgressStatuses.has(run.status) ? (\n        <SummaryContainer>\n          <StepSummaryForRun runId={run.id} />\n        </SummaryContainer>\n      ) : null}\n    </OverlayContainer>\n  );\n};\n\nconst OverlayContainer = styled.div`\n  padding: 4px;\n  font-size: 12px;\n  width: 240px;\n`;\n\nconst OverlayTitle = styled.div`\n  padding: 8px;\n  box-shadow: inset 0 -1px ${Colors.keylineDefault()};\n  font-family: ${FontFamily.default};\n  font-size: 14px;\n  font-weight: 500;\n  color: ${Colors.textDefault()};\n  max-width: 100%;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  min-width: 0px;\n`;\n\nconst RunRow = styled.div`\n  padding: 8px;\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\n\nconst SummaryContainer = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding: 4px 8px 8px;\n\n  :empty {\n    display: none;\n  }\n`;\n\nconst Pez = styled.div<{$color: string; $opacity: number}>`\n  background-color: ${({$color}) => $color};\n  border-radius: 2px;\n  height: 16px;\n  opacity: ${({$opacity}) => $opacity};\n  width: 8px;\n`;\n"],"names":["LastRunSummary","memo","name","run","showHover","showButton","showSummary","status","intent","useMemo","RunStatus","SUCCESS","CANCELED","CANCELING","FAILURE","Box","flex","direction","justifyContent","alignItems","gap","tag","tagElement","Tag","RunStatusIndicator","size","RunTime","Popover","position","interactionKind","content","div","RunStatusOverlay","hoverOpenDelay","RunStateSummary","failedStatuses","has","inProgressStatuses","StepSummaryForRun","runId","id","undefined","AnchorButton","to","props","data","useQuery","queryResult","STEP_SUMMARY_FOR_RUN_QUERY","variables","pipelineRunOrError","__typename","relevantSteps","stepStats","filter","step","StepEventStatus","IN_PROGRESS","stepCount","length","query","endTime","qs","focusedTime","Math","floor","addQueryPrefix","Caption","color","Colors","Link","stepKey","gql","TickDetailsDialog","tickId","tickResultType","isOpen","instigationSelector","onClose","Dialog","style","width","maxWidth","minWidth","TickDetailsDialogImpl","DialogFooter","topBorder","Button","onClick","loading","JOB_SELECTED_TICK_QUERY","skip","tick","instigationStateOrError","addedPartitionRequests","deletedPartitionRequests","dynamicPartitionsRequestResults","request","type","DynamicPartitionsRequestType","ADD_PARTITIONS","partitionKeys","DELETE_PARTITIONS","DialogHeader","label","padding","SpinnerWithText","span","TimestampDisplay","timestamp","timeFormat","showTimezone","showSeconds","vertical","horizontal","border","TickDetailSummary","TickMaterializationsTable","height","overflowY","runIds","Subtitle2","RunList","originRunIds","TargetedRunList","PartitionsTable","partitions","error","PythonErrorInfo","skipReason","strong","NonIdealState","icon","title","description","InstigationTickStatus","STARTED","display","gridTemplateColumns","requestedAssetMaterializationCount","ButtonLink","showCustomAlert","body","Timestamp","unix","endTimestamp","formatElapsedTimeWithoutMsec","Table","thead","tr","th","tbody","flatMap","partition","map","td","MiddleTruncate","text","partitionsDefName","key","PYTHON_ERROR_FRAGMENT","HISTORY_TICK_FRAGMENT","TEMPLATE_COLUMNS","queryString","setQueryString","useState","filteredAssetKeys","requestedAssetKeys","assetKey","path","join","includes","parentRef","useRef","rowVirtualizer","useVirtualizer","count","getScrollElement","current","estimateSize","overscan","totalHeight","getTotalSize","items","getVirtualItems","assetKeyToPartitionsMap","requestedMaterializationsForAssets","forEach","tokenForAssetKey","TextInput","value","onChange","e","target","placeholder","AssetKeysDialogEmptyState","Container","ref","HeaderRow","templateColumns","sticky","HeaderCell","Inner","$totalHeight","index","start","AssetDetailRow","$height","$start","evaluationId","autoMaterializeAssetEvaluationId","setIsOpen","numMaterializations","ASSET_GROUP_QUERY","fetchPolicy","asset","assetOrError","definition","repoAddress","buildRepoAddress","repository","location","Row","RowGrid","RowCell","AssetLink","textStyle","groupName","workspacePathFromAddress","Icon","Spinner","purpose","EvaluationDetailDialog","evaluationID","assetKeyPath","styled","bottom","RunsFeedTableWithFilters","includeRunsFromBackfills","Group","spacing","side","Body","Tooltip","margin","RunStatusLink","rel","Mono","titleForRun","INSTIGATION_STATE_FRAGMENT","RUN_STATUS_FRAGMENT","RUN_TIME_FRAGMENT","TICK_TAG_FRAGMENT","table","DYNAMIC_PARTITIONS_REQUEST_RESULT_FRAGMENT","RunStatusPez","opacity","RUN_STATUS_COLORS","MAX_OPACITY","Pez","$color","$opacity","RunStatusPezList","fade","jobName","runs","forceCount","max","MIN_OPACITY_STEPS","countForStep","unshift","Array","fill","slice","ii","OverlayContainer","OverlayTitle","RunRow","CaptionMono","SummaryContainer","FontFamily","default"],"sourceRoot":"","ignoreList":[]}