{"version":3,"file":"static/chunks/515.28f5903503993b39.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/nav/InstanceWarningIcon.tsx","webpack://_N_E/../ui-core/src/nav/WorkspaceStatus.tsx","webpack://_N_E/../ui-core/src/instance/InstanceTabs.tsx","webpack://_N_E/../ui-core/src/instance/InstanceHealthPage.tsx"],"sourcesContent":["import {Colors, Icon} from '@dagster-io/ui-components';\nimport {memo, useContext} from 'react';\n\nimport {WarningTooltip} from './WarningTooltip';\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nexport const InstanceWarningIcon = memo(() => {\n  const {daemons} = useContext(DeploymentStatusContext);\n\n  if (!daemons) {\n    return null;\n  }\n\n  return (\n    <WarningTooltip\n      content={daemons.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.accentYellow()} />\n    </WarningTooltip>\n  );\n});\n","import {Colors, Icon, Spinner, Tooltip} from '@dagster-io/ui-components';\nimport {memo, useContext} from 'react';\n\nimport {WarningTooltip} from './WarningTooltip';\nimport {DeploymentStatusContext} from '../instance/DeploymentStatusProvider';\n\nexport const WorkspaceStatus = memo(({placeholder}: {placeholder: boolean}) => {\n  const {codeLocations} = useContext(DeploymentStatusContext);\n\n  if (!codeLocations) {\n    return placeholder ? <div style={{width: '16px'}} /> : null;\n  }\n\n  if (codeLocations.type === 'spinner') {\n    return (\n      <Tooltip content={codeLocations.content} placement=\"bottom\">\n        <Spinner purpose=\"body-text\" fillColor={Colors.accentGray()} />\n      </Tooltip>\n    );\n  }\n\n  return (\n    <WarningTooltip\n      content={codeLocations.content}\n      position=\"bottom\"\n      modifiers={{offset: {enabled: true, options: {offset: [0, 28]}}}}\n    >\n      <Icon name=\"warning\" color={Colors.accentYellow()} />\n    </WarningTooltip>\n  );\n});\n","import {Box, Tabs} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\n\nimport {InstancePageContext} from './InstancePageContext';\nimport {useCanSeeConfig} from './useCanSeeConfig';\nimport {QueryResult} from '../apollo-client';\nimport {QueryRefreshCountdown, QueryRefreshState} from '../app/QueryRefresh';\nimport {InstanceWarningIcon} from '../nav/InstanceWarningIcon';\nimport {WorkspaceStatus} from '../nav/WorkspaceStatus';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: QueryRefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const InstanceTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const {healthTitle} = useContext(InstancePageContext);\n  const canSeeConfig = useCanSeeConfig();\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink\n          id=\"locations\"\n          title=\"Code locations\"\n          to=\"/locations\"\n          icon={<WorkspaceStatus placeholder={false} />}\n        />\n        <TabLink id=\"health\" title={healthTitle} to=\"/health\" icon={<InstanceWarningIcon />} />\n        {canSeeConfig ? <TabLink id=\"concurrency\" title=\"Concurrency\" to=\"/concurrency\" /> : null}\n        {canSeeConfig ? <TabLink id=\"config\" title=\"Configuration\" to=\"/config\" /> : null}\n      </Tabs>\n      {refreshState ? (\n        <Box padding={{bottom: 8}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {Box, Colors, PageHeader, Subheading, Subtitle1} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\n\nimport {DaemonList} from './DaemonList';\nimport {INSTANCE_HEALTH_FRAGMENT} from './InstanceHealthFragment';\nimport {InstancePageContext} from './InstancePageContext';\nimport {InstanceTabs} from './InstanceTabs';\nimport {gql, useQuery} from '../apollo-client';\nimport {InstanceHealthQuery, InstanceHealthQueryVariables} from './types/InstanceHealthPage.types';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nexport const InstanceHealthPageContent = () => {\n  useTrackPageView();\n  useDocumentTitle('Daemons');\n\n  const queryData = useQuery<InstanceHealthQuery, InstanceHealthQueryVariables>(\n    INSTANCE_HEALTH_QUERY,\n    {\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const refreshState = useQueryRefreshAtInterval(queryData, FIFTEEN_SECONDS);\n  const {loading, data} = queryData;\n\n  const daemonContent = () => {\n    if (loading && !data?.instance) {\n      return (\n        <Box padding={{horizontal: 24}} style={{color: Colors.textLight()}}>\n          Loadingâ€¦\n        </Box>\n      );\n    }\n    return data?.instance ? (\n      <DaemonList daemonStatuses={data.instance.daemonHealth.allDaemonStatuses} />\n    ) : null;\n  };\n\n  return (\n    <div style={{overflowY: 'auto'}}>\n      <Box\n        padding={{vertical: 16, horizontal: 24}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Subheading>Daemon statuses</Subheading>\n        <div>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </div>\n      </Box>\n      {daemonContent()}\n    </div>\n  );\n};\n\nexport const InstanceHealthPage = () => {\n  const {pageTitle} = useContext(InstancePageContext);\n  return (\n    <>\n      <PageHeader title={<Subtitle1>{pageTitle}</Subtitle1>} tabs={<InstanceTabs tab=\"health\" />} />\n      <InstanceHealthPageContent />\n    </>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default InstanceHealthPage;\n\nconst INSTANCE_HEALTH_QUERY = gql`\n  query InstanceHealthQuery {\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n"],"names":["InstanceWarningIcon","memo","daemons","useContext","DeploymentStatusContext","WarningTooltip","content","position","modifiers","offset","enabled","options","Icon","name","color","Colors","WorkspaceStatus","placeholder","codeLocations","type","Tooltip","placement","Spinner","purpose","fillColor","div","style","width","InstanceTabs","props","refreshState","tab","healthTitle","InstancePageContext","canSeeConfig","useCanSeeConfig","Box","flex","direction","justifyContent","alignItems","Tabs","selectedTabId","TabLink","id","title","to","icon","padding","bottom","QueryRefreshCountdown","InstanceHealthPageContent","useTrackPageView","useDocumentTitle","queryData","useQuery","INSTANCE_HEALTH_QUERY","notifyOnNetworkStatusChange","useQueryRefreshAtInterval","FIFTEEN_SECONDS","loading","data","overflowY","vertical","horizontal","Subheading","instance","DaemonList","daemonStatuses","daemonHealth","allDaemonStatuses","pageTitle","PageHeader","Subtitle1","tabs","InstanceHealthPage","gql","INSTANCE_HEALTH_FRAGMENT"],"sourceRoot":"","ignoreList":[]}