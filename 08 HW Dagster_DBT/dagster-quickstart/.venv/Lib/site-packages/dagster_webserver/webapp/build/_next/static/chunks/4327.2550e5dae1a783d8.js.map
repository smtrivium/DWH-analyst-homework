{"version":3,"file":"static/chunks/4327.2550e5dae1a783d8.js","mappings":"qOAIO,IAAMA,EAAoB,IAE7B,UAACC,EAAAA,CAAUA,CAAAA,CACTC,MAAO,UAACC,EAAAA,EAASA,CAAAA,UAAC,yBAClBC,MAAO,UAACC,EAAAA,CAAeA,CAAAA,CAACC,MAAM,gICgB7B,IAAMC,EAAwB,KACnCC,CAAAA,EAAAA,EAAAA,EAAAA,CAAgBA,GAChB,GAAM,CAAC,EAAGC,CAAI,CAAC,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAASA,GACrBC,EAAUC,CAAAA,EAAAA,EAAAA,EAAAA,CAAUA,GAE1BC,CAAAA,EAAAA,EAAAA,CAAAA,CAAgBA,CAAE,wBAClB,IAAMC,EAAeC,CAAAA,EAAAA,EAAAA,CAAAA,CAAeA,GAE9BC,EAAuBC,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CACtC,CAACR,EAAoBS,KACnBP,CAAO,CAACO,EAAK,CAAC,CACZC,SAAUC,CAAAA,EAAAA,EAAAA,EAAAA,CAA4BA,CAACX,GACvCY,OAAQV,EAAQW,QAAQ,CAACD,MAAM,EAEnC,EACA,CAACV,EAAQ,EAGLY,EAA8BN,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAC7C,CAACO,EAA2CC,KAC1C,IAAMhB,EAAOiB,CAAAA,EAAAA,EAAAA,CAAAA,CAAsBA,CAACD,EAAKE,QAAQ,CAAE,CAACC,KAAM,YAAY,GAClEJ,EAAEK,OAAO,CACXf,CADa,CACAL,GAEbE,EAAQmB,IAAI,CAACrB,EAEjB,EACA,CAACE,EAASG,EAAa,EAGnB,CAACiB,EAA8BC,EAAgC,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAmBA,CACzF,+BACCC,GACc,UAATA,IAA6B,IAATA,GAAgB,WAOrCC,CAAS,CAAEC,QAASC,CAAgB,CAAC,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAiBA,GAE1DC,EAAeC,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,KACW,8BACpCT,EACAU,kBAAmBN,EACf,GAAU,CAACA,EAAUO,GAAG,CAACC,CAAAA,EAAAA,EAAAA,EAAAA,CAAgBA,CAAClB,EAAKE,QAAQ,QACvDiB,EACJR,QAASC,EACX,EAEC,CAACN,EAA8BI,EAAWE,EAAiB,EAE9D,MACE,WAACQ,EAAAA,CAAIA,CAAAA,CAACC,MAAO,CAACC,QAAS,OAAQC,cAAe,SAAUC,cAAe,CAAC,YACtE,UAACjD,EAAiBA,CAAAA,GAElB,UAACkD,CAFiBlD,CAEjBkD,EAAkBA,CAAAA,CACjBX,aAAcA,EACdY,QAAS,CAACC,sBAAsB,EAAMC,mBAAmB,CAAI,EAC7DC,aAAcC,CAAAA,EAAAA,EAAAA,EAAAA,CAA8BA,CAAC9C,GAC7CO,qBAAsBA,EACtBO,4BAA6BA,EAC7BiC,SAAUC,EAAAA,EAAkBA,CAACC,MAAM,CACnC1B,gCAAiCA,MAIzC,EAAE,EAIazB,qBAAqBA,EAAC,aC9F9B,IAAMsC,EAAOc,SAAAA,EAAMA,CAACC,GAAG,2GAK5B","sources":["webpack://_N_E/../ui-core/src/assets/AssetsGraphHeader.oss.tsx","webpack://_N_E/../ui-core/src/assets/AssetsGlobalGraphRoot.tsx","webpack://_N_E/../ui-components/src/components/Page.tsx"],"sourcesContent":["import {PageHeader, Subtitle1} from '@dagster-io/ui-components';\n\nimport {ReloadAllButton} from '../workspace/ReloadAllButton';\n\nexport const AssetsGraphHeader = () => {\n  return (\n    <PageHeader\n      title={<Subtitle1>Global Asset Lineage</Subtitle1>}\n      right={<ReloadAllButton label=\"Reload definitions\" />}\n    />\n  );\n};\n","import {Page} from '@dagster-io/ui-components';\nimport {useCallback, useMemo} from 'react';\nimport {useHistory, useParams} from 'react-router-dom';\nimport {AssetsGraphHeader} from 'shared/assets/AssetsGraphHeader.oss';\nimport {useFavoriteAssets} from 'shared/assets/useFavoriteAssets.oss';\n\nimport {assetDetailsPathForKey} from './assetDetailsPathForKey';\nimport {\n  globalAssetGraphPathFromString,\n  globalAssetGraphPathToString,\n} from './globalAssetGraphPathToString';\nimport {useTrackPageView} from '../app/analytics';\nimport {AssetGraphExplorer} from '../asset-graph/AssetGraphExplorer';\nimport {AssetGraphViewType, tokenForAssetKey} from '../asset-graph/Utils';\nimport {AssetGraphFetchScope} from '../asset-graph/useAssetGraphData';\nimport {AssetLocation} from '../asset-graph/useFindAssetLocation';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useOpenInNewTab} from '../hooks/useOpenInNewTab';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {ExplorerPath} from '../pipelines/PipelinePathUtils';\ninterface AssetGroupRootParams {\n  0: string;\n}\n\nexport const AssetsGlobalGraphRoot = () => {\n  useTrackPageView();\n  const {0: path} = useParams<AssetGroupRootParams>();\n  const history = useHistory();\n\n  useDocumentTitle(`Global Asset Lineage`);\n  const openInNewTab = useOpenInNewTab();\n\n  const onChangeExplorerPath = useCallback(\n    (path: ExplorerPath, mode: 'push' | 'replace') => {\n      history[mode]({\n        pathname: globalAssetGraphPathToString(path),\n        search: history.location.search,\n      });\n    },\n    [history],\n  );\n\n  const onNavigateToSourceAssetNode = useCallback(\n    (e: Pick<React.MouseEvent<any>, 'metaKey'>, node: AssetLocation) => {\n      const path = assetDetailsPathForKey(node.assetKey, {view: 'definition'});\n      if (e.metaKey) {\n        openInNewTab(path);\n      } else {\n        history.push(path);\n      }\n    },\n    [history, openInNewTab],\n  );\n\n  const [hideEdgesToNodesOutsideQuery, setHideEdgesToNodesOutsideQuery] = useStateWithStorage(\n    'hideEdgesToNodesOutsideQuery',\n    (json) => {\n      if (json === 'false' || json === false) {\n        return false;\n      }\n      return true;\n    },\n  );\n\n  const {favorites, loading: favoritesLoading} = useFavoriteAssets();\n\n  const fetchOptions = useMemo(() => {\n    const options: AssetGraphFetchScope = {\n      hideEdgesToNodesOutsideQuery,\n      hideNodesMatching: favorites\n        ? (node) => !favorites.has(tokenForAssetKey(node.assetKey))\n        : undefined,\n      loading: favoritesLoading,\n    };\n    return options;\n  }, [hideEdgesToNodesOutsideQuery, favorites, favoritesLoading]);\n\n  return (\n    <Page style={{display: 'flex', flexDirection: 'column', paddingBottom: 0}}>\n      <AssetsGraphHeader />\n\n      <AssetGraphExplorer\n        fetchOptions={fetchOptions}\n        options={{preferAssetRendering: true, explodeComposites: true}}\n        explorerPath={globalAssetGraphPathFromString(path)}\n        onChangeExplorerPath={onChangeExplorerPath}\n        onNavigateToSourceAssetNode={onNavigateToSourceAssetNode}\n        viewType={AssetGraphViewType.GLOBAL}\n        setHideEdgesToNodesOutsideQuery={setHideEdgesToNodesOutsideQuery}\n      />\n    </Page>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default AssetsGlobalGraphRoot;\n","import styled from 'styled-components';\n\nexport const Page = styled.div`\n  height: 100%;\n  overflow-y: auto;\n  padding-bottom: 64px;\n  width: 100%;\n`;\n"],"names":["AssetsGraphHeader","PageHeader","title","Subtitle1","right","ReloadAllButton","label","AssetsGlobalGraphRoot","useTrackPageView","path","useParams","history","useHistory","useDocumentTitle","openInNewTab","useOpenInNewTab","onChangeExplorerPath","useCallback","mode","pathname","globalAssetGraphPathToString","search","location","onNavigateToSourceAssetNode","e","node","assetDetailsPathForKey","assetKey","view","metaKey","push","hideEdgesToNodesOutsideQuery","setHideEdgesToNodesOutsideQuery","useStateWithStorage","json","favorites","loading","favoritesLoading","useFavoriteAssets","fetchOptions","useMemo","hideNodesMatching","has","tokenForAssetKey","undefined","Page","style","display","flexDirection","paddingBottom","AssetGraphExplorer","options","preferAssetRendering","explodeComposites","explorerPath","globalAssetGraphPathFromString","viewType","AssetGraphViewType","GLOBAL","styled","div"],"sourceRoot":"","ignoreList":[]}