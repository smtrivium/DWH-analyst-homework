{"version":3,"file":"static/chunks/6355.47fc4aa3b719ac3f.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/LastRunSummary.tsx","webpack://_N_E/../ui-core/src/instance/StepSummaryForRun.tsx","webpack://_N_E/../ui-core/src/ui/Filters/useCodeLocationFilter.tsx","webpack://_N_E/../ui-core/src/runs/RunActionButtons.tsx","webpack://_N_E/../ui-components/src/components/css/ListItem.module.css?c9a2","webpack://_N_E/../ui-core/src/hooks/useQueryPersistedFilterState.tsx","webpack://_N_E/../ui-core/src/instance/JobMenu.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedJobRow.tsx","webpack://_N_E/../ui-components/src/components/HorizontalControls.tsx","webpack://_N_E/../ui-components/src/components/HoverButton.tsx","webpack://_N_E/../ui-components/src/components/directionalSpacingToValues.tsx","webpack://_N_E/../ui-components/src/components/ListItem.tsx","webpack://_N_E/../ui-core/src/workspace/SingleJobQuery.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedObserveJobRow.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsTable.tsx","webpack://_N_E/../ui-core/src/jobs/JobsPageContent.tsx","webpack://_N_E/../ui-core/src/jobs/JobsRoot.tsx","webpack://_N_E/../ui-core/src/overview/sortRepoBuckets.tsx","webpack://_N_E/../ui-components/src/components/css/HoverButton.module.css?fd1b","webpack://_N_E/../ui-components/src/components/css/HorizontalControls.module.css?8b39","webpack://_N_E/../ui-core/src/runs/RunStatusPez.tsx","webpack://_N_E/../ui-core/src/overview/visibleRepoKeys.tsx"],"sourcesContent":["import {Box, Popover, Tag} from '@dagster-io/ui-components';\nimport {memo, useMemo} from 'react';\n\nimport {StepSummaryForRun} from './StepSummaryForRun';\nimport {RunStatus} from '../graphql/types';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunStatusOverlay} from '../runs/RunStatusPez';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\nimport {RunStateSummary, RunTime} from '../runs/RunUtils';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {AnchorButton} from '../ui/AnchorButton';\n\ninterface Props {\n  name: string;\n  run: RunTimeFragment;\n  showHover?: boolean;\n  showButton?: boolean;\n  showSummary?: boolean;\n}\n\nexport const LastRunSummary = memo(\n  ({name, run, showHover = false, showButton = true, showSummary = true}: Props) => {\n    const {status} = run;\n\n    const intent = useMemo(() => {\n      switch (status) {\n        case RunStatus.SUCCESS:\n          return 'success';\n        case RunStatus.CANCELED:\n        case RunStatus.CANCELING:\n        case RunStatus.FAILURE:\n          return 'danger';\n        default:\n          return 'none';\n      }\n    }, [status]);\n\n    const tag = () => {\n      const tagElement = (\n        <Tag intent={intent}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n            <RunStatusIndicator status={run.status} size={10} />\n            <RunTime run={run} />\n          </Box>\n        </Tag>\n      );\n\n      if (!showHover) {\n        return tagElement;\n      }\n\n      return (\n        <Popover\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={name} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          {tagElement}\n        </Popover>\n      );\n    };\n\n    return (\n      <Box\n        flex={{\n          direction: 'row',\n          justifyContent: 'space-between',\n          alignItems: 'flex-start',\n          gap: 16,\n        }}\n      >\n        <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 4}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            {tag()}\n            {showSummary ? <RunStateSummary run={run} /> : null}\n          </Box>\n          {showSummary && (failedStatuses.has(run.status) || inProgressStatuses.has(run.status)) ? (\n            <StepSummaryForRun runId={run.id} />\n          ) : undefined}\n        </Box>\n        {showButton ? <AnchorButton to={`/runs/${run.id}`}>View run</AnchorButton> : null}\n      </Box>\n    );\n  },\n);\n","import {Caption, Colors} from '@dagster-io/ui-components';\nimport qs from 'qs';\nimport {useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {gql, useQuery} from '../apollo-client';\nimport {\n  StepSummaryForRunQuery,\n  StepSummaryForRunQueryVariables,\n} from './types/StepSummaryForRun.types';\nimport {StepEventStatus} from '../graphql/types';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\n\ninterface Props {\n  runId: string;\n}\n\nexport const StepSummaryForRun = (props: Props) => {\n  const {runId} = props;\n  const queryResult = useQuery<StepSummaryForRunQuery, StepSummaryForRunQueryVariables>(\n    STEP_SUMMARY_FOR_RUN_QUERY,\n    {\n      variables: {runId},\n    },\n  );\n  const {data} = queryResult;\n\n  const run = data?.pipelineRunOrError;\n  const status = run?.__typename === 'Run' ? run.status : null;\n\n  const relevantSteps = useMemo(() => {\n    if (run?.__typename !== 'Run') {\n      return [];\n    }\n\n    const {status} = run;\n    if (failedStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.FAILURE);\n    }\n\n    if (inProgressStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.IN_PROGRESS);\n    }\n\n    return [];\n  }, [run]);\n\n  const stepCount = relevantSteps.length;\n\n  if (!stepCount || !status) {\n    return null;\n  }\n\n  if (failedStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.textLight()}>\n          Failed at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.textLight()}>\n        Failed at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  if (inProgressStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.textLight()}>\n          In progress at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.textLight()}>\n        In progress at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  return null;\n};\n\nconst STEP_SUMMARY_FOR_RUN_QUERY = gql`\n  query StepSummaryForRunQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        stepStats {\n          endTime\n          stepKey\n          status\n        }\n      }\n    }\n  }\n`;\n","import {useCallback, useContext, useMemo} from 'react';\n\nimport {TruncatedTextWithFullTextOnHover} from '../../nav/getLeftNavItemsForOption';\nimport {WorkspaceContext} from '../../workspace/WorkspaceContext/WorkspaceContext';\nimport {buildRepoAddress} from '../../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../../workspace/repoAddressAsString';\nimport {RepoAddress} from '../../workspace/types';\nimport {StaticBaseConfig, useStaticSetFilter} from '../BaseFilters/useStaticSetFilter';\n\ntype Props =\n  | {\n      codeLocations: RepoAddress[];\n      setCodeLocations: (repos: RepoAddress[]) => void;\n    }\n  | {\n      codeLocations: undefined;\n      setCodeLocations: undefined;\n    };\n\n/**\n * If props are passed that this filter is in \"controlled mode\" (you tell it what the current state is)\n *\n * Otherwise it's uncontrolled and uses WorkspaceContext to control the current state\n * This means that any logic depending on the state of this filter would need to read\n * WorkspaceContext to get the current state.\n */\nexport const useCodeLocationFilter = (\n  {codeLocations, setCodeLocations}: Props = {\n    codeLocations: undefined,\n    setCodeLocations: undefined,\n  },\n) => {\n  const {allRepos, visibleRepos, setVisible, setHidden} = useContext(WorkspaceContext);\n\n  const allRepoAddresses = useMemo(() => {\n    return allRepos.map((repo) =>\n      buildRepoAddress(repo.repository.name, repo.repositoryLocation.name),\n    );\n  }, [allRepos]);\n\n  const visibleRepoAddresses = useMemo(() => {\n    return visibleRepos.length === allRepos.length\n      ? []\n      : visibleRepos.map((repo) =>\n          buildRepoAddress(repo.repository.name, repo.repositoryLocation.name),\n        );\n  }, [allRepos, visibleRepos]);\n\n  const setVisibleRepos = useCallback(\n    (state: Set<RepoAddress>) => {\n      if (state.size === 0) {\n        setVisible(allRepoAddresses);\n        return;\n      }\n\n      const hidden = allRepoAddresses.filter((repoAddress) => !state.has(repoAddress));\n      setHidden(hidden);\n      setVisible(Array.from(state));\n    },\n    [allRepoAddresses, setHidden, setVisible],\n  );\n\n  return useStaticSetFilter<RepoAddress>({\n    state: codeLocations ? codeLocations : visibleRepoAddresses,\n    allValues: useMemo(\n      () =>\n        allRepoAddresses.map((repoAddress) => {\n          return {value: repoAddress, match: [repoAddressAsHumanString(repoAddress)]};\n        }),\n      [allRepoAddresses],\n    ),\n    onStateChanged: (state) => {\n      if (setCodeLocations) {\n        setCodeLocations(Array.from(state));\n      } else {\n        setVisibleRepos(state);\n      }\n    },\n    menuWidth: '500px',\n    ...BaseConfig,\n  });\n};\n\nconst getStringValue = (value: RepoAddress) => repoAddressAsHumanString(value);\n\nexport const BaseConfig: StaticBaseConfig<RepoAddress> = {\n  name: 'Code location',\n  icon: 'folder',\n  renderLabel: ({value}: {value: RepoAddress}) => (\n    <TruncatedTextWithFullTextOnHover text={repoAddressAsHumanString(value)} />\n  ),\n  getStringValue,\n  getKey: getStringValue,\n};\n","import {Box, Button, Group, Icon} from '@dagster-io/ui-components';\nimport {useCallback, useState} from 'react';\n\nimport {IRunMetadataDict, IStepState} from './RunMetadataProvider';\nimport {doneStatuses, failedStatuses} from './RunStatuses';\nimport {DagsterTag} from './RunTag';\nimport {getReexecutionParamsForSelection} from './RunUtils';\nimport {StepSelection} from './StepSelection';\nimport {TerminationDialog, TerminationDialogResult} from './TerminationDialog';\nimport {RunFragment, RunPageFragment} from './types/RunFragments.types';\nimport {useJobAvailabilityErrorForRun} from './useJobAvailabilityErrorForRun';\nimport {useJobReexecution} from './useJobReExecution';\nimport {showSharedToaster} from '../app/DomUtils';\nimport {useFeatureFlags} from '../app/Flags';\nimport {GraphQueryItem, filterByQuery} from '../app/GraphQueryImpl';\nimport {DEFAULT_DISABLED_REASON} from '../app/Permissions';\nimport {ReexecutionStrategy} from '../graphql/types';\nimport {LaunchButtonConfiguration, LaunchButtonDropdown} from '../launchpad/LaunchButton';\nimport {filterRunSelectionByQuery} from '../run-selection/AntlrRunSelection';\nimport {useRepositoryForRunWithParentSnapshot} from '../workspace/useRepositoryForRun';\n\ninterface RunActionButtonsProps {\n  run: RunPageFragment;\n  selection: StepSelection;\n  graph: GraphQueryItem[];\n  metadata: IRunMetadataDict;\n}\n\nexport const CancelRunButton = ({run}: {run: RunFragment}) => {\n  const {id: runId, canTerminate} = run;\n  const [showDialog, setShowDialog] = useState<boolean>(false);\n  const closeDialog = useCallback(() => setShowDialog(false), []);\n\n  const onComplete = useCallback(\n    async (result: TerminationDialogResult) => {\n      const {errors} = result;\n      const error = runId && errors[runId];\n      if (error && 'message' in error) {\n        await showSharedToaster({\n          message: error.message,\n          icon: 'error',\n          intent: 'danger',\n        });\n      }\n    },\n    [runId],\n  );\n\n  if (!runId) {\n    return null;\n  }\n\n  return (\n    <>\n      <Button\n        icon={<Icon name=\"cancel\" />}\n        intent=\"danger\"\n        disabled={showDialog}\n        onClick={() => setShowDialog(true)}\n      >\n        Terminate\n      </Button>\n      <TerminationDialog\n        isOpen={showDialog}\n        onClose={closeDialog}\n        onComplete={onComplete}\n        selectedRuns={{[runId]: canTerminate}}\n      />\n    </>\n  );\n};\n\nfunction stepSelectionWithState(selection: StepSelection, metadata: IRunMetadataDict) {\n  const stepStates = selection.keys.map(\n    (key) => (key && metadata.steps[key]?.state) || IStepState.PREPARING,\n  );\n\n  return {\n    ...selection,\n    present: selection.keys.length > 0,\n    failed: selection.keys.length && stepStates.includes(IStepState.FAILED),\n    finished: stepStates.every((stepState) =>\n      [IStepState.FAILED, IStepState.SUCCEEDED].includes(stepState),\n    ),\n  };\n}\n\nfunction stepSelectionFromRunTags(\n  run: RunFragment,\n  graph: GraphQueryItem[],\n  metadata: IRunMetadataDict,\n) {\n  const tag = run.tags.find((t) => t.key === DagsterTag.StepSelection);\n  if (!tag) {\n    return null;\n  }\n  return stepSelectionWithState(\n    {keys: filterByQuery(graph, tag.value).all.map((k) => k.name), query: tag.value},\n    metadata,\n  );\n}\n\nexport const canRunAllSteps = (run: Pick<RunFragment, 'status'>) => doneStatuses.has(run.status);\nexport const canRunFromFailure = (run: Pick<RunFragment, 'status' | 'executionPlan'>) =>\n  run.executionPlan && failedStatuses.has(run.status);\n\nexport const RunActionButtons = (props: RunActionButtonsProps) => {\n  const {metadata, graph, run} = props;\n\n  const repoMatch = useRepositoryForRunWithParentSnapshot(run);\n  const jobError = useJobAvailabilityErrorForRun(run);\n  const {flagAssetRetries} = useFeatureFlags();\n\n  const artifactsPersisted = run?.executionPlan?.artifactsPersisted;\n\n  const selection = stepSelectionWithState(props.selection, metadata);\n  const currentRunSelection = stepSelectionFromRunTags(run, graph, metadata);\n  const currentRunIsFromFailure = run.tags?.some(\n    (t) => t.key === DagsterTag.IsResumeRetry && t.value === 'true',\n  );\n\n  const reexecute = useJobReexecution();\n  const reexecuteWithSelection = async (selection: StepSelection) => {\n    if (!run || !repoMatch || !run.pipelineSnapshotId) {\n      return;\n    }\n    const executionParams = getReexecutionParamsForSelection({\n      run,\n      selection,\n      repositoryLocationName: repoMatch.match.repositoryLocation.name,\n      repositoryName: repoMatch.match.repository.name,\n    });\n    await reexecute.onClick(run, executionParams, false);\n  };\n\n  const full: LaunchButtonConfiguration = {\n    icon: 'cached',\n    scope: '*',\n    title: 'All steps in root run',\n    tooltip: 'Re-execute the pipeline run from scratch. Shift-click to adjust tags.',\n    disabled: !canRunAllSteps(run),\n    onClick: (e) => reexecute.onClick(run, ReexecutionStrategy.ALL_STEPS, e.shiftKey),\n  };\n\n  const same: LaunchButtonConfiguration = {\n    icon: 'linear_scale',\n    scope: currentRunSelection?.query || '*',\n    title: 'Same steps',\n    disabled: !currentRunSelection || !(currentRunSelection.finished || currentRunSelection.failed),\n    tooltip: (\n      <div>\n        {!currentRunSelection || !currentRunSelection.present\n          ? 'Re-executes the same step subset used for this run if one was present.'\n          : !currentRunSelection.finished\n            ? 'Wait for all of the steps to finish to re-execute the same subset.'\n            : 'Re-execute the same step subset used for this run:'}\n        <StepSelectionDescription selection={currentRunSelection} />\n      </div>\n    ),\n    onClick: () => reexecuteWithSelection(currentRunSelection!),\n  };\n\n  const selected: LaunchButtonConfiguration = {\n    icon: 'op',\n    scope: selection.query,\n    title: selection.keys.length > 1 ? 'Selected steps' : 'Selected step',\n    disabled: !selection.present || !(selection.finished || selection.failed),\n    tooltip: (\n      <div>\n        {!selection.present\n          ? 'Select a step or type a step subset to re-execute.'\n          : !selection.finished\n            ? 'Wait for the steps to finish to re-execute them.'\n            : 'Re-execute the selected steps with existing configuration:'}\n        <StepSelectionDescription selection={selection} />\n      </div>\n    ),\n    onClick: () => reexecuteWithSelection(selection),\n  };\n\n  const fromSelected: LaunchButtonConfiguration = {\n    icon: 'arrow_forward',\n    title: 'From selected',\n    disabled: !canRunAllSteps(run) || selection.keys.length !== 1,\n    tooltip: 'Re-execute the pipeline downstream from the selected steps.',\n    onClick: async () => {\n      if (!run.executionPlan) {\n        console.warn('Run execution plan must be present to launch from-selected execution');\n        return Promise.resolve();\n      }\n\n      const selectionForPythonFiltering = selection.keys.map((k) => `${k}*`).join(',');\n      const selectionForUIFiltering = selection.keys.map((k) => `name:\"${k}\"+`).join(' or ');\n\n      const selectionKeys = filterRunSelectionByQuery(graph, selectionForUIFiltering).all.map(\n        (node) => node.name,\n      );\n\n      await reexecuteWithSelection({\n        keys: selectionKeys,\n        query: selectionForPythonFiltering,\n      });\n    },\n  };\n\n  const fromFailureEnabled = canRunFromFailure(run);\n\n  const fromFailure: LaunchButtonConfiguration = {\n    icon: 'arrow_forward',\n    title: 'From failure',\n    disabled: !fromFailureEnabled,\n    tooltip: !fromFailureEnabled\n      ? 'Retry is only enabled when the pipeline has failed.'\n      : 'Retry the pipeline run, skipping steps that completed successfully. Shift-click to adjust tags.',\n    onClick: (e) => reexecute.onClick(run, ReexecutionStrategy.FROM_FAILURE, e.shiftKey),\n  };\n\n  const fromAssetFailure: LaunchButtonConfiguration = {\n    icon: 'arrow_forward',\n    title: 'From asset failure',\n    disabled: !fromFailureEnabled,\n    tooltip: !fromFailureEnabled\n      ? 'Retry is only enabled when the pipeline has failed.'\n      : 'Retry the pipeline run, selecting only assets that did not complete successfully. Shift-click to adjust tags.',\n    onClick: (e) => reexecute.onClick(run, ReexecutionStrategy.FROM_ASSET_FAILURE, e.shiftKey),\n  };\n\n  if (!artifactsPersisted) {\n    [selected, same, fromFailure, fromSelected].forEach((option) => {\n      option.disabled = true;\n      option.title =\n        'Retry and re-execute are only enabled on persistent storage. Try rerunning with a different storage configuration.';\n    });\n  }\n\n  const options = [\n    full,\n    same,\n    selected,\n    fromSelected,\n    fromFailure,\n    flagAssetRetries && run.executionPlan?.assetSelection.length ? fromAssetFailure : null,\n  ].filter(Boolean) as LaunchButtonConfiguration[];\n  const preferredRerun = selection.present\n    ? selected\n    : fromFailureEnabled && currentRunIsFromFailure\n      ? fromFailure\n      : currentRunSelection?.present\n        ? same\n        : null;\n\n  const primary = artifactsPersisted && preferredRerun ? preferredRerun : full;\n\n  const tooltip = () => {\n    if (jobError?.tooltip) {\n      return jobError?.tooltip;\n    }\n    return run.hasReExecutePermission ? undefined : DEFAULT_DISABLED_REASON;\n  };\n\n  return (\n    <Group direction=\"row\" spacing={8}>\n      <Box flex={{direction: 'row'}}>\n        <LaunchButtonDropdown\n          runCount={1}\n          primary={primary}\n          options={options}\n          title={\n            primary.scope === '*'\n              ? `Re-execute all (*)`\n              : primary.scope\n                ? `Re-execute (${primary.scope})`\n                : `Re-execute ${primary.title}`\n          }\n          tooltip={tooltip()}\n          icon={jobError?.icon}\n          disabled={jobError?.disabled || !run.hasReExecutePermission}\n        />\n      </Box>\n      {!doneStatuses.has(run.status) ? <CancelRunButton run={run} /> : null}\n      {reexecute.launchpadElement}\n    </Group>\n  );\n};\n\nconst StepSelectionDescription = ({selection}: {selection: StepSelection | null}) => (\n  <div style={{paddingLeft: '10px'}}>\n    {(selection?.keys || []).map((step) => (\n      <span key={step} style={{display: 'block'}}>{`* ${step}`}</span>\n    ))}\n  </div>\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"ListItem_listItem__hJcWe\",\"listItemAnchor\":\"ListItem_listItemAnchor__kz7bK\",\"checkboxContainer\":\"ListItem_checkboxContainer__iSFou\",\"left\":\"ListItem_left__euMlC\",\"right\":\"ListItem_right__IUgkP\"};","import qs from 'qs';\nimport {SetStateAction, useMemo} from 'react';\n\nimport {useQueryPersistedState} from './useQueryPersistedState';\n\ntype SetterType<T extends Record<string, any>, K extends keyof T & string> = {\n  [P in K as `set${Capitalize<P>}`]: (value: SetStateAction<T[P]>) => void;\n};\n\nexport const useQueryPersistedFilterState = <T extends Record<string, any>>(\n  filterFields: readonly (keyof T)[],\n): {\n  state: T;\n  setState: React.Dispatch<React.SetStateAction<T>>;\n  setters: SetterType<T, Extract<keyof T, string>>;\n} => {\n  const encode = (filters: T) => {\n    return filterFields.reduce((acc, field) => {\n      const value = filters[field];\n      acc[field] = value?.length\n        ? (JSON.stringify(value) as T[keyof T])\n        : (undefined as T[keyof T]);\n      return acc;\n    }, {} as T);\n  };\n\n  const decode = (qs: qs.ParsedQs) => {\n    const accum = {} as T;\n    for (const field of filterFields) {\n      const value = qs[field as string];\n      if (value && typeof value === 'string') {\n        try {\n          accum[field] = JSON.parse(value);\n        } catch {\n          accum[field] = [] as T[keyof T];\n        }\n      } else {\n        accum[field] = [] as T[keyof T];\n      }\n    }\n    return accum;\n  };\n\n  const [state, setState] = useQueryPersistedState<T>({\n    encode,\n    decode,\n  });\n\n  const createSetters = () => {\n    const setters = {} as SetterType<T, Extract<keyof T, string>>;\n\n    filterFields.forEach((field) => {\n      const fieldAsString = field as keyof T & string;\n      const key = `set${\n        fieldAsString.charAt(0).toUpperCase() + fieldAsString.slice(1)\n      }` as keyof SetterType<T, Extract<keyof T, string>>;\n\n      setters[key] = ((value: any) => {\n        setState((prevState: T) => ({\n          ...prevState,\n          [fieldAsString]: value instanceof Function ? value(prevState[fieldAsString]) : value,\n        }));\n      }) as any;\n    });\n\n    return setters;\n  };\n\n  const setters = useMemo(createSetters, [filterFields, setState]);\n\n  return {\n    state,\n    setState,\n    setters,\n  };\n};\n","import {Button, Icon, Menu, MenuItem, Popover, Spinner, Tooltip} from '@dagster-io/ui-components';\nimport {useCallback} from 'react';\n\nimport {gql, useLazyQuery} from '../apollo-client';\nimport {RunReExecutionQuery, RunReExecutionQueryVariables} from './types/JobMenu.types';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {useMaterializationAction} from '../assets/LaunchAssetExecutionButton';\nimport {EXECUTION_PLAN_TO_GRAPH_FRAGMENT} from '../gantt/toGraphQueryItems';\nimport {ReexecutionStrategy} from '../graphql/types';\nimport {canRunAllSteps, canRunFromFailure} from '../runs/RunActionButtons';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {useJobReexecution} from '../runs/useJobReExecution';\nimport {MenuLink} from '../ui/MenuLink';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\ninterface Props {\n  job: {isJob: boolean; name: string; runs: RunTimeFragment[]};\n  repoAddress: RepoAddress;\n  isAssetJob: boolean | 'loading';\n}\n\n/**\n * Lazily load more information about the last run for this job, then use that data to inform\n * whether re-execution is possible.\n */\nexport const JobMenu = (props: Props) => {\n  const {job, isAssetJob, repoAddress} = props;\n  const lastRun = job.runs.length ? job.runs[0] : null;\n  const pipelineSelector = {\n    pipelineName: job.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n\n  const materialize = useMaterializationAction(job.name);\n  const reexecute = useJobReexecution();\n\n  const {\n    permissions: {canLaunchPipelineReexecution, canLaunchPipelineExecution},\n    disabledReasons,\n  } = usePermissionsForLocation(repoAddress.location);\n\n  const [fetchHasExecutionPlan, queryResult] = useLazyQuery<\n    RunReExecutionQuery,\n    RunReExecutionQueryVariables\n  >(RUN_RE_EXECUTION_QUERY);\n\n  const {data} = queryResult;\n\n  const fetchIfPossible = useCallback(() => {\n    if (lastRun?.id) {\n      fetchHasExecutionPlan({variables: {runId: lastRun.id}});\n    }\n  }, [lastRun, fetchHasExecutionPlan]);\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data?.pipelineRunOrError : null;\n  const executeItem =\n    isAssetJob === 'loading' ? (\n      <MenuItem icon=\"execute\" text=\"Loading...\" disabled={true} />\n    ) : isAssetJob === true ? (\n      <MenuItem\n        icon={materialize.loading ? <Spinner purpose=\"caption-text\" /> : 'execute'}\n        text=\"Launch new run\"\n        disabled={!canLaunchPipelineExecution}\n        onClick={(e) => materialize.onClick(pipelineSelector, e)}\n      />\n    ) : (\n      <MenuLink\n        icon=\"execute\"\n        text=\"Launch new run\"\n        disabled={!canLaunchPipelineExecution}\n        to={workspacePipelinePath({\n          repoName: repoAddress.name,\n          repoLocation: repoAddress.location,\n          pipelineName: job.name,\n          isJob: job.isJob,\n          path: '/playground',\n        })}\n      />\n    );\n\n  const reExecuteAllItem = (\n    <MenuItem\n      icon=\"replay\"\n      text=\"Re-execute latest run\"\n      disabled={!canLaunchPipelineReexecution || !run || !canRunAllSteps(run)}\n      onClick={(e) =>\n        run ? reexecute.onClick(run, ReexecutionStrategy.ALL_STEPS, e.shiftKey) : undefined\n      }\n    />\n  );\n\n  const reExecuteFromFailureItem = (\n    <MenuItem\n      icon=\"sync_problem\"\n      text=\"Re-execute latest run from failure\"\n      disabled={!canLaunchPipelineReexecution || !run || !canRunFromFailure(run)}\n      onClick={(e) =>\n        run ? reexecute.onClick(run, ReexecutionStrategy.FROM_FAILURE, e.shiftKey) : undefined\n      }\n    />\n  );\n\n  return (\n    <>\n      {materialize.launchpadElement}\n      {reexecute.launchpadElement}\n      <Popover\n        onOpened={() => fetchIfPossible()}\n        content={\n          <Menu>\n            <MenuLink\n              to={workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: job.name,\n                isJob: job.isJob,\n              })}\n              icon=\"job\"\n              text=\"View job\"\n            />\n            <MenuLink\n              to={workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: job.name,\n                isJob: job.isJob,\n                path: '/runs',\n              })}\n              icon=\"checklist\"\n              text=\"View all recent runs\"\n            />\n            {canLaunchPipelineExecution ? (\n              executeItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineExecution} display=\"block\">\n                {executeItem}\n              </Tooltip>\n            )}\n            {canLaunchPipelineReexecution ? (\n              reExecuteAllItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n                {reExecuteAllItem}\n              </Tooltip>\n            )}\n            {canLaunchPipelineReexecution ? (\n              reExecuteFromFailureItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n                {reExecuteFromFailureItem}\n              </Tooltip>\n            )}\n          </Menu>\n        }\n        position=\"bottom-left\"\n      >\n        <Button icon={<Icon name=\"more_horiz\" />} intent=\"none\" />\n      </Popover>\n    </>\n  );\n};\n\nconst RUN_RE_EXECUTION_QUERY = gql`\n  query RunReExecutionQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        pipelineName\n        tags {\n          key\n          value\n        }\n        executionPlan {\n          artifactsPersisted\n          assetSelection\n          ...ExecutionPlanToGraphFragment\n        }\n      }\n    }\n  }\n  ${EXECUTION_PLAN_TO_GRAPH_FRAGMENT}\n`;\n","import {Box, MiddleTruncate, useDelayedState} from '@dagster-io/ui-components';\nimport {forwardRef, useMemo} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {CaptionText, LoadingOrNone} from './VirtualizedWorkspaceTable';\nimport {buildPipelineSelector} from './WorkspaceContext/util';\nimport {RepoAddress} from './types';\nimport {SingleJobQuery, SingleJobQueryVariables} from './types/SingleJobQuery.types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {gql, useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {JobMenu} from '../instance/JobMenu';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {ScheduleOrSensorTag} from '../nav/ScheduleOrSensorTag';\nimport {RunStatusPezList} from '../runs/RunStatusPez';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitchFragment';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitchFragment';\nimport {HeaderCell, HeaderRow, RowCell} from '../ui/VirtualizedTable';\n\nconst TEMPLATE_COLUMNS = '1.5fr 1fr 180px 96px 80px';\n\ninterface JobRowProps {\n  name: string;\n  index: number;\n  isJob: boolean;\n  repoAddress: RepoAddress;\n}\n\nexport const VirtualizedJobRow = forwardRef(\n  (props: JobRowProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n    const {name, isJob, repoAddress, index} = props;\n\n    // Wait 100ms before querying in case we're scrolling the table really fast\n    const shouldQuery = useDelayedState(100);\n    const queryResult = useQuery<SingleJobQuery, SingleJobQueryVariables>(SINGLE_JOB_QUERY, {\n      variables: {\n        selector: buildPipelineSelector(repoAddress, name),\n      },\n      skip: !shouldQuery,\n    });\n    useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n    const {data} = queryResult;\n    const pipeline =\n      data?.pipelineOrError.__typename === 'Pipeline' ? data?.pipelineOrError : undefined;\n\n    const {schedules, sensors} = useMemo(() => {\n      if (pipeline) {\n        const {schedules, sensors} = pipeline;\n        return {schedules, sensors};\n      }\n      return {schedules: [], sensors: []};\n    }, [pipeline]);\n\n    const latestRuns = useMemo(() => {\n      if (pipeline) {\n        const {runs} = pipeline;\n        if (runs.length) {\n          return [...runs];\n        }\n      }\n      return [];\n    }, [pipeline]);\n\n    return (\n      <div data-index={index} ref={ref}>\n        <RowGrid border=\"bottom\">\n          <RowCell>\n            <div style={{maxWidth: '100%', whiteSpace: 'nowrap', fontWeight: 500}}>\n              <Link to={workspacePathFromAddress(repoAddress, `/jobs/${name}`)}>\n                <MiddleTruncate text={name} />\n              </Link>\n            </div>\n            <CaptionText>{pipeline?.description || ''}</CaptionText>\n          </RowCell>\n          <RowCell>\n            {schedules.length || sensors.length ? (\n              <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 8}}>\n                <ScheduleSensorTagContainer>\n                  <ScheduleOrSensorTag\n                    schedules={schedules}\n                    sensors={sensors}\n                    repoAddress={repoAddress}\n                  />\n                </ScheduleSensorTagContainer>\n              </Box>\n            ) : (\n              <LoadingOrNone queryResult={queryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            {latestRuns[0] ? (\n              <LastRunSummary\n                run={latestRuns[0]}\n                showButton={false}\n                showHover\n                showSummary={false}\n                name={name}\n              />\n            ) : (\n              <LoadingOrNone queryResult={queryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            {latestRuns.length ? (\n              <Box padding={{top: 4}}>\n                <RunStatusPezList jobName={name} runs={[...latestRuns].reverse()} fade />\n              </Box>\n            ) : (\n              <LoadingOrNone queryResult={queryResult} />\n            )}\n          </RowCell>\n          <RowCell>\n            <Box flex={{justifyContent: 'flex-end'}} style={{marginTop: '-2px'}}>\n              <JobMenu\n                job={{name, isJob, runs: latestRuns}}\n                isAssetJob={pipeline ? pipeline.isAssetJob : 'loading'}\n                repoAddress={repoAddress}\n              />\n            </Box>\n          </RowCell>\n        </RowGrid>\n      </div>\n    );\n  },\n);\n\nexport const VirtualizedJobHeader = () => {\n  return (\n    <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Schedules/sensors</HeaderCell>\n      <HeaderCell>Latest run</HeaderCell>\n      <HeaderCell>Run history</HeaderCell>\n      <HeaderCell></HeaderCell>\n    </HeaderRow>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst ScheduleSensorTagContainer = styled.div`\n  width: 100%;\n\n  > .bp5-popover-target {\n    width: 100%;\n  }\n`;\n\nconst SINGLE_JOB_QUERY = gql`\n  query SingleJobQuery($selector: PipelineSelector!) {\n    pipelineOrError(params: $selector) {\n      ... on Pipeline {\n        id\n        name\n        isJob\n        isAssetJob\n        description\n        runs(limit: 5) {\n          id\n          ...RunTimeFragment\n        }\n        schedules {\n          id\n          ...ScheduleSwitchFragment\n        }\n        sensors {\n          id\n          ...SensorSwitchFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n","import {ReactNode} from 'react';\n\nimport {Box} from './Box';\nimport styles from './css/HorizontalControls.module.css';\n\ntype Control = {key: string; control: ReactNode};\n\ninterface Props {\n  controls: Control[];\n}\n\nexport const HorizontalControls = ({controls}: Props) => {\n  return (\n    <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}} className={styles.container}>\n      {controls.map(({key, control}) =>\n        control ? (\n          <div key={key} className={styles.item}>\n            {control}\n          </div>\n        ) : null,\n      )}\n    </Box>\n  );\n};\n","import {ComponentProps} from 'react';\n\nimport {UnstyledButton} from './UnstyledButton';\nimport styles from './css/HoverButton.module.css';\n\nexport const HoverButton = (props: ComponentProps<typeof UnstyledButton>) => {\n  return <UnstyledButton {...props} className={styles.button} />;\n};\n","import {DirectionalSpacing} from './types';\n\ntype SpacingValues = {\n  top: number;\n  right: number;\n  bottom: number;\n  left: number;\n};\n\nexport const directionalSpacingToValues = (spacing: DirectionalSpacing): SpacingValues => {\n  if (typeof spacing === 'number') {\n    return {top: spacing, right: spacing, bottom: spacing, left: spacing};\n  }\n\n  const top = spacing.vertical || spacing.top || 0;\n  const right = spacing.horizontal || spacing.right || 0;\n  const bottom = spacing.vertical || spacing.bottom || 0;\n  const left = spacing.horizontal || spacing.left || 0;\n  return {top, right, bottom, left};\n};\n","import {CSSProperties, ChangeEvent, HTMLProps, ReactNode, forwardRef} from 'react';\n\nimport {Checkbox} from './Checkbox';\nimport styles from './css/ListItem.module.css';\nimport {directionalSpacingToValues} from './directionalSpacingToValues';\nimport {DirectionalSpacing} from './types';\n\ninterface Props {\n  index: number;\n  checked?: boolean;\n  onToggle?: (checked: boolean) => void;\n  href: string;\n  renderLink: (props: HTMLProps<HTMLAnchorElement>) => ReactNode;\n  padding?: DirectionalSpacing;\n  left: ReactNode;\n  right: ReactNode;\n}\n\nconst defaultRenderLink = ({href, ...props}: HTMLProps<HTMLAnchorElement>): ReactNode => (\n  <a href={href} {...props} />\n);\n\nconst DEFAULT_PADDING: DirectionalSpacing = {\n  vertical: 12,\n  horizontal: 24,\n};\n\nexport const ListItem = forwardRef<HTMLDivElement, Props>((props, ref) => {\n  const {\n    index,\n    checked = false,\n    padding = DEFAULT_PADDING,\n    onToggle,\n    href,\n    renderLink,\n    left,\n    right,\n  } = props;\n\n  const link = renderLink ?? defaultRenderLink;\n  const {top, right: rightPadding, bottom, left: leftPadding} = directionalSpacingToValues(padding);\n\n  return (\n    <div\n      className={styles.listItem}\n      style={\n        {\n          '--spacing-top': `${top}px`,\n          '--spacing-bottom': `${bottom}px`,\n          '--spacing-left': `${leftPadding}px`,\n        } as CSSProperties\n      }\n      data-index={index}\n      ref={ref}\n    >\n      {onToggle ? (\n        <div className={styles.checkboxContainer}>\n          <Checkbox\n            format=\"check\"\n            checked={checked}\n            size=\"small\"\n            onChange={(e: ChangeEvent<HTMLInputElement>) => onToggle(e.target.checked)}\n          />\n        </div>\n      ) : null}\n      {link({\n        href,\n        className: styles.listItemAnchor,\n        children: left,\n      })}\n      <div\n        style={{'--spacing-right': `${rightPadding}px`} as CSSProperties}\n        className={styles.right}\n      >\n        {right}\n      </div>\n    </div>\n  );\n});\n","import {gql} from '../apollo-client';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitchFragment';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitchFragment';\n\nexport const SINGLE_JOB_QUERY = gql`\n  query SingleJobQuery($selector: PipelineSelector!) {\n    pipelineOrError(params: $selector) {\n      ... on Pipeline {\n        id\n        name\n        isJob\n        isAssetJob\n        description\n        runs(limit: 5) {\n          id\n          ...RunTimeFragment\n        }\n        schedules {\n          id\n          ...ScheduleSwitchFragment\n        }\n        sensors {\n          id\n          ...SensorSwitchFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n","import {\n  Box,\n  Colors,\n  HorizontalControls,\n  HoverButton,\n  Icon,\n  ListItem,\n  MiddleTruncate,\n  Popover,\n  Skeleton,\n  Tooltip,\n  useDelayedState,\n} from '@dagster-io/ui-components';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport {forwardRef, useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {SINGLE_JOB_QUERY} from './SingleJobQuery';\nimport {TimeFromNow} from '../ui/TimeFromNow';\nimport {SingleJobQuery, SingleJobQueryVariables} from './types/SingleJobQuery.types';\nimport {JobMenu} from '../instance/JobMenu';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunStatusOverlay, RunStatusPezList} from '../runs/RunStatusPez';\nimport {buildPipelineSelector} from './WorkspaceContext/util';\nimport {RepoAddress} from './types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {useQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {ScheduleSwitch} from '../schedules/ScheduleSwitch';\nimport {humanCronString} from '../schedules/humanCronString';\nimport {ScheduleSwitchFragment} from '../schedules/types/ScheduleSwitchFragment.types';\nimport {SensorSwitch} from '../sensors/SensorSwitch';\nimport {SensorSwitchFragment} from '../sensors/types/SensorSwitchFragment.types';\n\ndayjs.extend(relativeTime);\n\ninterface JobRowProps {\n  index: number;\n  name: string;\n  isJob: boolean;\n  repoAddress: RepoAddress;\n}\n\nexport const VirtualizedObserveJobRow = forwardRef(\n  (props: JobRowProps, ref: React.ForwardedRef<HTMLDivElement>) => {\n    const {index, name, isJob, repoAddress} = props;\n\n    // Wait 100ms before querying in case we're scrolling the table really fast\n    const shouldQuery = useDelayedState(100);\n    const queryResult = useQuery<SingleJobQuery, SingleJobQueryVariables>(SINGLE_JOB_QUERY, {\n      variables: {\n        selector: buildPipelineSelector(repoAddress, name),\n      },\n      skip: !shouldQuery,\n    });\n    useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n    const {data} = queryResult;\n    const pipeline =\n      data?.pipelineOrError.__typename === 'Pipeline' ? data?.pipelineOrError : undefined;\n\n    const {schedules, sensors} = useMemo(() => {\n      if (pipeline) {\n        const {schedules, sensors} = pipeline;\n        return {schedules, sensors};\n      }\n      return {schedules: [], sensors: []};\n    }, [pipeline]);\n\n    const latestRuns = useMemo(() => {\n      if (pipeline) {\n        const {runs} = pipeline;\n        if (runs.length) {\n          return [...runs];\n        }\n      }\n      return [];\n    }, [pipeline]);\n\n    const right = () => {\n      if (queryResult.loading && !queryResult.data) {\n        return <Skeleton $width={200} $height={24} />;\n      }\n\n      return (\n        <HorizontalControls\n          controls={[\n            {\n              key: 'latest-run',\n              control: latestRuns[0]?.startTime ? (\n                <Popover\n                  key={latestRuns[0].id}\n                  position=\"top\"\n                  interactionKind=\"hover\"\n                  content={\n                    <div>\n                      <RunStatusOverlay run={latestRuns[0]} name={name} />\n                    </div>\n                  }\n                  hoverOpenDelay={100}\n                >\n                  <HoverButton>\n                    <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n                      <RunStatusIndicator status={latestRuns[0].status} />\n                      <TimeFromNow unixTimestamp={latestRuns[0].startTime} />\n                    </Box>\n                  </HoverButton>\n                </Popover>\n              ) : null,\n            },\n            {\n              key: 'schedules',\n              control:\n                schedules.length > 0 ? (\n                  <AutomationButton\n                    type=\"schedule\"\n                    enabled={schedules.some(\n                      (schedule) => schedule.scheduleState.status === 'RUNNING',\n                    )}\n                    automations={schedules}\n                    repoAddress={repoAddress}\n                  />\n                ) : null,\n            },\n            {\n              key: 'sensors',\n              control:\n                sensors.length > 0 ? (\n                  <AutomationButton\n                    type=\"sensor\"\n                    enabled={sensors.some((sensor) => sensor.sensorState.status === 'RUNNING')}\n                    automations={sensors}\n                    repoAddress={repoAddress}\n                  />\n                ) : null,\n            },\n            {\n              key: 'automations',\n              control:\n                sensors.length === 0 && schedules.length === 0 ? (\n                  <Tooltip content=\"No automations\" placement=\"top\">\n                    <AutomationButton type=\"none\" />\n                  </Tooltip>\n                ) : null,\n            },\n            {\n              key: 'runs',\n              control: (\n                <Box padding={{horizontal: 8}}>\n                  <RunStatusPezList\n                    jobName={name}\n                    runs={[...latestRuns].reverse()}\n                    fade\n                    forceCount={5}\n                  />\n                </Box>\n              ),\n            },\n            {\n              key: 'menu',\n              control: (\n                <JobMenu\n                  job={{name, isJob, runs: latestRuns}}\n                  isAssetJob={pipeline ? pipeline.isAssetJob : 'loading'}\n                  repoAddress={repoAddress}\n                />\n              ),\n            },\n          ]}\n        />\n      );\n    };\n\n    return (\n      <ListItem\n        ref={ref}\n        index={index}\n        href={workspacePathFromAddress(repoAddress, `/jobs/${name}`)}\n        renderLink={({href, ...props}) => <Link to={href || '#'} {...props} />}\n        left={\n          <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n            <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n              <Icon name=\"job\" />\n              {name}\n            </Box>\n            {pipeline?.description ? (\n              <Tooltip\n                content={<div style={{width: 320}}>{pipeline.description}</div>}\n                placement=\"top\"\n              >\n                <Icon name=\"info\" color={Colors.textLight()} />\n              </Tooltip>\n            ) : null}\n          </Box>\n        }\n        right={right()}\n      />\n    );\n  },\n);\n\ntype AutomationType = 'sensor' | 'schedule' | 'none';\n\ninterface AutomationButtonProps {\n  type: AutomationType;\n  enabled?: boolean;\n  automations?: ScheduleSwitchFragment[] | SensorSwitchFragment[];\n  repoAddress?: RepoAddress;\n}\n\nconst AutomationButton = ({type, automations, enabled, repoAddress}: AutomationButtonProps) => {\n  const icon = () => {\n    if (type === 'none') {\n      return <Icon name=\"status\" color={Colors.accentGray()} />;\n    }\n\n    return <Icon name={type} color={enabled ? Colors.accentGreen() : Colors.accentGray()} />;\n  };\n\n  const button = (\n    <HoverButton>\n      <Box padding={{vertical: 2}}>{icon()}</Box>\n    </HoverButton>\n  );\n\n  if (type === 'none') {\n    return button;\n  }\n\n  const count = automations?.length || 0;\n  const headerText =\n    type === 'sensor'\n      ? count === 1\n        ? '1 sensor'\n        : `${count} sensors`\n      : count === 1\n        ? '1 schedule'\n        : `${count} schedules`;\n\n  return (\n    <Popover\n      position=\"top\"\n      interactionKind=\"hover\"\n      content={\n        <Box\n          flex={{direction: 'column'}}\n          style={{width: 320, overflowX: 'hidden'}}\n          background={Colors.backgroundLighter()}\n        >\n          <Box\n            flex={{direction: 'row', gap: 8, alignItems: 'center'}}\n            padding={{vertical: 12, horizontal: 12}}\n            border=\"bottom\"\n          >\n            <strong style={{fontSize: 14}}>{headerText}</strong>\n          </Box>\n          <div style={{overflowY: 'auto', maxHeight: 240}}>\n            {automations?.length && repoAddress ? (\n              automations.map((automation, ii) => {\n                const displayName =\n                  automation.__typename === 'Sensor'\n                    ? automation.name\n                    : humanCronString(automation.cronSchedule, {\n                        longTimezoneName: automation.executionTimezone || 'UTC',\n                      });\n                return (\n                  <Box\n                    key={automation.id + '-' + ii}\n                    flex={{\n                      direction: 'row',\n                      gap: 12,\n                      alignItems: 'center',\n                      justifyContent: 'space-between',\n                    }}\n                    padding={12}\n                    border={ii === 0 ? null : 'top'}\n                  >\n                    <Box\n                      flex={{direction: 'row', alignItems: 'center', gap: 8}}\n                      style={{width: '100%', overflow: 'hidden'}}\n                    >\n                      <Icon name={automation.__typename === 'Schedule' ? 'schedule' : 'sensor'} />\n                      <Link\n                        to={workspacePathFromAddress(\n                          repoAddress,\n                          automation.__typename === 'Schedule'\n                            ? `/schedules/${automation.name}`\n                            : `/sensors/${automation.name}`,\n                        )}\n                        style={{flex: 1, overflow: 'hidden', width: '100%'}}\n                      >\n                        <MiddleTruncate text={displayName} />\n                      </Link>\n                    </Box>\n                    <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n                      {automation.__typename === 'Schedule' ? (\n                        <ScheduleSwitch schedule={automation} repoAddress={repoAddress} />\n                      ) : (\n                        <SensorSwitch sensor={automation} repoAddress={repoAddress} />\n                      )}\n                    </Box>\n                  </Box>\n                );\n              })\n            ) : (\n              <div>No automations</div>\n            )}\n          </div>\n        </Box>\n      }\n      hoverOpenDelay={100}\n    >\n      {button}\n    </Popover>\n  );\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {useMemo, useRef} from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {useFeatureFlags} from '../app/Flags';\nimport {Container, Inner, TABLE_HEADER_HEIGHT} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedJobHeader, VirtualizedJobRow} from '../workspace/VirtualizedJobRow';\nimport {VirtualizedObserveJobRow} from '../workspace/VirtualizedObserveJobRow';\nimport {DynamicRepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; isJob: boolean; name: string};\n\nexport const OverviewJobsTable = ({repos}: Props) => {\n  const {flagUseNewObserveUIs} = useFeatureFlags();\n  const parentRef = useRef<HTMLDivElement | null>(null);\n  const allKeys = useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, jobs}) => {\n      flat.push({type: 'header', repoAddress, jobCount: jobs.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        jobs.forEach(({isJob, name}) => {\n          flat.push({type: 'job', repoAddress, isJob, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? TABLE_HEADER_HEIGHT : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        {flagUseNewObserveUIs ? null : <VirtualizedJobHeader />}\n        <Inner $totalHeight={totalHeight}>\n          <div\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              width: '100%',\n              transform: `translateY(${items[0]?.start ?? 0}px)`,\n            }}\n          >\n            {items.map(({index, key}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n\n              if (type === 'header') {\n                return (\n                  <DynamicRepoRow\n                    key={key}\n                    repoAddress={row.repoAddress}\n                    ref={rowVirtualizer.measureElement}\n                    index={index}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Tooltip\n                        content={row.jobCount === 1 ? '1 job' : `${row.jobCount} jobs`}\n                        placement=\"top\"\n                      >\n                        <Tag>{row.jobCount}</Tag>\n                      </Tooltip>\n                    }\n                  />\n                );\n              }\n\n              if (flagUseNewObserveUIs) {\n                return (\n                  <VirtualizedObserveJobRow\n                    key={key}\n                    index={index}\n                    ref={rowVirtualizer.measureElement}\n                    name={row.name}\n                    isJob={row.isJob}\n                    repoAddress={row.repoAddress}\n                  />\n                );\n              }\n\n              return (\n                <VirtualizedJobRow\n                  key={key}\n                  index={index}\n                  ref={rowVirtualizer.measureElement}\n                  name={row.name}\n                  isJob={row.isJob}\n                  repoAddress={row.repoAddress}\n                />\n              );\n            })}\n          </div>\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {\n  Box,\n  Colors,\n  Icon,\n  NonIdealState,\n  Spinner,\n  SpinnerWithText,\n} from '@dagster-io/ui-components';\nimport {useCallback, useContext, useMemo} from 'react';\n\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useQueryPersistedFilterState} from '../hooks/useQueryPersistedFilterState';\nimport {TruncatedTextWithFullTextOnHover} from '../nav/getLeftNavItemsForOption';\nimport {OverviewJobsTable} from '../overview/OverviewJobsTable';\nimport {sortRepoBuckets} from '../overview/sortRepoBuckets';\nimport {visibleRepoKeys} from '../overview/visibleRepoKeys';\nimport {useFilters} from '../ui/BaseFilters/useFilters';\nimport {useStaticSetFilter} from '../ui/BaseFilters/useStaticSetFilter';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {Tag} from '../ui/Filters/useDefinitionTagFilter';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext/WorkspaceContext';\nimport {\n  WorkspaceLocationNodeFragment,\n  WorkspacePipelineFragment,\n} from '../workspace/WorkspaceContext/types/WorkspaceQueries.types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nconst FILTER_FIELDS = ['jobs', 'tags', 'codeLocations'] as const;\n\nexport const JobsPageContent = () => {\n  const {allRepos, visibleRepos, loading, data: cachedData} = useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  // Batch up the data and bucket by repo.\n  const repoBuckets = useMemo(() => {\n    const cachedEntries = Object.values(cachedData).filter(\n      (location): location is Extract<typeof location, {__typename: 'WorkspaceLocationEntry'}> =>\n        location.__typename === 'WorkspaceLocationEntry',\n    );\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(cachedEntries).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [cachedData, visibleRepos]);\n\n  const allJobs = useMemo(() => repoBuckets.flatMap((bucket) => bucket.jobs), [repoBuckets]);\n\n  const {state: _state, setters} = useQueryPersistedFilterState<{\n    jobs: string[];\n    tags: Tag[];\n    codeLocations: RepoAddress[];\n  }>(FILTER_FIELDS);\n\n  const state = useMemo(() => {\n    return {\n      ..._state,\n      codeLocations: _state.codeLocations.map(({name, location}) =>\n        buildRepoAddress(name, location),\n      ),\n    };\n  }, [_state]);\n\n  const codeLocationFilter = useCodeLocationFilter({\n    codeLocations: state.codeLocations,\n    setCodeLocations: setters.setCodeLocations,\n  });\n\n  const jobFilter = useStaticSetFilter<string>({\n    name: 'Job',\n    icon: 'job',\n    allValues: useMemo(\n      () =>\n        allJobs.map((job) => ({\n          key: job.name,\n          value: job.name,\n          match: [job.name],\n        })),\n      [allJobs],\n    ),\n    renderLabel: ({value}) => (\n      <Box flex={{direction: 'row', gap: 4, alignItems: 'center'}}>\n        <Icon name=\"job\" />\n        <TruncatedTextWithFullTextOnHover text={value} />\n      </Box>\n    ),\n    getStringValue: (x) => x,\n    state: state.jobs,\n    onStateChanged: useCallback(\n      (values) => {\n        setters.setJobs(Array.from(values));\n      },\n      [setters],\n    ),\n  });\n\n  const filters = useMemo(() => [codeLocationFilter, jobFilter], [codeLocationFilter, jobFilter]);\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const filteredRepoBuckets = useMemo(() => {\n    return repoBuckets\n      .filter((bucket) => {\n        return !state.codeLocations.length || state.codeLocations.includes(bucket.repoAddress);\n      })\n      .map((bucket) => ({\n        ...bucket,\n        jobs: bucket.jobs.filter((job) => {\n          if (state.jobs.length && !state.jobs.includes(job.name)) {\n            return false;\n          }\n          return true;\n        }),\n      }))\n      .filter((bucket) => !!bucket.jobs.length);\n  }, [repoBuckets, state]);\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    if (!filteredRepoBuckets.length) {\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={\n              repoBuckets.length\n                ? 'No jobs were found that match your filters'\n                : 'No jobs were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewJobsTable repos={filteredRepoBuckets} />;\n  };\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 8}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between', grow: 0}}\n        border=\"bottom\"\n      >\n        {filterButton}\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64} flex={{direction: 'row', justifyContent: 'center'}}>\n          <SpinnerWithText label=\"Loading jobs…\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  jobs: WorkspacePipelineFragment[];\n};\n\nconst buildBuckets = (\n  locationEntries: Extract<WorkspaceLocationNodeFragment, {__typename: 'WorkspaceLocationEntry'}>[],\n): RepoBucket[] => {\n  const entries = locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, pipelines} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const jobs = pipelines.filter(({name}) => !isHiddenAssetGroupJob(name));\n\n      if (jobs.length > 0) {\n        buckets.push({\n          repoAddress,\n          jobs,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n","import {Box, PageHeader, Subtitle1} from '@dagster-io/ui-components';\n\nimport {JobsPageContent} from './JobsPageContent';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nexport const JobsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Jobs');\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader title={<Subtitle1>Jobs</Subtitle1>} />\n      <JobsPageContent />\n    </Box>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default JobsRoot;\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"HoverButton_button__q9NSN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"HorizontalControls_container__kalME\",\"item\":\"HorizontalControls_item__n78mr\"};","import {Box, CaptionMono, Colors, FontFamily, Popover} from '@dagster-io/ui-components';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {RunStatusIndicator} from './RunStatusDots';\nimport {RUN_STATUS_COLORS} from './RunStatusTag';\nimport {failedStatuses, inProgressStatuses} from './RunStatuses';\nimport {RunStateSummary, RunTime, titleForRun} from './RunUtils';\nimport {RunTimeFragment} from './types/RunUtils.types';\nimport {RunStatus} from '../graphql/types';\nimport {StepSummaryForRun} from '../instance/StepSummaryForRun';\n\nconst MIN_OPACITY = 0.2;\nconst MAX_OPACITY = 1.0;\nconst MIN_OPACITY_STEPS = 3;\n\ninterface Props {\n  opacity?: number;\n  runId: string;\n  status: RunStatus;\n}\n\nexport const RunStatusPez = (props: Props) => {\n  const {status, opacity = MAX_OPACITY} = props;\n  const color = RUN_STATUS_COLORS[status];\n\n  return <Pez $color={color} $opacity={opacity} />;\n};\n\ninterface ListProps {\n  fade: boolean;\n  jobName: string;\n  runs: RunTimeFragment[];\n  forceCount?: number;\n}\n\nexport const RunStatusPezList = (props: ListProps) => {\n  const {fade, jobName, runs, forceCount} = props;\n  const count = runs.length;\n  const countForStep = Math.max(MIN_OPACITY_STEPS, count);\n  const step = (MAX_OPACITY - MIN_OPACITY) / countForStep;\n\n  let items: (RunTimeFragment | null)[] = [...runs];\n  if (forceCount) {\n    if (forceCount > items.length) {\n      items.unshift(...Array(forceCount - items.length).fill(null));\n    } else {\n      items = items.slice(0, forceCount);\n    }\n  }\n\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 2}}>\n      {items.map((run, ii) => {\n        const opacity = fade ? MAX_OPACITY - (count - ii - 1) * step : 1.0;\n        if (!run) {\n          return <Pez key={`empty-${ii}`} $color={Colors.backgroundLighter()} $opacity={opacity} />;\n        }\n\n        return (\n          <Popover\n            key={run.id}\n            position=\"top\"\n            interactionKind=\"hover\"\n            content={\n              <div>\n                <RunStatusOverlay run={run} name={jobName} />\n              </div>\n            }\n            hoverOpenDelay={100}\n          >\n            <RunStatusPez key={run.id} runId={run.id} status={run.status} opacity={opacity} />\n          </Popover>\n        );\n      })}\n    </Box>\n  );\n};\n\ninterface OverlayProps {\n  run: RunTimeFragment;\n  name: string;\n}\n\nexport const RunStatusOverlay = ({name, run}: OverlayProps) => {\n  return (\n    <OverlayContainer>\n      <OverlayTitle>{name}</OverlayTitle>\n      <RunRow>\n        <Box flex={{alignItems: 'center', direction: 'row', gap: 8}}>\n          <RunStatusIndicator status={run.status} />\n          <Link to={`/runs/${run.id}`}>\n            <CaptionMono>{titleForRun(run)}</CaptionMono>\n          </Link>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <RunTime run={run} />\n          <RunStateSummary run={run} />\n        </Box>\n      </RunRow>\n      {failedStatuses.has(run.status) || inProgressStatuses.has(run.status) ? (\n        <SummaryContainer>\n          <StepSummaryForRun runId={run.id} />\n        </SummaryContainer>\n      ) : null}\n    </OverlayContainer>\n  );\n};\n\nconst OverlayContainer = styled.div`\n  padding: 4px;\n  font-size: 12px;\n  width: 240px;\n`;\n\nconst OverlayTitle = styled.div`\n  padding: 8px;\n  box-shadow: inset 0 -1px ${Colors.keylineDefault()};\n  font-family: ${FontFamily.default};\n  font-size: 14px;\n  font-weight: 500;\n  color: ${Colors.textDefault()};\n  max-width: 100%;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  min-width: 0px;\n`;\n\nconst RunRow = styled.div`\n  padding: 8px;\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\n\nconst SummaryContainer = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding: 4px 8px 8px;\n\n  :empty {\n    display: none;\n  }\n`;\n\nconst Pez = styled.div<{$color: string; $opacity: number}>`\n  background-color: ${({$color}) => $color};\n  border-radius: 2px;\n  height: 16px;\n  opacity: ${({$opacity}) => $opacity};\n  width: 8px;\n`;\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext/util';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n"],"names":["LastRunSummary","memo","name","run","showHover","showButton","showSummary","status","intent","useMemo","RunStatus","SUCCESS","CANCELED","CANCELING","FAILURE","Box","flex","direction","justifyContent","alignItems","gap","tag","tagElement","Tag","RunStatusIndicator","size","RunTime","Popover","position","interactionKind","content","div","RunStatusOverlay","hoverOpenDelay","RunStateSummary","failedStatuses","has","inProgressStatuses","StepSummaryForRun","runId","id","undefined","AnchorButton","to","props","data","useQuery","queryResult","STEP_SUMMARY_FOR_RUN_QUERY","variables","pipelineRunOrError","__typename","relevantSteps","stepStats","filter","step","StepEventStatus","IN_PROGRESS","stepCount","length","query","endTime","qs","focusedTime","Math","floor","addQueryPrefix","Caption","color","Colors","Link","stepKey","gql","useCodeLocationFilter","codeLocations","setCodeLocations","allRepos","visibleRepos","setVisible","setHidden","useContext","WorkspaceContext","allRepoAddresses","map","buildRepoAddress","repo","repository","repositoryLocation","visibleRepoAddresses","setVisibleRepos","useCallback","state","repoAddress","Array","from","useStaticSetFilter","allValues","value","match","repoAddressAsHumanString","onStateChanged","menuWidth","BaseConfig","getStringValue","icon","renderLabel","TruncatedTextWithFullTextOnHover","text","getKey","CancelRunButton","canTerminate","showDialog","setShowDialog","useState","closeDialog","onComplete","result","errors","error","showSharedToaster","message","Button","Icon","disabled","onClick","TerminationDialog","isOpen","onClose","selectedRuns","stepSelectionWithState","selection","metadata","stepStates","keys","steps","key","IStepState","PREPARING","present","failed","includes","FAILED","finished","every","SUCCEEDED","stepState","canRunAllSteps","doneStatuses","executionPlan","graph","repoMatch","useRepositoryForRunWithParentSnapshot","jobError","useJobAvailabilityErrorForRun","flagAssetRetries","useFeatureFlags","artifactsPersisted","currentRunSelection","stepSelectionFromRunTags","tags","find","t","DagsterTag","StepSelection","filterByQuery","all","k","currentRunIsFromFailure","some","IsResumeRetry","reexecute","useJobReexecution","reexecuteWithSelection","pipelineSnapshotId","executionParams","getReexecutionParamsForSelection","repositoryLocationName","repositoryName","full","scope","title","tooltip","ReexecutionStrategy","ALL_STEPS","e","shiftKey","same","StepSelectionDescription","selected","fromSelected","console","warn","Promise","resolve","selectionForPythonFiltering","join","selectionForUIFiltering","selectionKeys","filterRunSelectionByQuery","node","fromFailureEnabled","canRunFromFailure","fromFailure","FROM_FAILURE","forEach","option","options","assetSelection","fromAssetFailure","FROM_ASSET_FAILURE","Boolean","preferredRerun","primary","Group","spacing","LaunchButtonDropdown","runCount","DEFAULT_DISABLED_REASON","hasReExecutePermission","launchpadElement","style","paddingLeft","span","display","useQueryPersistedFilterState","setState","useQueryPersistedState","encode","filterFields","reduce","acc","field","filters","JSON","stringify","decode","accum","parse","setters","fieldAsString","charAt","toUpperCase","slice","prevState","Function","JobMenu","job","isAssetJob","lastRun","runs","pipelineSelector","pipelineName","location","materialize","useMaterializationAction","permissions","canLaunchPipelineReexecution","canLaunchPipelineExecution","disabledReasons","usePermissionsForLocation","fetchHasExecutionPlan","useLazyQuery","RUN_RE_EXECUTION_QUERY","fetchIfPossible","executeItem","MenuItem","loading","Spinner","purpose","MenuLink","workspacePipelinePath","repoName","repoLocation","isJob","path","reExecuteAllItem","reExecuteFromFailureItem","onOpened","Menu","Tooltip","EXECUTION_PLAN_TO_GRAPH_FRAGMENT","TEMPLATE_COLUMNS","VirtualizedJobRow","forwardRef","ref","index","shouldQuery","useDelayedState","SINGLE_JOB_QUERY","selector","buildPipelineSelector","skip","useQueryRefreshAtInterval","FIFTEEN_SECONDS","pipeline","pipelineOrError","schedules","sensors","latestRuns","data-index","RowGrid","border","RowCell","maxWidth","whiteSpace","fontWeight","workspacePathFromAddress","MiddleTruncate","CaptionText","description","ScheduleSensorTagContainer","ScheduleOrSensorTag","LoadingOrNone","padding","top","RunStatusPezList","jobName","reverse","fade","marginTop","HeaderRow","templateColumns","sticky","HeaderCell","styled","RUN_TIME_FRAGMENT","SCHEDULE_SWITCH_FRAGMENT","SENSOR_SWITCH_FRAGMENT","HorizontalControls","controls","className","styles","control","HoverButton","UnstyledButton","directionalSpacingToValues","right","bottom","left","vertical","horizontal","href","a","DEFAULT_PADDING","ListItem","checked","onToggle","renderLink","rightPadding","leftPadding","Checkbox","format","onChange","target","link","defaultRenderLink","children","dayjs","relativeTime","VirtualizedObserveJobRow","width","placement","Skeleton","$width","$height","startTime","TimeFromNow","unixTimestamp","AutomationButton","type","enabled","schedule","scheduleState","automations","sensor","sensorState","forceCount","button","count","overflowX","background","strong","fontSize","headerText","overflowY","maxHeight","automation","ii","displayName","humanCronString","cronSchedule","longTimezoneName","executionTimezone","overflow","ScheduleSwitch","SensorSwitch","OverviewJobsTable","items","repos","flagUseNewObserveUIs","parentRef","useRef","allKeys","expandedKeys","onToggleAll","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","flattened","flat","jobs","push","jobCount","repoKey","duplicateRepoNames","findDuplicateRepoNames","rowVirtualizer","useVirtualizer","getScrollElement","current","estimateSize","row","TABLE_HEADER_HEIGHT","overscan","totalHeight","getTotalSize","getVirtualItems","Container","VirtualizedJobHeader","Inner","$totalHeight","transform","start","DynamicRepoRow","measureElement","expanded","showLocation","rightElement","FILTER_FIELDS","JobsPageContent","cachedData","repoCount","repoBuckets","cachedEntries","Object","values","visibleKeys","visibleRepoKeys","buildBuckets","allJobs","flatMap","bucket","_state","codeLocationFilter","jobFilter","x","setJobs","filterButton","activeFiltersJsx","useFilters","filteredRepoBuckets","grow","SpinnerWithText","label","paddingTop","NonIdealState","locationEntries","entries","entry","locationOrLoadError","buckets","repositories","pipelines","isHiddenAssetGroupJob","sortRepoBuckets","JobsRoot","useTrackPageView","useDocumentTitle","height","PageHeader","Subtitle1","sort","b","aString","bString","localeCompare","RunStatusPez","opacity","RUN_STATUS_COLORS","MAX_OPACITY","Pez","$color","$opacity","max","MIN_OPACITY_STEPS","countForStep","unshift","fill","OverlayContainer","OverlayTitle","RunRow","CaptionMono","titleForRun","SummaryContainer","FontFamily","default","Set"],"sourceRoot":"","ignoreList":[]}